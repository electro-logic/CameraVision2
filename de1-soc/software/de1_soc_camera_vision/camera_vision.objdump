
camera_vision.elf:     file format elf32-littlenios2
camera_vision.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04010020

Program Header:
    LOAD off    0x00001000 vaddr 0x04010000 paddr 0x04010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04010020 paddr 0x04010020 align 2**12
         filesz 0x0000510c memsz 0x0000510c flags r-x
    LOAD off    0x0000612c vaddr 0x0401512c paddr 0x04015b5c align 2**12
         filesz 0x00000a30 memsz 0x00000a30 flags rw-
    LOAD off    0x0000758c vaddr 0x0401658c paddr 0x0401658c align 2**12
         filesz 0x00000000 memsz 0x00000044 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04010000  04010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  04010020  04010020  00006b5c  2**0
                  CONTENTS
  2 .text         000049f4  04010020  04010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000718  04014a14  04014a14  00005a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a30  0401512c  04015b5c  0000612c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  0401658c  0401658c  0000758c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00000000  00000000  00006b5c  2**0
                  CONTENTS
  7 .memory_system 00000000  040165d0  040165d0  00006b5c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00006b5c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000578  00000000  00000000  00006b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00011b04  00000000  00000000  000070f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000040a5  00000000  00000000  00018bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004b87  00000000  00000000  0001cca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000ea0  00000000  00000000  00021828  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000019e0  00000000  00000000  000226c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004daf  00000000  00000000  000240a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00028e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000540  00000000  00000000  00028e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0002b80e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  0002b811  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0002b81b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0002b81c  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0002b81d  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0002b821  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0002b825  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0002b829  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0002b832  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0002b83b  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000004  00000000  00000000  0002b844  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001d  00000000  00000000  0002b848  2**0
                  CONTENTS, READONLY
 30 .jdi          00005bb1  00000000  00000000  0002b865  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000ac0aa  00000000  00000000  00031416  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04010000 l    d  .entry	00000000 .entry
04010020 l    d  .exceptions	00000000 .exceptions
04010020 l    d  .text	00000000 .text
04014a14 l    d  .rodata	00000000 .rodata
0401512c l    d  .rwdata	00000000 .rwdata
0401658c l    d  .bss	00000000 .bss
00000000 l    d  .sdram	00000000 .sdram
040165d0 l    d  .memory_system	00000000 .memory_system
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../de1_soc_camera_vision_bsp/obj/HAL/src/crt0.o
04010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 bit_helper.c
00000000 l    df *ABS*	00000000 camera_vision.c
00000000 l    df *ABS*	00000000 mipi_bridge_config.c
00000000 l    df *ABS*	00000000 mipi_camera_config.c
00000000 l    df *ABS*	00000000 stdio_ext.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401512c l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
040119c4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
04015300 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04012b64 l     F .text	00000008 __fp_unlock
04012b78 l     F .text	0000019c __sinit.part.1
04012d14 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 refill.c
04013fc0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04015b58 l     O .rwdata	00000004 heap_end
04014554 g     F .text	00000054 _isatty_r
0401147c g     F .text	00000050 alt_main
040145a8 g     F .text	00000060 _lseek_r
040101e4 g     F .text	0000004c ACK_check
04015b5c g       *ABS*	00000000 __flash_rwdata_start
0401018c g     F .text	00000058 ACK_single_check
040165d0 g       *ABS*	00000000 __alt_heap_start
040142dc g     F .text	0000005c __sseek
04012ec4 g     F .text	00000010 __sinit
04012490 g     F .text	00000140 __swbuf_r
04012d1c g     F .text	00000078 __sfmoreglue
040148b0 g     F .text	00000004 __malloc_unlock
04010230 g     F .text	00000120 OC_I2C_Write
040110ec g     F .text	00000050 readBytes
04012eac g     F .text	00000018 _cleanup
04011d60 g     F .text	00000008 altera_nios2_gen2_irq_init
04010000 g     F .entry	0000000c __reset
04011028 g     F .text	00000078 mipi_camera_reg_write_VCM149C
04010020 g       *ABS*	00000000 __flash_exceptions_start
040144f8 g     F .text	0000005c _fstat_r
04016598 g     O .bss	00000004 errno
040123e4 g     F .text	00000014 __srget
04014258 g     F .text	00000008 __seofread
040109fc g     F .text	00000048 WaitFrame
04016590 g     O .bss	00000004 alt_argv
0401db2c g       *ABS*	00000000 _gp
04011654 g     F .text	00000004 usleep
04015b2c g     O .rwdata	00000004 MIPI_REGISTERS_COUNT
04015158 g     O .rwdata	00000180 alt_fd_list
04011f4c g     F .text	00000070 _getc_r
04011fbc g     F .text	00000088 getc
04011d68 g     F .text	00000078 alt_find_dev
040120c0 g     F .text	00000148 memcpy
04010090 g     F .text	000000a8 oc_i2c_init_ex
04012b6c g     F .text	0000000c _cleanup_r
04011a3c g     F .text	00000140 alt_io_redirect
04010f5c g     F .text	00000098 mipi_camera_init
040117b8 g     F .text	0000008c altera_avalon_jtag_uart_read
040112c0 g     F .text	00000064 .hidden __udivsi3
04014744 g     F .text	000000a0 isatty
040165a4 g     O .bss	00000004 __malloc_top_pad
04010cf0 g     F .text	0000003c mipi_bridge_reg_read
040141b0 g     F .text	00000054 _sbrk_r
04014608 g     F .text	00000060 _read_r
04015b30 g     O .rwdata	00000004 alt_max_fd
04010cb8 g     F .text	00000038 mipi_bridge_reg_write
040143f4 g     F .text	000000f0 _fclose_r
04012b34 g     F .text	00000030 fflush
040165a0 g     O .bss	00000004 __malloc_max_sbrked_mem
040147e4 g     F .text	000000c8 lseek
04015b48 g     O .rwdata	00000004 _global_impure_ptr
040165d0 g       *ABS*	00000000 __bss_end
040113a4 g     F .text	0000000c alt_getchar
04012ee4 g     F .text	00000018 __fp_lock_all
04014bb2 g     O .rodata	00000044 MIPI_REGISTERS
04010604 g     F .text	00000150 OC_I2CL_Write
04010350 g     F .text	00000038 ACK_judge_for_read
040152d8 g     O .rwdata	00000028 alt_dev_null
0401005c g     F .text	00000018 Write32_Data
04010dfc g     F .text	00000038 mipi_camera_reg_write
040119c0 g     F .text	00000004 alt_dcache_flush_all
04015b5c g       *ABS*	00000000 __ram_rwdata_end
04015b34 g     O .rwdata	00000008 alt_dev_list
04011658 g     F .text	00000110 write
04012208 g     F .text	000000a0 _putc_r
0401512c g       *ABS*	00000000 __ram_rodata_end
0401467c g     F .text	000000c8 fstat
04011324 g     F .text	00000058 .hidden __umodsi3
040165d0 g       *ABS*	00000000 end
040110a0 g     F .text	00000038 readUInt16
0401a000 g       *ABS*	00000000 __alt_stack_pointer
04011844 g     F .text	00000034 altera_avalon_jtag_uart_write
04012ed4 g     F .text	00000004 __sfp_lock_acquire
04013038 g     F .text	00000310 _free_r
040114cc g     F .text	0000017c alt_printf
04012370 g     F .text	00000074 __srget_r
0401273c g     F .text	00000180 __call_exitprocs
04015b50 g     O .rwdata	00000004 __malloc_sbrk_base
04010020 g     F .text	0000003c _start
040148b4 g     F .text	00000114 read
04011788 g     F .text	00000010 alt_sys_init
0401137c g     F .text	00000028 .hidden __mulsi3
0401512c g       *ABS*	00000000 __ram_rwdata_start
04014a14 g       *ABS*	00000000 __ram_rodata_start
040165a8 g     O .bss	00000028 __malloc_current_mallinfo
04011798 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
04011e8c g     F .text	00000088 alt_get_fd
04011878 g     F .text	00000088 alt_busy_sleep
040143a0 g     F .text	00000054 _close_r
04012044 g     F .text	0000007c memcmp
040165d0 g       *ABS*	00000000 __alt_stack_base
040125e8 g     F .text	00000154 __swsetup_r
04010138 g     F .text	00000014 oc_i2c_init
04012d94 g     F .text	00000118 __sfp
04010d2c g     F .text	00000098 mipi_bridge_init
04015724 g     O .rwdata	00000408 __malloc_av_
04012ee0 g     F .text	00000004 __sinit_lock_release
04014204 g     F .text	00000054 __sread
04011de0 g     F .text	000000ac alt_find_file
04014bf6 g     O .rodata	00000514 CAMERA_REGISTERS
040119cc g     F .text	0000006c alt_dev_llist_insert
040148ac g     F .text	00000004 __malloc_lock
040149c8 g     F .text	0000004c sbrk
04012ad8 g     F .text	0000005c _fflush_r
0401658c g       *ABS*	00000000 __bss_start
04013e98 g     F .text	00000128 memset
04010a44 g     F .text	00000274 main
0401658c g     O .bss	00000004 alt_envp
0401659c g     O .bss	00000004 __malloc_max_total_mem
040117a8 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
040125d0 g     F .text	00000018 __swbuf
04014338 g     F .text	00000008 __sclose
0401a000 g       *ABS*	00000000 __alt_heap_limit
040144e4 g     F .text	00000014 fclose
0401368c g     F .text	0000080c _malloc_r
04015b44 g     O .rwdata	00000004 alt_errno
04010e34 g     F .text	00000128 mipi_camera_binning
04010ff4 g     F .text	00000034 mipi_camera_reg_read_VCM149C
04013348 g     F .text	000000c4 _fwalk
040122a8 g     F .text	000000c8 putc
040111c8 g     F .text	00000084 .hidden __divsi3
0401014c g     F .text	00000040 oc_i2c_uninit
04012f14 g     F .text	00000124 _malloc_trim_r
04014a14 g       *ABS*	00000000 __flash_rodata_start
04011768 g     F .text	00000020 alt_irq_init
04011d04 g     F .text	0000005c alt_release_fd
040110d8 g     F .text	00000014 bytesToUInt16
04014340 g     F .text	00000060 _write_r
04015b4c g     O .rwdata	00000004 _impure_ptr
04016594 g     O .bss	00000004 alt_argc
040128bc g     F .text	0000021c __sflush_r
04013fdc g     F .text	000001d4 __srefill_r
04012efc g     F .text	00000018 __fp_unlock_all
04015b3c g     O .rwdata	00000008 alt_fs_list
04010074 g     F .text	0000001c Read32_Data
04010388 g     F .text	00000174 OC_I2C_Read
04010020 g       *ABS*	00000000 __ram_exceptions_start
0401113c g     F .text	00000048 writeBytes
04015b5c g       *ABS*	00000000 _edata
040165d0 g       *ABS*	00000000 _end
04010020 g       *ABS*	00000000 __ram_exceptions_end
040111c0 g     F .text	00000008 writeByte
04014260 g     F .text	0000007c __swrite
04015b54 g     O .rwdata	00000004 __malloc_trim_threshold
040104fc g     F .text	00000108 OC_I2C_Read_Continue
04011f14 g     F .text	00000038 exit
0401340c g     F .text	000000c4 _fwalk_reent
0401124c g     F .text	00000074 .hidden __modsi3
0401a000 g       *ABS*	00000000 __alt_data_end
04012ed8 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
04010754 g     F .text	000001a8 OC_I2CL_Read
04011184 g     F .text	00000024 writeUInt16
04014668 g     F .text	00000014 _exit
040134d0 g     F .text	000001bc __smakebuf_r
04010dc4 g     F .text	00000038 mipi_camera_reg_read
040123f8 g     F .text	00000098 strlen
04011b7c g     F .text	00000188 open
04011648 g     F .text	0000000c alt_putchar
04011a38 g     F .text	00000004 alt_icache_flush_all
040111a8 g     F .text	00000018 readByte
04010000 g       *ABS*	00000000 __alt_mem_memory_system
04011900 g     F .text	000000c0 close
04010910 g     F .text	000000ec config
040113b0 g     F .text	000000cc alt_load
040108fc g     F .text	00000014 ReverseUInt16
04012edc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

04010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4010000:	00410074 	movhi	at,1025
    ori r1, r1, %lo(_start)
 4010004:	08400814 	ori	at,at,32
    jmp r1
 4010008:	0800683a 	jmp	at
	...

Disassembly of section .text:

04010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4010020:	06c10074 	movhi	sp,1025
    ori sp, sp, %lo(__alt_stack_pointer)
 4010024:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
 4010028:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 401002c:	d6b6cb14 	ori	gp,gp,56108
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4010030:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4010034:	10996314 	ori	r2,r2,25996

    movhi r3, %hi(__bss_end)
 4010038:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 401003c:	18d97414 	ori	r3,r3,26064

    beq r2, r3, 1f
 4010040:	10c00326 	beq	r2,r3,4010050 <_start+0x30>

0:
    stw zero, (r2)
 4010044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4010048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 401004c:	10fffd36 	bltu	r2,r3,4010044 <_gp+0xffff2518>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4010050:	40113b00 	call	40113b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4010054:	401147c0 	call	401147c <alt_main>

04010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4010058:	003fff06 	br	4010058 <_gp+0xffff252c>

0401005c <Write32_Data>:
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 401005c:	294b883a 	add	r5,r5,r5
 4010060:	294b883a 	add	r5,r5,r5
 4010064:	2909883a 	add	r4,r5,r4
 4010068:	21800035 	stwio	r6,0(r4)
    bPass=TRUE;
    return bPass;
}
 401006c:	00800044 	movi	r2,1
 4010070:	f800283a 	ret

04010074 <Read32_Data>:

bool Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
 4010074:	294b883a 	add	r5,r5,r5
 4010078:	294b883a 	add	r5,r5,r5
 401007c:	2909883a 	add	r4,r5,r4
 4010080:	20800037 	ldwio	r2,0(r4)
 4010084:	30800015 	stw	r2,0(r6)
	bPass=TRUE;
    return bPass;
}
 4010088:	00800044 	movi	r2,1
 401008c:	f800283a 	ret

04010090 <oc_i2c_init_ex>:
	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
	return bSuccess;
}

bool oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
 4010090:	defffd04 	addi	sp,sp,-12
 4010094:	dc400115 	stw	r17,4(sp)
 4010098:	dc000015 	stw	r16,0(sp)
 401009c:	2823883a 	mov	r17,r5
 40100a0:	2021883a 	mov	r16,r4
	const alt_u8 ControlValue = 0x80;

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
 40100a4:	01400144 	movi	r5,5
 40100a8:	3009883a 	mov	r4,r6
	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
	return bSuccess;
}

bool oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
 40100ac:	dfc00215 	stw	ra,8(sp)
	const alt_u8 ControlValue = 0x80;

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
 40100b0:	401137c0 	call	401137c <__mulsi3>
 40100b4:	100b883a 	mov	r5,r2
 40100b8:	8809883a 	mov	r4,r17
 40100bc:	40111c80 	call	40111c8 <__divsi3>
 40100c0:	10bfffc4 	addi	r2,r2,-1
 40100c4:	11c03fcc 	andi	r7,r2,255
	prescale_low = prescale & 0xFF;
	prescale_high = (prescale >> 8) & 0xFF;

   IOWR(i2c_base, 0, prescale_low);//write low byte of  prescale (reg 0)
 40100c8:	81c00035 	stwio	r7,0(r16)
 40100cc:	1005d23a 	srai	r2,r2,8
   IOWR(i2c_base, 1, prescale_high);//write high byte of prescale (reg 1)
 40100d0:	81800104 	addi	r6,r16,4
 40100d4:	10803fcc 	andi	r2,r2,255
 40100d8:	30800035 	stwio	r2,0(r6)

   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2, ControlValue);
 40100dc:	81400204 	addi	r5,r16,8
 40100e0:	01002004 	movi	r4,128
 40100e4:	29000035 	stwio	r4,0(r5)

    // check prescale low byte
    if (bSuccess){
    	read_data =IORD(i2c_base, 0);
 40100e8:	80c00037 	ldwio	r3,0(r16)
        if( (read_data & 0x00ff) != prescale_low ){
 40100ec:	18c03fcc 	andi	r3,r3,255
 40100f0:	38c0031e 	bne	r7,r3,4010100 <oc_i2c_init_ex+0x70>
        }
    }

    // check prescale high byte
    if (bSuccess){
    	read_data =IORD(i2c_base, 1);
 40100f4:	30c00037 	ldwio	r3,0(r6)
        if( (read_data & 0x00ff) != prescale_high ){
 40100f8:	18c03fcc 	andi	r3,r3,255
 40100fc:	10c00526 	beq	r2,r3,4010114 <oc_i2c_init_ex+0x84>
            bSuccess = FALSE;
        }
    }

   if (!bSuccess)
	alt_printf("oc_i2c_init_ex fail\n");
 4010100:	01010074 	movhi	r4,1025
 4010104:	21128504 	addi	r4,r4,18964
 4010108:	40114cc0 	call	40114cc <alt_printf>
 401010c:	0005883a 	mov	r2,zero
 4010110:	00000406 	br	4010124 <oc_i2c_init_ex+0x94>
        }
    }

    // check control
    if (bSuccess){
    	read_data =IORD(i2c_base, 2);
 4010114:	28800037 	ldwio	r2,0(r5)
        if( (read_data & 0x00ff) != ControlValue ){
 4010118:	10803fcc 	andi	r2,r2,255
 401011c:	113ff81e 	bne	r2,r4,4010100 <_gp+0xffff25d4>
 4010120:	00800044 	movi	r2,1

   if (!bSuccess)
	alt_printf("oc_i2c_init_ex fail\n");

   return bSuccess;
}
 4010124:	dfc00217 	ldw	ra,8(sp)
 4010128:	dc400117 	ldw	r17,4(sp)
 401012c:	dc000017 	ldw	r16,0(sp)
 4010130:	dec00304 	addi	sp,sp,12
 4010134:	f800283a 	ret

04010138 <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base){
	bool bSuccess;
	const alt_32 ref_clk = 50*1000*1000; // 50MHz
	const alt_32 i2c_clk = 400*1000; // 400KHz
	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
 4010138:	018001b4 	movhi	r6,6
 401013c:	0140bef4 	movhi	r5,763
 4010140:	3186a004 	addi	r6,r6,6784
 4010144:	297c2004 	addi	r5,r5,-3968
 4010148:	40100901 	jmpi	4010090 <oc_i2c_init_ex>

0401014c <oc_i2c_uninit>:
{
	bool bSuccess=TRUE;
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;

    IOWR( i2c_base, 2, ControlValue);
 401014c:	21000204 	addi	r4,r4,8
 4010150:	20000035 	stwio	zero,0(r4)
   	read_data =IORD(i2c_base, 2);
 4010154:	20800037 	ldwio	r2,0(r4)
	if( (read_data & 0x00ff) != ControlValue ){
 4010158:	10803fcc 	andi	r2,r2,255
 401015c:	1000021e 	bne	r2,zero,4010168 <oc_i2c_uninit+0x1c>
   return bSuccess;
}

bool oc_i2c_uninit(alt_32 i2c_base)
{
	bool bSuccess=TRUE;
 4010160:	00800044 	movi	r2,1

   if (!bSuccess)
	   alt_printf("oc_i2c_uninit fail\n");

   return bSuccess;
}
 4010164:	f800283a 	ret
	if( (read_data & 0x00ff) != ControlValue ){
            bSuccess = FALSE;
    }

   if (!bSuccess)
	   alt_printf("oc_i2c_uninit fail\n");
 4010168:	01010074 	movhi	r4,1025

   return bSuccess;
}

bool oc_i2c_uninit(alt_32 i2c_base)
{
 401016c:	deffff04 	addi	sp,sp,-4
	if( (read_data & 0x00ff) != ControlValue ){
            bSuccess = FALSE;
    }

   if (!bSuccess)
	   alt_printf("oc_i2c_uninit fail\n");
 4010170:	21128b04 	addi	r4,r4,18988

   return bSuccess;
}

bool oc_i2c_uninit(alt_32 i2c_base)
{
 4010174:	dfc00015 	stw	ra,0(sp)
	if( (read_data & 0x00ff) != ControlValue ){
            bSuccess = FALSE;
    }

   if (!bSuccess)
	   alt_printf("oc_i2c_uninit fail\n");
 4010178:	40114cc0 	call	40114cc <alt_printf>
	const alt_u8 ControlValue = 0x00;

    IOWR( i2c_base, 2, ControlValue);
   	read_data =IORD(i2c_base, 2);
	if( (read_data & 0x00ff) != ControlValue ){
            bSuccess = FALSE;
 401017c:	0005883a 	mov	r2,zero

   if (!bSuccess)
	   alt_printf("oc_i2c_uninit fail\n");

   return bSuccess;
}
 4010180:	dfc00017 	ldw	ra,0(sp)
 4010184:	dec00104 	addi	sp,sp,4
 4010188:	f800283a 	ret

0401018c <ACK_single_check>:

bool ACK_single_check(alt_32 i2c_base)
{
 401018c:	defffe04 	addi	sp,sp,-8
 4010190:	dc000015 	stw	r16,0(sp)
 4010194:	2021883a 	mov	r16,r4
	bool bSuccess=TRUE;
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
 4010198:	01003e84 	movi	r4,250

   return bSuccess;
}

bool ACK_single_check(alt_32 i2c_base)
{
 401019c:	dfc00115 	stw	ra,4(sp)
	bool bSuccess=TRUE;
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
    read_data =IORD(i2c_base, 4);
 40101a0:	84000404 	addi	r16,r16,16
bool ACK_single_check(alt_32 i2c_base)
{
	bool bSuccess=TRUE;
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
 40101a4:	40116540 	call	4011654 <usleep>
    read_data =IORD(i2c_base, 4);
 40101a8:	80800037 	ldwio	r2,0(r16)
    if(read_data & 0x02)
 40101ac:	1080008c 	andi	r2,r2,2
 40101b0:	10000226 	beq	r2,zero,40101bc <ACK_single_check+0x30>
 40101b4:	0005883a 	mov	r2,zero
 40101b8:	00000606 	br	40101d4 <ACK_single_check+0x48>
            bSuccess = FALSE;
     if (bSuccess){
            usleep(ACK_SLEEP_TIME);
 40101bc:	01003e84 	movi	r4,250
 40101c0:	40116540 	call	4011654 <usleep>
            read_data =IORD(i2c_base, 4);
 40101c4:	80800037 	ldwio	r2,0(r16)
                if(read_data & 0x80)
 40101c8:	1004d1fa 	srli	r2,r2,7
 40101cc:	1080005c 	xori	r2,r2,1
 40101d0:	1080004c 	andi	r2,r2,1
                    bSuccess = FALSE;
     }
    return bSuccess;
}
 40101d4:	dfc00117 	ldw	ra,4(sp)
 40101d8:	dc000017 	ldw	r16,0(sp)
 40101dc:	dec00204 	addi	sp,sp,8
 40101e0:	f800283a 	ret

040101e4 <ACK_check>:

bool ACK_check(alt_32 i2c_base){
 40101e4:	defffd04 	addi	sp,sp,-12
 40101e8:	dc400115 	stw	r17,4(sp)
 40101ec:	dc000015 	stw	r16,0(sp)
 40101f0:	dfc00215 	stw	ra,8(sp)
 40101f4:	2023883a 	mov	r17,r4
 40101f8:	040002c4 	movi	r16,11
 40101fc:	843fffc4 	addi	r16,r16,-1
    bool bSuccess = FALSE;
    int i=0;
    while(!bSuccess && i++ < 10){
 4010200:	80000526 	beq	r16,zero,4010218 <ACK_check+0x34>
        bSuccess = ACK_single_check(i2c_base);
 4010204:	8809883a 	mov	r4,r17
 4010208:	401018c0 	call	401018c <ACK_single_check>
}

bool ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;
    while(!bSuccess && i++ < 10){
 401020c:	10c03fcc 	andi	r3,r2,255
 4010210:	183ffa26 	beq	r3,zero,40101fc <_gp+0xffff26d0>
 4010214:	00000106 	br	401021c <ACK_check+0x38>
 4010218:	0005883a 	mov	r2,zero
        bSuccess = ACK_single_check(i2c_base);
    }
    return bSuccess;
}
 401021c:	dfc00217 	ldw	ra,8(sp)
 4010220:	dc400117 	ldw	r17,4(sp)
 4010224:	dc000017 	ldw	r16,0(sp)
 4010228:	dec00304 	addi	sp,sp,12
 401022c:	f800283a 	ret

04010230 <OC_I2C_Write>:

bool OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
 4010230:	defff704 	addi	sp,sp,-36
 4010234:	dd800615 	stw	r22,24(sp)
 4010238:	dd400515 	stw	r21,20(sp)
 401023c:	dcc00315 	stw	r19,12(sp)
 4010240:	dc000015 	stw	r16,0(sp)
 4010244:	dfc00815 	stw	ra,32(sp)
 4010248:	ddc00715 	stw	r23,28(sp)
 401024c:	dd000415 	stw	r20,16(sp)
 4010250:	dc800215 	stw	r18,8(sp)
 4010254:	dc400115 	stw	r17,4(sp)
 4010258:	2027883a 	mov	r19,r4
 401025c:	3021883a 	mov	r16,r6
 4010260:	382d883a 	mov	r22,r7
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 4010264:	25400304 	addi	r21,r4,12
 4010268:	29403fcc 	andi	r5,r5,255
 401026c:	a9400035 	stwio	r5,0(r21)
 4010270:	24800404 	addi	r18,r4,16
 4010274:	00802404 	movi	r2,144
 4010278:	90800035 	stwio	r2,0(r18)
       alt_printf("OC_I2C_Write err[1]\n");
       return FALSE;
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 401027c:	40101e40 	call	40101e4 <ACK_check>
 4010280:	1023883a 	mov	r17,r2
 4010284:	10803fcc 	andi	r2,r2,255
 4010288:	1000031e 	bne	r2,zero,4010298 <OC_I2C_Write+0x68>
        alt_printf("OC_I2C_Write err[2]\n");
 401028c:	01010074 	movhi	r4,1025
 4010290:	21129004 	addi	r4,r4,19008
 4010294:	00000b06 	br	40102c4 <OC_I2C_Write+0x94>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 4010298:	84003fcc 	andi	r16,r16,255
 401029c:	ac000035 	stwio	r16,0(r21)
 40102a0:	05000404 	movi	r20,16
 40102a4:	95000035 	stwio	r20,0(r18)
        alt_printf("OC_I2C_Write err[4]\n");
        return FALSE;
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 40102a8:	9809883a 	mov	r4,r19
 40102ac:	40101e40 	call	40101e4 <ACK_check>
 40102b0:	1023883a 	mov	r17,r2
 40102b4:	10803fcc 	andi	r2,r2,255
 40102b8:	1000041e 	bne	r2,zero,40102cc <OC_I2C_Write+0x9c>
        alt_printf("OC_I2C_Write err[5]\n");
 40102bc:	01010074 	movhi	r4,1025
 40102c0:	21129604 	addi	r4,r4,19032
 40102c4:	40114cc0 	call	40114cc <alt_printf>
        return FALSE;
 40102c8:	00001506 	br	4010320 <OC_I2C_Write+0xf0>
    }
 //  alt_printf("\n receive ACK-reg address! \n");

#if 1
        for( i=nWriteLength-1;i>=0;i--){
 40102cc:	dc000917 	ldw	r16,36(sp)
 40102d0:	843fffc4 	addi	r16,r16,-1
 40102d4:	80000e16 	blt	r16,zero,4010310 <OC_I2C_Write+0xe0>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
 40102d8:	b405883a 	add	r2,r22,r16
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 40102dc:	10800003 	ldbu	r2,0(r2)
 40102e0:	a8800035 	stwio	r2,0(r21)
 40102e4:	95000035 	stwio	r20,0(r18)
             alt_printf("OC_I2C_Write err[7]\n");
              return FALSE;
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
 40102e8:	9809883a 	mov	r4,r19
 40102ec:	40101e40 	call	40101e4 <ACK_check>
 40102f0:	102f883a 	mov	r23,r2
 40102f4:	10803fcc 	andi	r2,r2,255
 40102f8:	103ff51e 	bne	r2,zero,40102d0 <_gp+0xffff27a4>
              alt_printf("OC_I2C_Write err[8]\n");
 40102fc:	01010074 	movhi	r4,1025
 4010300:	21129c04 	addi	r4,r4,19056
 4010304:	40114cc0 	call	40114cc <alt_printf>
              return FALSE;
 4010308:	b823883a 	mov	r17,r23
 401030c:	00000406 	br	4010320 <OC_I2C_Write+0xf0>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 4010310:	00801004 	movi	r2,64
 4010314:	90800035 	stwio	r2,0(r18)
         alt_printf("OC_I2C_Write err[9]\n");
         return FALSE;
     }
     //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
 4010318:	01003e84 	movi	r4,250
 401031c:	40116540 	call	4011654 <usleep>
  // alt_printf("\n receive ACK-data! \n");
     return TRUE;
}
 4010320:	8805883a 	mov	r2,r17
 4010324:	dfc00817 	ldw	ra,32(sp)
 4010328:	ddc00717 	ldw	r23,28(sp)
 401032c:	dd800617 	ldw	r22,24(sp)
 4010330:	dd400517 	ldw	r21,20(sp)
 4010334:	dd000417 	ldw	r20,16(sp)
 4010338:	dcc00317 	ldw	r19,12(sp)
 401033c:	dc800217 	ldw	r18,8(sp)
 4010340:	dc400117 	ldw	r17,4(sp)
 4010344:	dc000017 	ldw	r16,0(sp)
 4010348:	dec00904 	addi	sp,sp,36
 401034c:	f800283a 	ret

04010350 <ACK_judge_for_read>:

bool ACK_judge_for_read(alt_32 i2c_base)
{
 4010350:	defffe04 	addi	sp,sp,-8
 4010354:	dc000015 	stw	r16,0(sp)
 4010358:	2021883a 	mov	r16,r4
	bool bSuccess;
    alt_32 this_data;
   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
 401035c:	01003e84 	movi	r4,250
  // alt_printf("\n receive ACK-data! \n");
     return TRUE;
}

bool ACK_judge_for_read(alt_32 i2c_base)
{
 4010360:	dfc00115 	stw	ra,4(sp)
	bool bSuccess;
    alt_32 this_data;
   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
 4010364:	40116540 	call	4011654 <usleep>
    return bPass;
}

bool Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
 4010368:	80800437 	ldwio	r2,16(r16)
    if (bSuccess){
        if(this_data & 0x02)
            bSuccess = FALSE;
    }
   //wait the rx ACK signal 0-valid
    return bSuccess;
 401036c:	1004d07a 	srli	r2,r2,1
 4010370:	1080005c 	xori	r2,r2,1
}
 4010374:	1080004c 	andi	r2,r2,1
 4010378:	dfc00117 	ldw	ra,4(sp)
 401037c:	dc000017 	ldw	r16,0(sp)
 4010380:	dec00204 	addi	sp,sp,8
 4010384:	f800283a 	ret

04010388 <OC_I2C_Read>:

bool OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
 4010388:	defff604 	addi	sp,sp,-40
 401038c:	dd800615 	stw	r22,24(sp)
 4010390:	dd800a17 	ldw	r22,40(sp)
 4010394:	df000815 	stw	fp,32(sp)
 4010398:	dd400515 	stw	r21,20(sp)
 401039c:	dd000415 	stw	r20,16(sp)
 40103a0:	dcc00315 	stw	r19,12(sp)
 40103a4:	dc400115 	stw	r17,4(sp)
 40103a8:	dfc00915 	stw	ra,36(sp)
 40103ac:	ddc00715 	stw	r23,28(sp)
 40103b0:	dc800215 	stw	r18,8(sp)
 40103b4:	dc000015 	stw	r16,0(sp)
 40103b8:	2029883a 	mov	r20,r4
 40103bc:	2823883a 	mov	r17,r5
 40103c0:	3039883a 	mov	fp,r6
 40103c4:	3827883a 	mov	r19,r7
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
 40103c8:	25400304 	addi	r21,r4,12
 40103cc:	28803fcc 	andi	r2,r5,255
 40103d0:	a8800035 	stwio	r2,0(r21)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
 40103d4:	24800404 	addi	r18,r4,16
 40103d8:	05c02404 	movi	r23,144
 40103dc:	95c00035 	stwio	r23,0(r18)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
 40103e0:	40101e40 	call	40101e4 <ACK_check>
 40103e4:	1021883a 	mov	r16,r2
 40103e8:	10803fcc 	andi	r2,r2,255
 40103ec:	1000031e 	bne	r2,zero,40103fc <OC_I2C_Read+0x74>
       alt_printf("OC_I2C_Read err[2]\n");
 40103f0:	01010074 	movhi	r4,1025
 40103f4:	2112a204 	addi	r4,r4,19080
 40103f8:	00000b06 	br	4010428 <OC_I2C_Read+0xa0>
       return FALSE;
   }
   IOWR(i2c_base, 3,sub_address);
 40103fc:	e7003fcc 	andi	fp,fp,255
 4010400:	af000035 	stwio	fp,0(r21)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
 4010404:	00800404 	movi	r2,16
 4010408:	90800035 	stwio	r2,0(r18)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 401040c:	a009883a 	mov	r4,r20
 4010410:	40101e40 	call	40101e4 <ACK_check>
 4010414:	1021883a 	mov	r16,r2
 4010418:	10803fcc 	andi	r2,r2,255
 401041c:	1000041e 	bne	r2,zero,4010430 <OC_I2C_Read+0xa8>
        alt_printf("OC_I2C_Read err[5]\n");
 4010420:	01010074 	movhi	r4,1025
 4010424:	2112a704 	addi	r4,r4,19100
 4010428:	40114cc0 	call	40114cc <alt_printf>
        return FALSE;
 401042c:	00002606 	br	40104c8 <OC_I2C_Read+0x140>
  // alt_printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1

    IOWR(i2c_base, 3,device_address|0x01);
 4010430:	8c400054 	ori	r17,r17,1
 4010434:	8c403fcc 	andi	r17,r17,255
 4010438:	ac400035 	stwio	r17,0(r21)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 401043c:	95c00035 	stwio	r23,0(r18)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 4010440:	a009883a 	mov	r4,r20
 4010444:	40101e40 	call	40101e4 <ACK_check>
 4010448:	1021883a 	mov	r16,r2
 401044c:	10803fcc 	andi	r2,r2,255
 4010450:	10000226 	beq	r2,zero,401045c <OC_I2C_Read+0xd4>
 4010454:	0023883a 	mov	r17,zero
 4010458:	00000606 	br	4010474 <OC_I2C_Read+0xec>
        alt_printf("OC_I2C_Read err[8]\n");
 401045c:	01010074 	movhi	r4,1025
 4010460:	2112ac04 	addi	r4,r4,19120
 4010464:	003ff006 	br	4010428 <_gp+0xffff28fc>
            alt_printf("OC_I2C_Read err[10]\n");
            return FALSE;
        }
   // alt_printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 4010468:	a8800037 	ldwio	r2,0(r21)
        *(pData8+i) =  Data32 & 0xff;
 401046c:	98800005 	stb	r2,0(r19)
 4010470:	9cc00044 	addi	r19,r19,1
    if (!ACK_check( i2c_base)){
        alt_printf("OC_I2C_Read err[8]\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 4010474:	8d80100e 	bge	r17,r22,40104b8 <OC_I2C_Read+0x130>
  // alt_printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 4010478:	8c400044 	addi	r17,r17,1
 401047c:	b4400226 	beq	r22,r17,4010488 <OC_I2C_Read+0x100>
 4010480:	00800804 	movi	r2,32
 4010484:	00000106 	br	401048c <OC_I2C_Read+0x104>
 4010488:	00800a04 	movi	r2,40
 401048c:	90800035 	stwio	r2,0(r18)

        if (!ACK_judge_for_read( i2c_base)){
 4010490:	a009883a 	mov	r4,r20
 4010494:	40103500 	call	4010350 <ACK_judge_for_read>
 4010498:	102f883a 	mov	r23,r2
 401049c:	10803fcc 	andi	r2,r2,255
 40104a0:	103ff11e 	bne	r2,zero,4010468 <_gp+0xffff293c>
            alt_printf("OC_I2C_Read err[10]\n");
 40104a4:	01010074 	movhi	r4,1025
 40104a8:	2112b104 	addi	r4,r4,19140
 40104ac:	40114cc0 	call	40114cc <alt_printf>
            return FALSE;
 40104b0:	b821883a 	mov	r16,r23
 40104b4:	00000406 	br	40104c8 <OC_I2C_Read+0x140>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 40104b8:	00801004 	movi	r2,64
 40104bc:	90800035 	stwio	r2,0(r18)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 40104c0:	01003e84 	movi	r4,250
 40104c4:	40116540 	call	4011654 <usleep>
 //  alt_printf(" Read  [%02X] = %02Xh\n", sub_address, data);


   return TRUE;

}
 40104c8:	8005883a 	mov	r2,r16
 40104cc:	dfc00917 	ldw	ra,36(sp)
 40104d0:	df000817 	ldw	fp,32(sp)
 40104d4:	ddc00717 	ldw	r23,28(sp)
 40104d8:	dd800617 	ldw	r22,24(sp)
 40104dc:	dd400517 	ldw	r21,20(sp)
 40104e0:	dd000417 	ldw	r20,16(sp)
 40104e4:	dcc00317 	ldw	r19,12(sp)
 40104e8:	dc800217 	ldw	r18,8(sp)
 40104ec:	dc400117 	ldw	r17,4(sp)
 40104f0:	dc000017 	ldw	r16,0(sp)
 40104f4:	dec00a04 	addi	sp,sp,40
 40104f8:	f800283a 	ret

040104fc <OC_I2C_Read_Continue>:


bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
 40104fc:	defff704 	addi	sp,sp,-36
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
 4010500:	29400054 	ori	r5,r5,1
   return TRUE;

}


bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
 4010504:	dd800615 	stw	r22,24(sp)
 4010508:	dd400515 	stw	r21,20(sp)
 401050c:	dd000415 	stw	r20,16(sp)
 4010510:	dc000015 	stw	r16,0(sp)
 4010514:	dfc00815 	stw	ra,32(sp)
 4010518:	ddc00715 	stw	r23,28(sp)
 401051c:	dcc00315 	stw	r19,12(sp)
 4010520:	dc800215 	stw	r18,8(sp)
 4010524:	dc400115 	stw	r17,4(sp)
 4010528:	2029883a 	mov	r20,r4
 401052c:	3021883a 	mov	r16,r6
 4010530:	382d883a 	mov	r22,r7
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
 4010534:	25400304 	addi	r21,r4,12
 4010538:	29403fcc 	andi	r5,r5,255
 401053c:	a9400035 	stwio	r5,0(r21)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 4010540:	24c00404 	addi	r19,r4,16
 4010544:	00802404 	movi	r2,144
 4010548:	98800035 	stwio	r2,0(r19)
//usleep(5*1000);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 401054c:	40101e40 	call	40101e4 <ACK_check>
 4010550:	1025883a 	mov	r18,r2
 4010554:	10803fcc 	andi	r2,r2,255
 4010558:	10000226 	beq	r2,zero,4010564 <OC_I2C_Read_Continue+0x68>
 401055c:	0023883a 	mov	r17,zero
 4010560:	00000706 	br	4010580 <OC_I2C_Read_Continue+0x84>
        alt_printf("OC_I2C_Read err[8]\n");
 4010564:	01010074 	movhi	r4,1025
 4010568:	2112ac04 	addi	r4,r4,19120
 401056c:	40114cc0 	call	40114cc <alt_printf>
        return FALSE;
 4010570:	00001806 	br	40105d4 <OC_I2C_Read_Continue+0xd8>
            alt_printf("OC_I2C_Read err[10]\n");
            return FALSE;
        }
   // alt_printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 4010574:	a8800037 	ldwio	r2,0(r21)
        *(pData8+i) =  Data32 & 0xff;
 4010578:	80800005 	stb	r2,0(r16)
 401057c:	84000044 	addi	r16,r16,1
    if (!ACK_check( i2c_base)){
        alt_printf("OC_I2C_Read err[8]\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 4010580:	8d80100e 	bge	r17,r22,40105c4 <OC_I2C_Read_Continue+0xc8>
  // alt_printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 4010584:	8c400044 	addi	r17,r17,1
 4010588:	b4400226 	beq	r22,r17,4010594 <OC_I2C_Read_Continue+0x98>
 401058c:	00800804 	movi	r2,32
 4010590:	00000106 	br	4010598 <OC_I2C_Read_Continue+0x9c>
 4010594:	00800a04 	movi	r2,40
 4010598:	98800035 	stwio	r2,0(r19)

        if (!ACK_judge_for_read( i2c_base)){
 401059c:	a009883a 	mov	r4,r20
 40105a0:	40103500 	call	4010350 <ACK_judge_for_read>
 40105a4:	102f883a 	mov	r23,r2
 40105a8:	10803fcc 	andi	r2,r2,255
 40105ac:	103ff11e 	bne	r2,zero,4010574 <_gp+0xffff2a48>
            alt_printf("OC_I2C_Read err[10]\n");
 40105b0:	01010074 	movhi	r4,1025
 40105b4:	2112b104 	addi	r4,r4,19140
 40105b8:	40114cc0 	call	40114cc <alt_printf>
            return FALSE;
 40105bc:	b825883a 	mov	r18,r23
 40105c0:	00000406 	br	40105d4 <OC_I2C_Read_Continue+0xd8>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 40105c4:	00801004 	movi	r2,64
 40105c8:	98800035 	stwio	r2,0(r19)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 40105cc:	01003e84 	movi	r4,250
 40105d0:	40116540 	call	4011654 <usleep>
 //  alt_printf(" Read  [%02X] = %02Xh\n", sub_address, data);


   return TRUE;

}
 40105d4:	9005883a 	mov	r2,r18
 40105d8:	dfc00817 	ldw	ra,32(sp)
 40105dc:	ddc00717 	ldw	r23,28(sp)
 40105e0:	dd800617 	ldw	r22,24(sp)
 40105e4:	dd400517 	ldw	r21,20(sp)
 40105e8:	dd000417 	ldw	r20,16(sp)
 40105ec:	dcc00317 	ldw	r19,12(sp)
 40105f0:	dc800217 	ldw	r18,8(sp)
 40105f4:	dc400117 	ldw	r17,4(sp)
 40105f8:	dc000017 	ldw	r16,0(sp)
 40105fc:	dec00904 	addi	sp,sp,36
 4010600:	f800283a 	ret

04010604 <OC_I2CL_Write>:


//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,alt_u16 sub_address,alt_u8 *pData, int nWriteLength)
    {
 4010604:	defff704 	addi	sp,sp,-36
 4010608:	dd800615 	stw	r22,24(sp)
 401060c:	dd400515 	stw	r21,20(sp)
 4010610:	dcc00315 	stw	r19,12(sp)
 4010614:	dc400115 	stw	r17,4(sp)
 4010618:	dfc00815 	stw	ra,32(sp)
 401061c:	ddc00715 	stw	r23,28(sp)
 4010620:	dd000415 	stw	r20,16(sp)
 4010624:	dc800215 	stw	r18,8(sp)
 4010628:	dc000015 	stw	r16,0(sp)
 401062c:	2027883a 	mov	r19,r4
 4010630:	3023883a 	mov	r17,r6
 4010634:	382d883a 	mov	r22,r7
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 4010638:	25400304 	addi	r21,r4,12
 401063c:	29403fcc 	andi	r5,r5,255
 4010640:	a9400035 	stwio	r5,0(r21)
 4010644:	24800404 	addi	r18,r4,16
 4010648:	00802404 	movi	r2,144
 401064c:	90800035 	stwio	r2,0(r18)
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
       return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4010650:	40101e40 	call	40101e4 <ACK_check>
 4010654:	1021883a 	mov	r16,r2
 4010658:	10803fcc 	andi	r2,r2,255
 401065c:	1000031e 	bne	r2,zero,401066c <OC_I2CL_Write+0x68>
        alt_printf("OC_I2CL_Write err[0]\n");
 4010660:	01010074 	movhi	r4,1025
 4010664:	2112b704 	addi	r4,r4,19164
 4010668:	00001706 	br	40106c8 <OC_I2CL_Write+0xc4>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 401066c:	88bfffcc 	andi	r2,r17,65535
 4010670:	1004d23a 	srli	r2,r2,8
 4010674:	a8800035 	stwio	r2,0(r21)
 4010678:	05000404 	movi	r20,16
 401067c:	95000035 	stwio	r20,0(r18)
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
        return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4010680:	9809883a 	mov	r4,r19
 4010684:	40101e40 	call	40101e4 <ACK_check>
 4010688:	1021883a 	mov	r16,r2
 401068c:	10803fcc 	andi	r2,r2,255
 4010690:	1000031e 	bne	r2,zero,40106a0 <OC_I2CL_Write+0x9c>
        alt_printf("OC_I2CL_Write err[1]\n");
 4010694:	01010074 	movhi	r4,1025
 4010698:	2112bd04 	addi	r4,r4,19188
 401069c:	00000a06 	br	40106c8 <OC_I2CL_Write+0xc4>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 40106a0:	8c403fcc 	andi	r17,r17,255
 40106a4:	ac400035 	stwio	r17,0(r21)
 40106a8:	95000035 	stwio	r20,0(r18)

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 40106ac:	9809883a 	mov	r4,r19
 40106b0:	40101e40 	call	40101e4 <ACK_check>
 40106b4:	1021883a 	mov	r16,r2
 40106b8:	10803fcc 	andi	r2,r2,255
 40106bc:	1000041e 	bne	r2,zero,40106d0 <OC_I2CL_Write+0xcc>
        alt_printf("OC_I2CL_Write err[2]\n");
 40106c0:	01010074 	movhi	r4,1025
 40106c4:	2112c304 	addi	r4,r4,19212
 40106c8:	40114cc0 	call	40114cc <alt_printf>
        return FALSE;
 40106cc:	00001506 	br	4010724 <OC_I2CL_Write+0x120>
    }
  //  alt_printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=nWriteLength-1;i>=0;i--){
 40106d0:	dc400917 	ldw	r17,36(sp)
 40106d4:	8c7fffc4 	addi	r17,r17,-1
 40106d8:	88000e16 	blt	r17,zero,4010714 <OC_I2CL_Write+0x110>
        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
 40106dc:	b445883a 	add	r2,r22,r17
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 40106e0:	10800003 	ldbu	r2,0(r2)
 40106e4:	a8800035 	stwio	r2,0(r21)
 40106e8:	95000035 	stwio	r20,0(r18)
       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
            return FALSE;

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base)){
 40106ec:	9809883a 	mov	r4,r19
 40106f0:	40101e40 	call	40101e4 <ACK_check>
 40106f4:	102f883a 	mov	r23,r2
 40106f8:	10803fcc 	andi	r2,r2,255
 40106fc:	103ff51e 	bne	r2,zero,40106d4 <_gp+0xffff2ba8>
             alt_printf("OC_I2CL_Write err[3]\n");
 4010700:	01010074 	movhi	r4,1025
 4010704:	2112c904 	addi	r4,r4,19236
 4010708:	40114cc0 	call	40114cc <alt_printf>
             return FALSE;
 401070c:	b821883a 	mov	r16,r23
 4010710:	00000406 	br	4010724 <OC_I2CL_Write+0x120>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 4010714:	00801004 	movi	r2,64
 4010718:	90800035 	stwio	r2,0(r18)
#endif
    if (!Write32_Data( i2c_base, 4,0x40))
         return FALSE;

     //OS_msleep(1);
      usleep(SLEEP_TIME);
 401071c:	01003e84 	movi	r4,250
 4010720:	40116540 	call	4011654 <usleep>
  //  alt_printf("\n receive ACK-data! \n");

     return TRUE;
}
 4010724:	8005883a 	mov	r2,r16
 4010728:	dfc00817 	ldw	ra,32(sp)
 401072c:	ddc00717 	ldw	r23,28(sp)
 4010730:	dd800617 	ldw	r22,24(sp)
 4010734:	dd400517 	ldw	r21,20(sp)
 4010738:	dd000417 	ldw	r20,16(sp)
 401073c:	dcc00317 	ldw	r19,12(sp)
 4010740:	dc800217 	ldw	r18,8(sp)
 4010744:	dc400117 	ldw	r17,4(sp)
 4010748:	dc000017 	ldw	r16,0(sp)
 401074c:	dec00904 	addi	sp,sp,36
 4010750:	f800283a 	ret

04010754 <OC_I2CL_Read>:

   return TRUE;

} */

bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address, alt_u16 sub_address, alt_u8 *pData8, int nReadLength){
 4010754:	defff604 	addi	sp,sp,-40
 4010758:	df000815 	stw	fp,32(sp)
 401075c:	dd400515 	stw	r21,20(sp)
 4010760:	dd000415 	stw	r20,16(sp)
 4010764:	dcc00315 	stw	r19,12(sp)
 4010768:	dc800215 	stw	r18,8(sp)
 401076c:	dfc00915 	stw	ra,36(sp)
 4010770:	ddc00715 	stw	r23,28(sp)
 4010774:	dd800615 	stw	r22,24(sp)
 4010778:	dc400115 	stw	r17,4(sp)
 401077c:	dc000015 	stw	r16,0(sp)
 4010780:	2025883a 	mov	r18,r4
 4010784:	2827883a 	mov	r19,r5
 4010788:	3039883a 	mov	fp,r6
 401078c:	382b883a 	mov	r21,r7
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 4010790:	25000304 	addi	r20,r4,12
 4010794:	28803fcc 	andi	r2,r5,255
 4010798:	a0800035 	stwio	r2,0(r20)
 401079c:	24400404 	addi	r17,r4,16
 40107a0:	05c02404 	movi	r23,144
 40107a4:	8dc00035 	stwio	r23,0(r17)
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
       return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 40107a8:	40101e40 	call	40101e4 <ACK_check>
 40107ac:	1021883a 	mov	r16,r2
 40107b0:	10803fcc 	andi	r2,r2,255
 40107b4:	1000031e 	bne	r2,zero,40107c4 <OC_I2CL_Read+0x70>
        alt_printf("OC_I2CL_Read err[0]\n");
 40107b8:	01010074 	movhi	r4,1025
 40107bc:	2112cf04 	addi	r4,r4,19260
 40107c0:	00002506 	br	4010858 <OC_I2CL_Read+0x104>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 40107c4:	e0bfffcc 	andi	r2,fp,65535
 40107c8:	1004d23a 	srli	r2,r2,8
 40107cc:	a0800035 	stwio	r2,0(r20)
 40107d0:	05800404 	movi	r22,16
 40107d4:	8d800035 	stwio	r22,0(r17)
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
        return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 40107d8:	9009883a 	mov	r4,r18
 40107dc:	40101e40 	call	40101e4 <ACK_check>
 40107e0:	1021883a 	mov	r16,r2
 40107e4:	10803fcc 	andi	r2,r2,255
 40107e8:	1000031e 	bne	r2,zero,40107f8 <OC_I2CL_Read+0xa4>
        alt_printf("OC_I2CL_Read err[1]\n");
 40107ec:	01010074 	movhi	r4,1025
 40107f0:	2112d504 	addi	r4,r4,19284
 40107f4:	00001806 	br	4010858 <OC_I2CL_Read+0x104>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 40107f8:	e7003fcc 	andi	fp,fp,255
 40107fc:	a7000035 	stwio	fp,0(r20)
 4010800:	8d800035 	stwio	r22,0(r17)
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
        return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4010804:	9009883a 	mov	r4,r18
 4010808:	40101e40 	call	40101e4 <ACK_check>
 401080c:	1021883a 	mov	r16,r2
 4010810:	10803fcc 	andi	r2,r2,255
 4010814:	1000031e 	bne	r2,zero,4010824 <OC_I2CL_Read+0xd0>
        alt_printf("OC_I2CL_Read err[2]\n");
 4010818:	01010074 	movhi	r4,1025
 401081c:	2112db04 	addi	r4,r4,19308
 4010820:	00000d06 	br	4010858 <OC_I2CL_Read+0x104>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 4010824:	9cc00054 	ori	r19,r19,1
 4010828:	9cc03fcc 	andi	r19,r19,255
 401082c:	a4c00035 	stwio	r19,0(r20)
 4010830:	8dc00035 	stwio	r23,0(r17)
   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
         return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4010834:	9009883a 	mov	r4,r18
 4010838:	40101e40 	call	40101e4 <ACK_check>
 401083c:	1021883a 	mov	r16,r2
 4010840:	10803fcc 	andi	r2,r2,255
 4010844:	10000226 	beq	r2,zero,4010850 <OC_I2CL_Read+0xfc>
 4010848:	0027883a 	mov	r19,zero
 401084c:	00000706 	br	401086c <OC_I2CL_Read+0x118>
        alt_printf("OC_I2CL_Read err[3]\n");
 4010850:	01010074 	movhi	r4,1025
 4010854:	2112e104 	addi	r4,r4,19332
 4010858:	40114cc0 	call	40114cc <alt_printf>
        return FALSE;
 401085c:	00001a06 	br	40108c8 <OC_I2CL_Read+0x174>
            alt_printf("OC_I2CL_Read err[4]\n");
            return FALSE;
        }
   // alt_printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 4010860:	a0800037 	ldwio	r2,0(r20)
        *(pData8+i) =  Data32 & 0xff;
 4010864:	a8800005 	stb	r2,0(r21)
 4010868:	ad400044 	addi	r21,r21,1
//   alt_printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
 401086c:	d8800a17 	ldw	r2,40(sp)
 4010870:	9880110e 	bge	r19,r2,40108b8 <OC_I2CL_Read+0x164>
  // alt_printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 4010874:	d8800a17 	ldw	r2,40(sp)
 4010878:	9cc00044 	addi	r19,r19,1
 401087c:	14c00226 	beq	r2,r19,4010888 <OC_I2CL_Read+0x134>
 4010880:	00800804 	movi	r2,32
 4010884:	00000106 	br	401088c <OC_I2CL_Read+0x138>
 4010888:	00800a04 	movi	r2,40
 401088c:	88800035 	stwio	r2,0(r17)

        if (!ACK_judge_for_read( i2c_base)){
 4010890:	9009883a 	mov	r4,r18
 4010894:	40103500 	call	4010350 <ACK_judge_for_read>
 4010898:	102f883a 	mov	r23,r2
 401089c:	10803fcc 	andi	r2,r2,255
 40108a0:	103fef1e 	bne	r2,zero,4010860 <_gp+0xffff2d34>
            alt_printf("OC_I2CL_Read err[4]\n");
 40108a4:	01010074 	movhi	r4,1025
 40108a8:	2112e704 	addi	r4,r4,19356
 40108ac:	40114cc0 	call	40114cc <alt_printf>
            return FALSE;
 40108b0:	b821883a 	mov	r16,r23
 40108b4:	00000406 	br	40108c8 <OC_I2CL_Read+0x174>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 40108b8:	00801004 	movi	r2,64
 40108bc:	88800035 	stwio	r2,0(r17)
#endif
   if (!Write32_Data( i2c_base, 4,0x40))
       return FALSE;

   //OS_msleep(1);
   usleep(SLEEP_TIME);
 40108c0:	01003e84 	movi	r4,250
 40108c4:	40116540 	call	4011654 <usleep>
   return TRUE;
}
 40108c8:	8005883a 	mov	r2,r16
 40108cc:	dfc00917 	ldw	ra,36(sp)
 40108d0:	df000817 	ldw	fp,32(sp)
 40108d4:	ddc00717 	ldw	r23,28(sp)
 40108d8:	dd800617 	ldw	r22,24(sp)
 40108dc:	dd400517 	ldw	r21,20(sp)
 40108e0:	dd000417 	ldw	r20,16(sp)
 40108e4:	dcc00317 	ldw	r19,12(sp)
 40108e8:	dc800217 	ldw	r18,8(sp)
 40108ec:	dc400117 	ldw	r17,4(sp)
 40108f0:	dc000017 	ldw	r16,0(sp)
 40108f4:	dec00a04 	addi	sp,sp,40
 40108f8:	f800283a 	ret

040108fc <ReverseUInt16>:
uint16_t ReverseUInt16(uint16_t x)
{
	uint16_t y;
	y = (x >> 8) & 0x00ff;
	y |= (x << 8) & 0xff00;
	return y;
 40108fc:	2004923a 	slli	r2,r4,8
 4010900:	213fffcc 	andi	r4,r4,65535
 4010904:	2008d23a 	srli	r4,r4,8
}
 4010908:	1104b03a 	or	r2,r2,r4
 401090c:	f800283a 	ret

04010910 <config>:
#define COM_JTAG		0
#define COM_FT232H		1

// Setup MIPI Bridge and Camera
bool config()
{
 4010910:	defffc04 	addi	sp,sp,-16
 4010914:	dc800215 	stw	r18,8(sp)
	//See OV8865 pag. 30/34 for power down sequence details
	// MIPI_PWDN_N = OV8865 PWDNB
	// MIPI_RESET_N = TC358748XBG RESX
	IOWR(MIPI_PWDN_N_BASE, 0x00, 0x00);
 4010918:	048100b4 	movhi	r18,1026
#define COM_JTAG		0
#define COM_FT232H		1

// Setup MIPI Bridge and Camera
bool config()
{
 401091c:	dfc00315 	stw	ra,12(sp)
 4010920:	dc400115 	stw	r17,4(sp)
 4010924:	dc000015 	stw	r16,0(sp)
	//See OV8865 pag. 30/34 for power down sequence details
	// MIPI_PWDN_N = OV8865 PWDNB
	// MIPI_RESET_N = TC358748XBG RESX
	IOWR(MIPI_PWDN_N_BASE, 0x00, 0x00);
 4010928:	94851804 	addi	r18,r18,5216
 401092c:	90000035 	stwio	zero,0(r18)
	IOWR(MIPI_RESET_N_BASE, 0x00, 0x00);
 4010930:	040100b4 	movhi	r16,1026
 4010934:	84051404 	addi	r16,r16,5200
 4010938:	80000035 	stwio	zero,0(r16)
	usleep(2 * 1000);
 401093c:	0101f404 	movi	r4,2000
 4010940:	40116540 	call	4011654 <usleep>
	IOWR(MIPI_PWDN_N_BASE, 0x00, 0xFF);
 4010944:	04403fc4 	movi	r17,255
 4010948:	94400035 	stwio	r17,0(r18)
	usleep(2 * 1000);
 401094c:	0101f404 	movi	r4,2000
 4010950:	40116540 	call	4011654 <usleep>
	IOWR(MIPI_RESET_N_BASE, 0x00, 0xFF);
 4010954:	84400035 	stwio	r17,0(r16)
	usleep(2000);
 4010958:	0101f404 	movi	r4,2000
 401095c:	40116540 	call	4011654 <usleep>
	if(!oc_i2c_init_ex(I2C_OPENCORES_MIPI_BASE, ALT_CPU_FREQ, I2C_SPEED))
 4010960:	018001b4 	movhi	r6,6
 4010964:	01417db4 	movhi	r5,1526
 4010968:	010100b4 	movhi	r4,1026
 401096c:	3186a004 	addi	r6,r6,6784
 4010970:	29784004 	addi	r5,r5,-7936
 4010974:	21050804 	addi	r4,r4,5152
 4010978:	40100900 	call	4010090 <oc_i2c_init_ex>
 401097c:	10803fcc 	andi	r2,r2,255
 4010980:	1000021e 	bne	r2,zero,401098c <config+0x7c>
		return false;
 4010984:	0021883a 	mov	r16,zero
 4010988:	00001506 	br	40109e0 <config+0xd0>
	if(!mipi_bridge_init())
 401098c:	4010d2c0 	call	4010d2c <mipi_bridge_init>
 4010990:	10803fcc 	andi	r2,r2,255
 4010994:	103ffb26 	beq	r2,zero,4010984 <_gp+0xffff2e58>
		return false;
	usleep(500*1000);
 4010998:	01000234 	movhi	r4,8
 401099c:	21284804 	addi	r4,r4,-24288
 40109a0:	40116540 	call	4011654 <usleep>
	if(!oc_i2c_init_ex(I2C_OPENCORES_CAMERA_BASE, ALT_CPU_FREQ, I2C_SPEED))
 40109a4:	018001b4 	movhi	r6,6
 40109a8:	01417db4 	movhi	r5,1526
 40109ac:	010100b4 	movhi	r4,1026
 40109b0:	3186a004 	addi	r6,r6,6784
 40109b4:	29784004 	addi	r5,r5,-7936
 40109b8:	21050004 	addi	r4,r4,5120
 40109bc:	40100900 	call	4010090 <oc_i2c_init_ex>
 40109c0:	10803fcc 	andi	r2,r2,255
 40109c4:	103fef26 	beq	r2,zero,4010984 <_gp+0xffff2e58>
		return false;
	if(!mipi_camera_init())
 40109c8:	4010f5c0 	call	4010f5c <mipi_camera_init>
 40109cc:	1021883a 	mov	r16,r2
 40109d0:	10803fcc 	andi	r2,r2,255
 40109d4:	103feb26 	beq	r2,zero,4010984 <_gp+0xffff2e58>
		return false;
	usleep(1000);
 40109d8:	0100fa04 	movi	r4,1000
 40109dc:	40116540 	call	4011654 <usleep>
	return true;
}
 40109e0:	8005883a 	mov	r2,r16
 40109e4:	dfc00317 	ldw	ra,12(sp)
 40109e8:	dc800217 	ldw	r18,8(sp)
 40109ec:	dc400117 	ldw	r17,4(sp)
 40109f0:	dc000017 	ldw	r16,0(sp)
 40109f4:	dec00404 	addi	sp,sp,16
 40109f8:	f800283a 	ret

040109fc <WaitFrame>:
// Wait until frame is captured
void WaitFrame()
{
	uint32_t status = IORD(MIPI_BASE, 0x00);
 40109fc:	00c100b4 	movhi	r3,1026
	usleep(1000);
	return true;
}
// Wait until frame is captured
void WaitFrame()
{
 4010a00:	defffe04 	addi	sp,sp,-8
	uint32_t status = IORD(MIPI_BASE, 0x00);
 4010a04:	18c40004 	addi	r3,r3,4096
	usleep(1000);
	return true;
}
// Wait until frame is captured
void WaitFrame()
{
 4010a08:	dfc00115 	stw	ra,4(sp)
 4010a0c:	dc000015 	stw	r16,0(sp)
	uint32_t status = IORD(MIPI_BASE, 0x00);
 4010a10:	18800037 	ldwio	r2,0(r3)
 4010a14:	1821883a 	mov	r16,r3
	while((status  & 0x02)== 0x00)
 4010a18:	1080008c 	andi	r2,r2,2
 4010a1c:	1000051e 	bne	r2,zero,4010a34 <WaitFrame+0x38>
	{
		usleep(1000 * 5);
 4010a20:	0104e204 	movi	r4,5000
 4010a24:	40116540 	call	4011654 <usleep>
		status = (IORD(MIPI_BASE, 0x00) & 0x02);
 4010a28:	80800037 	ldwio	r2,0(r16)
 4010a2c:	1080008c 	andi	r2,r2,2
 4010a30:	003ff906 	br	4010a18 <_gp+0xffff2eec>
	}
}
 4010a34:	dfc00117 	ldw	ra,4(sp)
 4010a38:	dc000017 	ldw	r16,0(sp)
 4010a3c:	dec00204 	addi	sp,sp,8
 4010a40:	f800283a 	ret

04010a44 <main>:
int main()
{
	usleep(1000 * 100);
 4010a44:	010000b4 	movhi	r4,2
		usleep(1000 * 5);
		status = (IORD(MIPI_BASE, 0x00) & 0x02);
	}
}
int main()
{
 4010a48:	defff104 	addi	sp,sp,-60
	usleep(1000 * 100);
 4010a4c:	2121a804 	addi	r4,r4,-31072
		usleep(1000 * 5);
		status = (IORD(MIPI_BASE, 0x00) & 0x02);
	}
}
int main()
{
 4010a50:	dfc00e15 	stw	ra,56(sp)
 4010a54:	dc400615 	stw	r17,24(sp)
 4010a58:	df000d15 	stw	fp,52(sp)
 4010a5c:	ddc00c15 	stw	r23,48(sp)
 4010a60:	dd800b15 	stw	r22,44(sp)
 4010a64:	dd400a15 	stw	r21,40(sp)
 4010a68:	dd000915 	stw	r20,36(sp)
 4010a6c:	dcc00815 	stw	r19,32(sp)
 4010a70:	dc800715 	stw	r18,28(sp)
 4010a74:	dc000515 	stw	r16,20(sp)
	usleep(1000 * 100);
 4010a78:	40116540 	call	4011654 <usleep>
	if(!config())
 4010a7c:	40109100 	call	4010910 <config>
 4010a80:	044100b4 	movhi	r17,1026
 4010a84:	10803fcc 	andi	r2,r2,255
 4010a88:	8c451004 	addi	r17,r17,5184
 4010a8c:	10007b26 	beq	r2,zero,4010c7c <main+0x238>
		IOWR(LED_BASE, 0x00, 0xFF);
		return 0;
	}

	// wait for one frame to adjust blc
	usleep(1000 * 500);
 4010a90:	01000234 	movhi	r4,8
 4010a94:	21284804 	addi	r4,r4,-24288
 4010a98:	40116540 	call	4011654 <usleep>

	IOWR(LED_BASE, 0x00, 0x01);
 4010a9c:	04000044 	movi	r16,1
 4010aa0:	8c000035 	stwio	r16,0(r17)
	uint8_t reg;
	byte cmd, com;
	com = COM_JTAG;
	while(1){
		cmd = readByte();
		switch(cmd)
 4010aa4:	05810074 	movhi	r22,1025
				img_height = readUInt16();
				writeByte(RESPONSE_OK);
				break;
			case CMD_RD_IMG:
				IOWR(LED_BASE, 0x00, 0x00);
				IOWR(MIPI_BASE, 0x00, 0x00000001);	// Stop capture request
 4010aa8:	05c100b4 	movhi	r23,1026
	uint16_t img_height = 2448;

	uint16_t addr, mipiReg;
	uint8_t reg;
	byte cmd, com;
	com = COM_JTAG;
 4010aac:	0025883a 	mov	r18,zero
	// wait for one frame to adjust blc
	usleep(1000 * 500);

	IOWR(LED_BASE, 0x00, 0x01);
	uint16_t img_width = 3264;
	uint16_t img_height = 2448;
 4010ab0:	04c26404 	movi	r19,2448

	// wait for one frame to adjust blc
	usleep(1000 * 500);

	IOWR(LED_BASE, 0x00, 0x01);
	uint16_t img_width = 3264;
 4010ab4:	05033004 	movi	r20,3264
	uint8_t reg;
	byte cmd, com;
	com = COM_JTAG;
	while(1){
		cmd = readByte();
		switch(cmd)
 4010ab8:	05400404 	movi	r21,16
 4010abc:	b582b904 	addi	r22,r22,2788
				img_height = readUInt16();
				writeByte(RESPONSE_OK);
				break;
			case CMD_RD_IMG:
				IOWR(LED_BASE, 0x00, 0x00);
				IOWR(MIPI_BASE, 0x00, 0x00000001);	// Stop capture request
 4010ac0:	bdc40004 	addi	r23,r23,4096
	uint16_t addr, mipiReg;
	uint8_t reg;
	byte cmd, com;
	com = COM_JTAG;
	while(1){
		cmd = readByte();
 4010ac4:	40111a80 	call	40111a8 <readByte>
		switch(cmd)
 4010ac8:	10bfffc4 	addi	r2,r2,-1
 4010acc:	10803fcc 	andi	r2,r2,255
 4010ad0:	a8bffc36 	bltu	r21,r2,4010ac4 <_gp+0xffff2f98>
 4010ad4:	100490ba 	slli	r2,r2,2
 4010ad8:	1585883a 	add	r2,r2,r22
 4010adc:	10800017 	ldw	r2,0(r2)
 4010ae0:	1000683a 	jmp	r2
 4010ae4:	04010b40 	call	4010b4 <__alt_mem_sdram+0x4010b4>
 4010ae8:	04010b58 	cmpnei	r16,zero,1069
 4010aec:	04010bac 	andhi	r16,zero,1070
 4010af0:	04010bd8 	cmpnei	r16,zero,1071
 4010af4:	04010be0 	cmpeqi	r16,zero,1071
 4010af8:	04010bf4 	movhi	r16,1071
 4010afc:	04010bc0 	call	4010bc <__alt_mem_sdram+0x4010bc>
 4010b00:	04010b74 	movhi	r16,1069
 4010b04:	04010b90 	cmplti	r16,zero,1070
 4010b08:	04010ac4 	movi	r16,1067
 4010b0c:	04010ac4 	movi	r16,1067
 4010b10:	04010ac4 	movi	r16,1067
 4010b14:	04010ac4 	movi	r16,1067
 4010b18:	04010ac4 	movi	r16,1067
 4010b1c:	04010ac4 	movi	r16,1067
 4010b20:	04010b28 	cmpgeui	r16,zero,1068
 4010b24:	04010b34 	movhi	r16,1068
		{
			case CMD_RD_COM:
				writeByte(com);
 4010b28:	91003fcc 	andi	r4,r18,255
 4010b2c:	40111c00 	call	40111c0 <writeByte>
 4010b30:	00004f06 	br	4010c70 <main+0x22c>
				writeByte(RESPONSE_OK);
				break;
			case CMD_WR_COM:
				com = readByte();
 4010b34:	40111a80 	call	40111a8 <readByte>
 4010b38:	1025883a 	mov	r18,r2
 4010b3c:	00004c06 	br	4010c70 <main+0x22c>
				writeByte(RESPONSE_OK);
				break;
			case CMD_RD_REG:
				addr = readUInt16();
 4010b40:	40110a00 	call	40110a0 <readUInt16>
				reg = mipi_camera_reg_read(addr);
 4010b44:	113fffcc 	andi	r4,r2,65535
			case CMD_WR_COM:
				com = readByte();
				writeByte(RESPONSE_OK);
				break;
			case CMD_RD_REG:
				addr = readUInt16();
 4010b48:	d880000d 	sth	r2,0(sp)
				reg = mipi_camera_reg_read(addr);
 4010b4c:	4010dc40 	call	4010dc4 <mipi_camera_reg_read>
				writeByte(reg);
 4010b50:	11003fcc 	andi	r4,r2,255
 4010b54:	00004706 	br	4010c74 <main+0x230>
				break;
			case CMD_WR_REG:
				addr = readUInt16();
 4010b58:	40110a00 	call	40110a0 <readUInt16>
 4010b5c:	d880000d 	sth	r2,0(sp)
				reg = readByte();
 4010b60:	40111a80 	call	40111a8 <readByte>
				mipi_camera_reg_write(addr, reg);
 4010b64:	d900000b 	ldhu	r4,0(sp)
 4010b68:	11403fcc 	andi	r5,r2,255
 4010b6c:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
				break;
 4010b70:	003fd406 	br	4010ac4 <_gp+0xffff2f98>
			case CMD_MIPI_RD_REG:
				addr = readUInt16();
 4010b74:	40110a00 	call	40110a0 <readUInt16>
				mipiReg = mipi_bridge_reg_read(addr);
 4010b78:	113fffcc 	andi	r4,r2,65535
				addr = readUInt16();
				reg = readByte();
				mipi_camera_reg_write(addr, reg);
				break;
			case CMD_MIPI_RD_REG:
				addr = readUInt16();
 4010b7c:	d880000d 	sth	r2,0(sp)
				mipiReg = mipi_bridge_reg_read(addr);
 4010b80:	4010cf00 	call	4010cf0 <mipi_bridge_reg_read>
				writeUInt16(mipiReg);
 4010b84:	113fffcc 	andi	r4,r2,65535
 4010b88:	40111840 	call	4011184 <writeUInt16>
				break;
 4010b8c:	003fcd06 	br	4010ac4 <_gp+0xffff2f98>
			case CMD_MIPI_WR_REG:
				addr = readUInt16();
 4010b90:	40110a00 	call	40110a0 <readUInt16>
 4010b94:	d880000d 	sth	r2,0(sp)
				mipiReg = readUInt16();
 4010b98:	40110a00 	call	40110a0 <readUInt16>
				mipi_bridge_reg_write(addr, mipiReg);
 4010b9c:	d900000b 	ldhu	r4,0(sp)
 4010ba0:	117fffcc 	andi	r5,r2,65535
 4010ba4:	4010cb80 	call	4010cb8 <mipi_bridge_reg_write>
				break;
 4010ba8:	003fc606 	br	4010ac4 <_gp+0xffff2f98>
			case CMD_WR_FOCUS:
				addr = readUInt16();
 4010bac:	40110a00 	call	40110a0 <readUInt16>
				mipi_camera_reg_write_VCM149C(addr);
 4010bb0:	113fffcc 	andi	r4,r2,65535
				addr = readUInt16();
				mipiReg = readUInt16();
				mipi_bridge_reg_write(addr, mipiReg);
				break;
			case CMD_WR_FOCUS:
				addr = readUInt16();
 4010bb4:	d880000d 	sth	r2,0(sp)
				mipi_camera_reg_write_VCM149C(addr);
 4010bb8:	40110280 	call	4011028 <mipi_camera_reg_write_VCM149C>
 4010bbc:	00002c06 	br	4010c70 <main+0x22c>
				writeByte(RESPONSE_OK);
				break;
			case CMD_RD_FOCUS:
				addr = mipi_camera_reg_read_VCM149C();
 4010bc0:	4010ff40 	call	4010ff4 <mipi_camera_reg_read_VCM149C>
				writeBytes((byte*)&addr, 2);
 4010bc4:	01400084 	movi	r5,2
 4010bc8:	d809883a 	mov	r4,sp
				addr = readUInt16();
				mipi_camera_reg_write_VCM149C(addr);
				writeByte(RESPONSE_OK);
				break;
			case CMD_RD_FOCUS:
				addr = mipi_camera_reg_read_VCM149C();
 4010bcc:	d880000d 	sth	r2,0(sp)
				writeBytes((byte*)&addr, 2);
 4010bd0:	401113c0 	call	401113c <writeBytes>
 4010bd4:	00002606 	br	4010c70 <main+0x22c>
				writeByte(RESPONSE_OK);
				break;
			case CMD_RESET:
				config();
 4010bd8:	40109100 	call	4010910 <config>
 4010bdc:	00002406 	br	4010c70 <main+0x22c>
				writeByte(RESPONSE_OK);
				break;
			case CMD_CONFIG:
				img_width = readUInt16();
 4010be0:	40110a00 	call	40110a0 <readUInt16>
 4010be4:	1029883a 	mov	r20,r2
				img_height = readUInt16();
 4010be8:	40110a00 	call	40110a0 <readUInt16>
 4010bec:	1027883a 	mov	r19,r2
 4010bf0:	00001f06 	br	4010c70 <main+0x22c>
				writeByte(RESPONSE_OK);
				break;
			case CMD_RD_IMG:
				IOWR(LED_BASE, 0x00, 0x00);
 4010bf4:	88000035 	stwio	zero,0(r17)
				IOWR(MIPI_BASE, 0x00, 0x00000001);	// Stop capture request
 4010bf8:	bc000035 	stwio	r16,0(r23)
				WaitFrame();
 4010bfc:	40109fc0 	call	40109fc <WaitFrame>
				switch(com)
 4010c00:	90803fcc 	andi	r2,r18,255
 4010c04:	1000161e 	bne	r2,zero,4010c60 <main+0x21c>
 4010c08:	a0bfffcc 	andi	r2,r20,65535
 4010c0c:	108d883a 	add	r6,r2,r2
 4010c10:	0085c83a 	sub	r2,zero,r2
 4010c14:	10b9883a 	add	fp,r2,r2
				case COM_JTAG:
					// send row by row
					for(int rowIndex=0;rowIndex<img_height;rowIndex++)
					{
						byte *bytes = (byte *)(SDRAM_BASE + (rowIndex * img_width * 2));
						writeBytes(bytes, img_width * 2);
 4010c18:	0007883a 	mov	r3,zero
 4010c1c:	0005883a 	mov	r2,zero
				WaitFrame();
				switch(com)
				{
				case COM_JTAG:
					// send row by row
					for(int rowIndex=0;rowIndex<img_height;rowIndex++)
 4010c20:	99ffffcc 	andi	r7,r19,65535
 4010c24:	1987883a 	add	r3,r3,r6
 4010c28:	11c00d0e 	bge	r2,r7,4010c60 <main+0x21c>
					{
						byte *bytes = (byte *)(SDRAM_BASE + (rowIndex * img_width * 2));
						writeBytes(bytes, img_width * 2);
 4010c2c:	300b883a 	mov	r5,r6
 4010c30:	1f09883a 	add	r4,r3,fp
 4010c34:	d8800215 	stw	r2,8(sp)
 4010c38:	d8c00115 	stw	r3,4(sp)
 4010c3c:	d9800315 	stw	r6,12(sp)
 4010c40:	d9c00415 	stw	r7,16(sp)
 4010c44:	401113c0 	call	401113c <writeBytes>
				WaitFrame();
				switch(com)
				{
				case COM_JTAG:
					// send row by row
					for(int rowIndex=0;rowIndex<img_height;rowIndex++)
 4010c48:	d8800217 	ldw	r2,8(sp)
 4010c4c:	d9c00417 	ldw	r7,16(sp)
 4010c50:	d9800317 	ldw	r6,12(sp)
 4010c54:	10800044 	addi	r2,r2,1
 4010c58:	d8c00117 	ldw	r3,4(sp)
 4010c5c:	003ff106 	br	4010c24 <_gp+0xffff30f8>
				case COM_FT232H:
					// send the whole frame
					//ft232h_write_bytes(0, img_width*img_height*2);
					break;
				}
				IOWR(MIPI_BASE, 0x00, 0x00000000);	// Start capture request
 4010c60:	008100b4 	movhi	r2,1026
 4010c64:	10840004 	addi	r2,r2,4096
 4010c68:	10000035 	stwio	zero,0(r2)
				IOWR(LED_BASE, 0x00, 0x01);
 4010c6c:	8c000035 	stwio	r16,0(r17)
				writeByte(RESPONSE_OK);
 4010c70:	01002a84 	movi	r4,170
 4010c74:	40111c00 	call	40111c0 <writeByte>
				break;
 4010c78:	003f9206 	br	4010ac4 <_gp+0xffff2f98>
int main()
{
	usleep(1000 * 100);
	if(!config())
	{
		IOWR(LED_BASE, 0x00, 0xFF);
 4010c7c:	00803fc4 	movi	r2,255
 4010c80:	88800035 	stwio	r2,0(r17)
				writeByte(RESPONSE_OK);
				break;
		}
	};
	return 0;
}
 4010c84:	0005883a 	mov	r2,zero
 4010c88:	dfc00e17 	ldw	ra,56(sp)
 4010c8c:	df000d17 	ldw	fp,52(sp)
 4010c90:	ddc00c17 	ldw	r23,48(sp)
 4010c94:	dd800b17 	ldw	r22,44(sp)
 4010c98:	dd400a17 	ldw	r21,40(sp)
 4010c9c:	dd000917 	ldw	r20,36(sp)
 4010ca0:	dcc00817 	ldw	r19,32(sp)
 4010ca4:	dc800717 	ldw	r18,28(sp)
 4010ca8:	dc400617 	ldw	r17,24(sp)
 4010cac:	dc000517 	ldw	r16,20(sp)
 4010cb0:	dec00f04 	addi	sp,sp,60
 4010cb4:	f800283a 	ret

04010cb8 <mipi_bridge_reg_write>:
};

const int MIPI_REGISTERS_COUNT = sizeof(MIPI_REGISTERS) / sizeof(MipiRegister);

bool mipi_bridge_reg_write(uint16_t Addr, uint16_t Value)
{
 4010cb8:	defffd04 	addi	sp,sp,-12
	return OC_I2CL_Write(I2C_OPENCORES_MIPI_BASE, MIPI_BRIDGE_I2C_ADDR, Addr, (alt_u8 *)&Value, sizeof(Value));
 4010cbc:	21bfffcc 	andi	r6,r4,65535
 4010cc0:	00800084 	movi	r2,2
 4010cc4:	010100b4 	movhi	r4,1026
};

const int MIPI_REGISTERS_COUNT = sizeof(MIPI_REGISTERS) / sizeof(MipiRegister);

bool mipi_bridge_reg_write(uint16_t Addr, uint16_t Value)
{
 4010cc8:	d940010d 	sth	r5,4(sp)
	return OC_I2CL_Write(I2C_OPENCORES_MIPI_BASE, MIPI_BRIDGE_I2C_ADDR, Addr, (alt_u8 *)&Value, sizeof(Value));
 4010ccc:	d8800015 	stw	r2,0(sp)
 4010cd0:	d9c00104 	addi	r7,sp,4
 4010cd4:	01400704 	movi	r5,28
 4010cd8:	21050804 	addi	r4,r4,5152
};

const int MIPI_REGISTERS_COUNT = sizeof(MIPI_REGISTERS) / sizeof(MipiRegister);

bool mipi_bridge_reg_write(uint16_t Addr, uint16_t Value)
{
 4010cdc:	dfc00215 	stw	ra,8(sp)
	return OC_I2CL_Write(I2C_OPENCORES_MIPI_BASE, MIPI_BRIDGE_I2C_ADDR, Addr, (alt_u8 *)&Value, sizeof(Value));
 4010ce0:	40106040 	call	4010604 <OC_I2CL_Write>
}
 4010ce4:	dfc00217 	ldw	ra,8(sp)
 4010ce8:	dec00304 	addi	sp,sp,12
 4010cec:	f800283a 	ret

04010cf0 <mipi_bridge_reg_read>:

uint16_t mipi_bridge_reg_read(uint16_t Addr)
{
 4010cf0:	defffd04 	addi	sp,sp,-12
	uint16_t value;
	OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE,MIPI_BRIDGE_I2C_ADDR, Addr,(alt_u8 *)&value,sizeof(value));
 4010cf4:	21bfffcc 	andi	r6,r4,65535
 4010cf8:	00800084 	movi	r2,2
 4010cfc:	010100b4 	movhi	r4,1026
 4010d00:	d9c00104 	addi	r7,sp,4
 4010d04:	01400704 	movi	r5,28
 4010d08:	d8800015 	stw	r2,0(sp)
 4010d0c:	21050804 	addi	r4,r4,5152
{
	return OC_I2CL_Write(I2C_OPENCORES_MIPI_BASE, MIPI_BRIDGE_I2C_ADDR, Addr, (alt_u8 *)&Value, sizeof(Value));
}

uint16_t mipi_bridge_reg_read(uint16_t Addr)
{
 4010d10:	dfc00215 	stw	ra,8(sp)
	uint16_t value;
	OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE,MIPI_BRIDGE_I2C_ADDR, Addr,(alt_u8 *)&value,sizeof(value));
 4010d14:	40107540 	call	4010754 <OC_I2CL_Read>
	return ReverseUInt16(value);
 4010d18:	d900010b 	ldhu	r4,4(sp)
 4010d1c:	40108fc0 	call	40108fc <ReverseUInt16>
}
 4010d20:	dfc00217 	ldw	ra,8(sp)
 4010d24:	dec00304 	addi	sp,sp,12
 4010d28:	f800283a 	ret

04010d2c <mipi_bridge_init>:

bool mipi_bridge_init(void)
{
 4010d2c:	defffa04 	addi	sp,sp,-24
 4010d30:	dc000015 	stw	r16,0(sp)
 4010d34:	04010074 	movhi	r16,1025
 4010d38:	8412ed04 	addi	r16,r16,19380
 4010d3c:	dd000415 	stw	r20,16(sp)
 4010d40:	dcc00315 	stw	r19,12(sp)
 4010d44:	dc800215 	stw	r18,8(sp)
 4010d48:	dc400115 	stw	r17,4(sp)
 4010d4c:	dfc00515 	stw	ra,20(sp)
 4010d50:	0023883a 	mov	r17,zero
		printf("TC358748XBG Chip and Revision ID: 0x%04xh don't match 0x4401\n", chipID);
		return;
	}
	*/
	for(int i = 0; i < MIPI_REGISTERS_COUNT; i++){
		if (MIPI_REGISTERS[i].Addr == WRITE_DELAY)
 4010d54:	84ffff84 	addi	r19,r16,-2
 4010d58:	053fffd4 	movui	r20,65535
	{
		printf("TC358748XBG Chip and Revision ID: 0x%04xh don't match 0x4401\n", chipID);
		return;
	}
	*/
	for(int i = 0; i < MIPI_REGISTERS_COUNT; i++){
 4010d5c:	04801104 	movi	r18,68
		if (MIPI_REGISTERS[i].Addr == WRITE_DELAY)
 4010d60:	8cc5883a 	add	r2,r17,r19
 4010d64:	1100000b 	ldhu	r4,0(r2)
 4010d68:	2500061e 	bne	r4,r20,4010d84 <mipi_bridge_init+0x58>
		{
			usleep(MIPI_REGISTERS[i].Data * 1000);
 4010d6c:	8100000b 	ldhu	r4,0(r16)
 4010d70:	0140fa04 	movi	r5,1000
 4010d74:	401137c0 	call	401137c <__mulsi3>
 4010d78:	1009883a 	mov	r4,r2
 4010d7c:	40116540 	call	4011654 <usleep>
 4010d80:	00000406 	br	4010d94 <mipi_bridge_init+0x68>
		}
		else
		{
			if(!mipi_bridge_reg_write(MIPI_REGISTERS[i].Addr, MIPI_REGISTERS[i].Data))
 4010d84:	8140000b 	ldhu	r5,0(r16)
 4010d88:	4010cb80 	call	4010cb8 <mipi_bridge_reg_write>
 4010d8c:	10c03fcc 	andi	r3,r2,255
 4010d90:	18000426 	beq	r3,zero,4010da4 <mipi_bridge_init+0x78>
 4010d94:	8c400104 	addi	r17,r17,4
 4010d98:	84000104 	addi	r16,r16,4
	{
		printf("TC358748XBG Chip and Revision ID: 0x%04xh don't match 0x4401\n", chipID);
		return;
	}
	*/
	for(int i = 0; i < MIPI_REGISTERS_COUNT; i++){
 4010d9c:	8cbff01e 	bne	r17,r18,4010d60 <_gp+0xffff3234>
		{
			if(!mipi_bridge_reg_write(MIPI_REGISTERS[i].Addr, MIPI_REGISTERS[i].Data))
				return false;
		}
	}
	return true;
 4010da0:	00800044 	movi	r2,1
}
 4010da4:	dfc00517 	ldw	ra,20(sp)
 4010da8:	dd000417 	ldw	r20,16(sp)
 4010dac:	dcc00317 	ldw	r19,12(sp)
 4010db0:	dc800217 	ldw	r18,8(sp)
 4010db4:	dc400117 	ldw	r17,4(sp)
 4010db8:	dc000017 	ldw	r16,0(sp)
 4010dbc:	dec00604 	addi	sp,sp,24
 4010dc0:	f800283a 	ret

04010dc4 <mipi_camera_reg_read>:

		{OV8865_SC_CTRL0100, 0x01}, //; wake up, streaming
};

uint8_t mipi_camera_reg_read(uint16_t Addr)
{
 4010dc4:	defffd04 	addi	sp,sp,-12
	uint8_t value;
	OC_I2CL_Read(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&value, sizeof(value));
 4010dc8:	21bfffcc 	andi	r6,r4,65535
 4010dcc:	00800044 	movi	r2,1
 4010dd0:	010100b4 	movhi	r4,1026
 4010dd4:	d8800015 	stw	r2,0(sp)
 4010dd8:	d9c00104 	addi	r7,sp,4
 4010ddc:	01401b04 	movi	r5,108
 4010de0:	21050004 	addi	r4,r4,5120

		{OV8865_SC_CTRL0100, 0x01}, //; wake up, streaming
};

uint8_t mipi_camera_reg_read(uint16_t Addr)
{
 4010de4:	dfc00215 	stw	ra,8(sp)
	uint8_t value;
	OC_I2CL_Read(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&value, sizeof(value));
 4010de8:	40107540 	call	4010754 <OC_I2CL_Read>
	return (value);
}
 4010dec:	d8800103 	ldbu	r2,4(sp)
 4010df0:	dfc00217 	ldw	ra,8(sp)
 4010df4:	dec00304 	addi	sp,sp,12
 4010df8:	f800283a 	ret

04010dfc <mipi_camera_reg_write>:

bool mipi_camera_reg_write(uint16_t Addr, uint8_t Value)
{
 4010dfc:	defffd04 	addi	sp,sp,-12
	return OC_I2CL_Write(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&Value, sizeof(Value));
 4010e00:	21bfffcc 	andi	r6,r4,65535
 4010e04:	00800044 	movi	r2,1
 4010e08:	010100b4 	movhi	r4,1026
	OC_I2CL_Read(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&value, sizeof(value));
	return (value);
}

bool mipi_camera_reg_write(uint16_t Addr, uint8_t Value)
{
 4010e0c:	d9400105 	stb	r5,4(sp)
	return OC_I2CL_Write(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&Value, sizeof(Value));
 4010e10:	d8800015 	stw	r2,0(sp)
 4010e14:	d9c00104 	addi	r7,sp,4
 4010e18:	01401b04 	movi	r5,108
 4010e1c:	21050004 	addi	r4,r4,5120
	OC_I2CL_Read(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&value, sizeof(value));
	return (value);
}

bool mipi_camera_reg_write(uint16_t Addr, uint8_t Value)
{
 4010e20:	dfc00215 	stw	ra,8(sp)
	return OC_I2CL_Write(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&Value, sizeof(Value));
 4010e24:	40106040 	call	4010604 <OC_I2CL_Write>
}
 4010e28:	dfc00217 	ldw	ra,8(sp)
 4010e2c:	dec00304 	addi	sp,sp,12
 4010e30:	f800283a 	ret

04010e34 <mipi_camera_binning>:

void mipi_camera_binning(uint8_t level)
{
 4010e34:	defffd04 	addi	sp,sp,-12
 4010e38:	dc400115 	stw	r17,4(sp)
 4010e3c:	dc000015 	stw	r16,0(sp)
 4010e40:	2023883a 	mov	r17,r4
 4010e44:	dfc00215 	stw	ra,8(sp)
	// TODO: Enable VarioPixel?
	if(level <= 1) level = 1;
 4010e48:	21003fcc 	andi	r4,r4,255
 4010e4c:	04000044 	movi	r16,1
 4010e50:	8100342e 	bgeu	r16,r4,4010f24 <mipi_camera_binning+0xf0>
	if(level >= 3) level = 3;
 4010e54:	04000084 	movi	r16,2
 4010e58:	24000126 	beq	r4,r16,4010e60 <mipi_camera_binning+0x2c>
 4010e5c:	044000c4 	movi	r17,3
	mipi_camera_reg_write(OV8865_SC_CTRL0100, 0x00);
 4010e60:	000b883a 	mov	r5,zero
 4010e64:	01004004 	movi	r4,256
		mipi_camera_reg_write(0x382a, 0x01);
		mipi_camera_reg_write(0x382b, 0x01);
		mipi_camera_reg_write(OV8865_BLC_NUM_OPTION, 8);
		mipi_camera_reg_write(OV8865_ZLINE_NUM_OPTION, 2);
	}
	else if(level == 2){
 4010e68:	8c403fcc 	andi	r17,r17,255
void mipi_camera_binning(uint8_t level)
{
	// TODO: Enable VarioPixel?
	if(level <= 1) level = 1;
	if(level >= 3) level = 3;
	mipi_camera_reg_write(OV8865_SC_CTRL0100, 0x00);
 4010e6c:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382a, 0x01);
		mipi_camera_reg_write(0x382b, 0x01);
		mipi_camera_reg_write(OV8865_BLC_NUM_OPTION, 8);
		mipi_camera_reg_write(OV8865_ZLINE_NUM_OPTION, 2);
	}
	else if(level == 2){
 4010e70:	8c00111e 	bne	r17,r16,4010eb8 <mipi_camera_binning+0x84>
		// 2x2 binning
		mipi_camera_reg_write(0x3814, 0x03);
 4010e74:	014000c4 	movi	r5,3
 4010e78:	010e0504 	movi	r4,14356
 4010e7c:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
		mipi_camera_reg_write(0x3815, 0x01);
 4010e80:	01400044 	movi	r5,1
 4010e84:	010e0544 	movi	r4,14357
 4010e88:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382a, 0x03);
 4010e8c:	014000c4 	movi	r5,3
 4010e90:	010e0a84 	movi	r4,14378
 4010e94:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382b, 0x01);
 4010e98:	01400044 	movi	r5,1
 4010e9c:	010e0ac4 	movi	r4,14379
 4010ea0:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
		mipi_camera_reg_write(OV8865_BLC_NUM_OPTION, 4);
 4010ea4:	01400104 	movi	r5,4
 4010ea8:	010e0c04 	movi	r4,14384
 4010eac:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
		mipi_camera_reg_write(OV8865_ZLINE_NUM_OPTION, 1);
 4010eb0:	01400044 	movi	r5,1
 4010eb4:	00001006 	br	4010ef8 <mipi_camera_binning+0xc4>
	}
	else if(level == 3){
		// 4x4 binning
		mipi_camera_reg_write(0x3814, 0x07);
 4010eb8:	014001c4 	movi	r5,7
 4010ebc:	010e0504 	movi	r4,14356
 4010ec0:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
		mipi_camera_reg_write(0x3815, 0x01);
 4010ec4:	01400044 	movi	r5,1
 4010ec8:	010e0544 	movi	r4,14357
 4010ecc:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382a, 0x07);
 4010ed0:	014001c4 	movi	r5,7
 4010ed4:	010e0a84 	movi	r4,14378
 4010ed8:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382b, 0x01);
 4010edc:	01400044 	movi	r5,1
 4010ee0:	010e0ac4 	movi	r4,14379
 4010ee4:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
		mipi_camera_reg_write(OV8865_BLC_NUM_OPTION, 8);
 4010ee8:	01400204 	movi	r5,8
 4010eec:	010e0c04 	movi	r4,14384
 4010ef0:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
		mipi_camera_reg_write(OV8865_ZLINE_NUM_OPTION, 2);
 4010ef4:	01400084 	movi	r5,2
 4010ef8:	010e0d84 	movi	r4,14390
 4010efc:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
	}
	usleep(10000);
 4010f00:	0109c404 	movi	r4,10000
 4010f04:	40116540 	call	4011654 <usleep>
	mipi_camera_reg_write(OV8865_SC_CTRL0100, 0x01);
 4010f08:	01400044 	movi	r5,1
 4010f0c:	01004004 	movi	r4,256
}
 4010f10:	dfc00217 	ldw	ra,8(sp)
 4010f14:	dc400117 	ldw	r17,4(sp)
 4010f18:	dc000017 	ldw	r16,0(sp)
 4010f1c:	dec00304 	addi	sp,sp,12
		mipi_camera_reg_write(0x382b, 0x01);
		mipi_camera_reg_write(OV8865_BLC_NUM_OPTION, 8);
		mipi_camera_reg_write(OV8865_ZLINE_NUM_OPTION, 2);
	}
	usleep(10000);
	mipi_camera_reg_write(OV8865_SC_CTRL0100, 0x01);
 4010f20:	4010dfc1 	jmpi	4010dfc <mipi_camera_reg_write>
void mipi_camera_binning(uint8_t level)
{
	// TODO: Enable VarioPixel?
	if(level <= 1) level = 1;
	if(level >= 3) level = 3;
	mipi_camera_reg_write(OV8865_SC_CTRL0100, 0x00);
 4010f24:	000b883a 	mov	r5,zero
 4010f28:	01004004 	movi	r4,256
 4010f2c:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
	if(level == 1){
		// no binning
		mipi_camera_reg_write(0x3814, 0x01);
 4010f30:	800b883a 	mov	r5,r16
 4010f34:	010e0504 	movi	r4,14356
 4010f38:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
		mipi_camera_reg_write(0x3815, 0x01);
 4010f3c:	800b883a 	mov	r5,r16
 4010f40:	010e0544 	movi	r4,14357
 4010f44:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382a, 0x01);
 4010f48:	800b883a 	mov	r5,r16
 4010f4c:	010e0a84 	movi	r4,14378
 4010f50:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382b, 0x01);
 4010f54:	800b883a 	mov	r5,r16
 4010f58:	003fe106 	br	4010ee0 <_gp+0xffff33b4>

04010f5c <mipi_camera_init>:
	usleep(10000);
	mipi_camera_reg_write(OV8865_SC_CTRL0100, 0x01);
}

bool mipi_camera_init(void)
{
 4010f5c:	defffa04 	addi	sp,sp,-24
 4010f60:	dc000015 	stw	r16,0(sp)
 4010f64:	04010074 	movhi	r16,1025
 4010f68:	8412fe04 	addi	r16,r16,19448
 4010f6c:	dd000415 	stw	r20,16(sp)
 4010f70:	dcc00315 	stw	r19,12(sp)
 4010f74:	dc800215 	stw	r18,8(sp)
 4010f78:	dc400115 	stw	r17,4(sp)
 4010f7c:	dfc00515 	stw	ra,20(sp)
 4010f80:	0023883a 	mov	r17,zero
	const int num = sizeof(CAMERA_REGISTERS)/sizeof(CameraRegister);
	for(int i=0; i<num; i++){
		if (CAMERA_REGISTERS[i].Addr == TIME_DELAY)
 4010f84:	84ffff84 	addi	r19,r16,-2
 4010f88:	053fffd4 	movui	r20,65535
}

bool mipi_camera_init(void)
{
	const int num = sizeof(CAMERA_REGISTERS)/sizeof(CameraRegister);
	for(int i=0; i<num; i++){
 4010f8c:	04814504 	movi	r18,1300
		if (CAMERA_REGISTERS[i].Addr == TIME_DELAY)
 4010f90:	8cc5883a 	add	r2,r17,r19
 4010f94:	1100000b 	ldhu	r4,0(r2)
 4010f98:	2500061e 	bne	r4,r20,4010fb4 <mipi_camera_init+0x58>
		{
			usleep(CAMERA_REGISTERS[i].Data * 100);
 4010f9c:	81000003 	ldbu	r4,0(r16)
 4010fa0:	01401904 	movi	r5,100
 4010fa4:	401137c0 	call	401137c <__mulsi3>
 4010fa8:	1009883a 	mov	r4,r2
 4010fac:	40116540 	call	4011654 <usleep>
 4010fb0:	00000406 	br	4010fc4 <mipi_camera_init+0x68>
		}
		else
		{
			if(!mipi_camera_reg_write(CAMERA_REGISTERS[i].Addr, CAMERA_REGISTERS[i].Data))
 4010fb4:	81400003 	ldbu	r5,0(r16)
 4010fb8:	4010dfc0 	call	4010dfc <mipi_camera_reg_write>
 4010fbc:	10c03fcc 	andi	r3,r2,255
 4010fc0:	18000426 	beq	r3,zero,4010fd4 <mipi_camera_init+0x78>
 4010fc4:	8c400104 	addi	r17,r17,4
 4010fc8:	84000104 	addi	r16,r16,4
}

bool mipi_camera_init(void)
{
	const int num = sizeof(CAMERA_REGISTERS)/sizeof(CameraRegister);
	for(int i=0; i<num; i++){
 4010fcc:	8cbff01e 	bne	r17,r18,4010f90 <_gp+0xffff3464>
		{
			if(!mipi_camera_reg_write(CAMERA_REGISTERS[i].Addr, CAMERA_REGISTERS[i].Data))
				return false;
		}
	}
	return true;
 4010fd0:	00800044 	movi	r2,1
}
 4010fd4:	dfc00517 	ldw	ra,20(sp)
 4010fd8:	dd000417 	ldw	r20,16(sp)
 4010fdc:	dcc00317 	ldw	r19,12(sp)
 4010fe0:	dc800217 	ldw	r18,8(sp)
 4010fe4:	dc400117 	ldw	r17,4(sp)
 4010fe8:	dc000017 	ldw	r16,0(sp)
 4010fec:	dec00604 	addi	sp,sp,24
 4010ff0:	f800283a 	ret

04010ff4 <mipi_camera_reg_read_VCM149C>:

uint16_t mipi_camera_reg_read_VCM149C()
{
 4010ff4:	defffe04 	addi	sp,sp,-8
	uint16_t focus;
	OC_I2C_Read_Continue(I2C_OPENCORES_CAMERA_BASE, MIPI_AF_I2C_ADDR, (uint8_t *)&focus, sizeof(focus));
 4010ff8:	010100b4 	movhi	r4,1026
 4010ffc:	01c00084 	movi	r7,2
 4011000:	d80d883a 	mov	r6,sp
 4011004:	01400604 	movi	r5,24
 4011008:	21050004 	addi	r4,r4,5120
	}
	return true;
}

uint16_t mipi_camera_reg_read_VCM149C()
{
 401100c:	dfc00115 	stw	ra,4(sp)
	uint16_t focus;
	OC_I2C_Read_Continue(I2C_OPENCORES_CAMERA_BASE, MIPI_AF_I2C_ADDR, (uint8_t *)&focus, sizeof(focus));
 4011010:	40104fc0 	call	40104fc <OC_I2C_Read_Continue>
	return ReverseUInt16(focus);
 4011014:	d900000b 	ldhu	r4,0(sp)
 4011018:	40108fc0 	call	40108fc <ReverseUInt16>
}
 401101c:	dfc00117 	ldw	ra,4(sp)
 4011020:	dec00204 	addi	sp,sp,8
 4011024:	f800283a 	ret

04011028 <mipi_camera_reg_write_VCM149C>:

bool mipi_camera_reg_write_VCM149C(uint16_t dacValue)
{
 4011028:	defffc04 	addi	sp,sp,-16
 401102c:	200d883a 	mov	r6,r4
 4011030:	dfc00315 	stw	ra,12(sp)
 4011034:	dc000215 	stw	r16,8(sp)
 4011038:	213fffcc 	andi	r4,r4,65535
 401103c:	0080ffc4 	movi	r2,1023
 4011040:	1100012e 	bgeu	r2,r4,4011048 <mipi_camera_reg_write_VCM149C+0x20>
 4011044:	100d883a 	mov	r6,r2
		dacValue = 0;
	}
	uint8_t msb = (dacValue >> 4)&0x00FF;
	uint8_t lsb = (dacValue << 4 )&0x00F0;
	lsb += 0x06;
	lsb += 0x06;
 4011048:	31bfffcc 	andi	r6,r6,65535
 401104c:	3004913a 	slli	r2,r6,4
	if(!OC_I2C_Write(I2C_OPENCORES_CAMERA_BASE, MIPI_AF_I2C_ADDR, msb, (uint8_t *)&lsb, sizeof(lsb)))
 4011050:	300cd13a 	srli	r6,r6,4
 4011054:	010100b4 	movhi	r4,1026
		dacValue = 0;
	}
	uint8_t msb = (dacValue >> 4)&0x00FF;
	uint8_t lsb = (dacValue << 4 )&0x00F0;
	lsb += 0x06;
	lsb += 0x06;
 4011058:	10800304 	addi	r2,r2,12
 401105c:	d8800105 	stb	r2,4(sp)
	if(!OC_I2C_Write(I2C_OPENCORES_CAMERA_BASE, MIPI_AF_I2C_ADDR, msb, (uint8_t *)&lsb, sizeof(lsb)))
 4011060:	00800044 	movi	r2,1
 4011064:	d8800015 	stw	r2,0(sp)
 4011068:	d9c00104 	addi	r7,sp,4
 401106c:	01400604 	movi	r5,24
 4011070:	21050004 	addi	r4,r4,5120
 4011074:	40102300 	call	4010230 <OC_I2C_Write>
 4011078:	1021883a 	mov	r16,r2
 401107c:	10803fcc 	andi	r2,r2,255
 4011080:	10000226 	beq	r2,zero,401108c <mipi_camera_reg_write_VCM149C+0x64>
		return false;
	usleep(1000);
 4011084:	0100fa04 	movi	r4,1000
 4011088:	40116540 	call	4011654 <usleep>
	return true;
}
 401108c:	8005883a 	mov	r2,r16
 4011090:	dfc00317 	ldw	ra,12(sp)
 4011094:	dc000217 	ldw	r16,8(sp)
 4011098:	dec00404 	addi	sp,sp,16
 401109c:	f800283a 	ret

040110a0 <readUInt16>:
#include "stdio_ext.h"

// x86 is Little Endian
// ex. 0x123 => 0x23 0x01
uint16_t readUInt16()
{
 40110a0:	defffe04 	addi	sp,sp,-8
 40110a4:	dfc00115 	stw	ra,4(sp)
 40110a8:	dc000015 	stw	r16,0(sp)
}
*/

byte readByte()
{
	return alt_getchar();
 40110ac:	40113a40 	call	40113a4 <alt_getchar>
 40110b0:	1021883a 	mov	r16,r2
 40110b4:	40113a40 	call	40113a4 <alt_getchar>
uint16_t readUInt16()
{
  byte data[2];
  data[0] = readByte();
  data[1] = readByte();
  return bytesToUInt16(data);
 40110b8:	10803fcc 	andi	r2,r2,255
 40110bc:	1004923a 	slli	r2,r2,8
 40110c0:	84003fcc 	andi	r16,r16,255
}
 40110c4:	1404b03a 	or	r2,r2,r16
 40110c8:	dfc00117 	ldw	ra,4(sp)
 40110cc:	dc000017 	ldw	r16,0(sp)
 40110d0:	dec00204 	addi	sp,sp,8
 40110d4:	f800283a 	ret

040110d8 <bytesToUInt16>:

uint16_t bytesToUInt16(byte* data)
{
  uint16_t result = data[0];
  result |= data[1] << 8;
  return result;
 40110d8:	20800043 	ldbu	r2,1(r4)
 40110dc:	20c00003 	ldbu	r3,0(r4)
 40110e0:	1004923a 	slli	r2,r2,8
}
 40110e4:	10c4b03a 	or	r2,r2,r3
 40110e8:	f800283a 	ret

040110ec <readBytes>:
{
	writeBytes((byte*)&data,2);
}

void readBytes(byte* data, int dataLen)
{
 40110ec:	defffc04 	addi	sp,sp,-16
 40110f0:	dc800215 	stw	r18,8(sp)
 40110f4:	dc400115 	stw	r17,4(sp)
 40110f8:	dc000015 	stw	r16,0(sp)
 40110fc:	dfc00315 	stw	ra,12(sp)
 4011100:	2023883a 	mov	r17,r4
 4011104:	2825883a 	mov	r18,r5
	int byteIndex;
	for(byteIndex = 0; byteIndex < dataLen; byteIndex++)
 4011108:	2021883a 	mov	r16,r4
 401110c:	8445c83a 	sub	r2,r16,r17
 4011110:	1480040e 	bge	r2,r18,4011124 <readBytes+0x38>
}
*/

byte readByte()
{
	return alt_getchar();
 4011114:	40113a40 	call	40113a4 <alt_getchar>
void readBytes(byte* data, int dataLen)
{
	int byteIndex;
	for(byteIndex = 0; byteIndex < dataLen; byteIndex++)
	{
		data[byteIndex] = readByte();
 4011118:	80800005 	stb	r2,0(r16)
 401111c:	84000044 	addi	r16,r16,1
 4011120:	003ffa06 	br	401110c <_gp+0xffff35e0>
	}
}
 4011124:	dfc00317 	ldw	ra,12(sp)
 4011128:	dc800217 	ldw	r18,8(sp)
 401112c:	dc400117 	ldw	r17,4(sp)
 4011130:	dc000017 	ldw	r16,0(sp)
 4011134:	dec00404 	addi	sp,sp,16
 4011138:	f800283a 	ret

0401113c <writeBytes>:


// Alternative version of writeBytes that use STDIO
void writeBytes(byte* data, int dataLen)
{
 401113c:	defffd04 	addi	sp,sp,-12
 4011140:	dc400115 	stw	r17,4(sp)
 4011144:	dc000015 	stw	r16,0(sp)
 4011148:	dfc00215 	stw	ra,8(sp)
 401114c:	2023883a 	mov	r17,r4
 4011150:	2821883a 	mov	r16,r5
	int remainingBytes = dataLen;
	while (remainingBytes > 0)
 4011154:	0400060e 	bge	zero,r16,4011170 <writeBytes+0x34>
	{
		int writtenBytes = write(STDOUT_FILENO, data, remainingBytes);
 4011158:	800d883a 	mov	r6,r16
 401115c:	880b883a 	mov	r5,r17
 4011160:	01000044 	movi	r4,1
 4011164:	40116580 	call	4011658 <write>
		remainingBytes -= writtenBytes;
 4011168:	80a1c83a 	sub	r16,r16,r2
 401116c:	003ff906 	br	4011154 <_gp+0xffff3628>
	}
}
 4011170:	dfc00217 	ldw	ra,8(sp)
 4011174:	dc400117 	ldw	r17,4(sp)
 4011178:	dc000017 	ldw	r16,0(sp)
 401117c:	dec00304 	addi	sp,sp,12
 4011180:	f800283a 	ret

04011184 <writeUInt16>:
  result |= data[1] << 8;
  return result;
}

void writeUInt16(uint16_t data)
{
 4011184:	defffe04 	addi	sp,sp,-8
 4011188:	d900000d 	sth	r4,0(sp)
	writeBytes((byte*)&data,2);
 401118c:	01400084 	movi	r5,2
 4011190:	d809883a 	mov	r4,sp
  result |= data[1] << 8;
  return result;
}

void writeUInt16(uint16_t data)
{
 4011194:	dfc00115 	stw	ra,4(sp)
	writeBytes((byte*)&data,2);
 4011198:	401113c0 	call	401113c <writeBytes>
}
 401119c:	dfc00117 	ldw	ra,4(sp)
 40111a0:	dec00204 	addi	sp,sp,8
 40111a4:	f800283a 	ret

040111a8 <readByte>:
	}
}
*/

byte readByte()
{
 40111a8:	deffff04 	addi	sp,sp,-4
 40111ac:	dfc00015 	stw	ra,0(sp)
	return alt_getchar();
 40111b0:	40113a40 	call	40113a4 <alt_getchar>
}
 40111b4:	dfc00017 	ldw	ra,0(sp)
 40111b8:	dec00104 	addi	sp,sp,4
 40111bc:	f800283a 	ret

040111c0 <writeByte>:

void writeByte(byte data)
{
	alt_putchar(data);
 40111c0:	21003fcc 	andi	r4,r4,255
 40111c4:	40116481 	jmpi	4011648 <alt_putchar>

040111c8 <__divsi3>:
 40111c8:	20001b16 	blt	r4,zero,4011238 <__divsi3+0x70>
 40111cc:	000f883a 	mov	r7,zero
 40111d0:	28001616 	blt	r5,zero,401122c <__divsi3+0x64>
 40111d4:	200d883a 	mov	r6,r4
 40111d8:	29001a2e 	bgeu	r5,r4,4011244 <__divsi3+0x7c>
 40111dc:	00800804 	movi	r2,32
 40111e0:	00c00044 	movi	r3,1
 40111e4:	00000106 	br	40111ec <__divsi3+0x24>
 40111e8:	10000d26 	beq	r2,zero,4011220 <__divsi3+0x58>
 40111ec:	294b883a 	add	r5,r5,r5
 40111f0:	10bfffc4 	addi	r2,r2,-1
 40111f4:	18c7883a 	add	r3,r3,r3
 40111f8:	293ffb36 	bltu	r5,r4,40111e8 <_gp+0xffff36bc>
 40111fc:	0005883a 	mov	r2,zero
 4011200:	18000726 	beq	r3,zero,4011220 <__divsi3+0x58>
 4011204:	0005883a 	mov	r2,zero
 4011208:	31400236 	bltu	r6,r5,4011214 <__divsi3+0x4c>
 401120c:	314dc83a 	sub	r6,r6,r5
 4011210:	10c4b03a 	or	r2,r2,r3
 4011214:	1806d07a 	srli	r3,r3,1
 4011218:	280ad07a 	srli	r5,r5,1
 401121c:	183ffa1e 	bne	r3,zero,4011208 <_gp+0xffff36dc>
 4011220:	38000126 	beq	r7,zero,4011228 <__divsi3+0x60>
 4011224:	0085c83a 	sub	r2,zero,r2
 4011228:	f800283a 	ret
 401122c:	014bc83a 	sub	r5,zero,r5
 4011230:	39c0005c 	xori	r7,r7,1
 4011234:	003fe706 	br	40111d4 <_gp+0xffff36a8>
 4011238:	0109c83a 	sub	r4,zero,r4
 401123c:	01c00044 	movi	r7,1
 4011240:	003fe306 	br	40111d0 <_gp+0xffff36a4>
 4011244:	00c00044 	movi	r3,1
 4011248:	003fee06 	br	4011204 <_gp+0xffff36d8>

0401124c <__modsi3>:
 401124c:	20001716 	blt	r4,zero,40112ac <__modsi3+0x60>
 4011250:	000f883a 	mov	r7,zero
 4011254:	2005883a 	mov	r2,r4
 4011258:	28001216 	blt	r5,zero,40112a4 <__modsi3+0x58>
 401125c:	2900162e 	bgeu	r5,r4,40112b8 <__modsi3+0x6c>
 4011260:	01800804 	movi	r6,32
 4011264:	00c00044 	movi	r3,1
 4011268:	00000106 	br	4011270 <__modsi3+0x24>
 401126c:	30000a26 	beq	r6,zero,4011298 <__modsi3+0x4c>
 4011270:	294b883a 	add	r5,r5,r5
 4011274:	31bfffc4 	addi	r6,r6,-1
 4011278:	18c7883a 	add	r3,r3,r3
 401127c:	293ffb36 	bltu	r5,r4,401126c <_gp+0xffff3740>
 4011280:	18000526 	beq	r3,zero,4011298 <__modsi3+0x4c>
 4011284:	1806d07a 	srli	r3,r3,1
 4011288:	11400136 	bltu	r2,r5,4011290 <__modsi3+0x44>
 401128c:	1145c83a 	sub	r2,r2,r5
 4011290:	280ad07a 	srli	r5,r5,1
 4011294:	183ffb1e 	bne	r3,zero,4011284 <_gp+0xffff3758>
 4011298:	38000126 	beq	r7,zero,40112a0 <__modsi3+0x54>
 401129c:	0085c83a 	sub	r2,zero,r2
 40112a0:	f800283a 	ret
 40112a4:	014bc83a 	sub	r5,zero,r5
 40112a8:	003fec06 	br	401125c <_gp+0xffff3730>
 40112ac:	0109c83a 	sub	r4,zero,r4
 40112b0:	01c00044 	movi	r7,1
 40112b4:	003fe706 	br	4011254 <_gp+0xffff3728>
 40112b8:	00c00044 	movi	r3,1
 40112bc:	003ff106 	br	4011284 <_gp+0xffff3758>

040112c0 <__udivsi3>:
 40112c0:	200d883a 	mov	r6,r4
 40112c4:	2900152e 	bgeu	r5,r4,401131c <__udivsi3+0x5c>
 40112c8:	28001416 	blt	r5,zero,401131c <__udivsi3+0x5c>
 40112cc:	00800804 	movi	r2,32
 40112d0:	00c00044 	movi	r3,1
 40112d4:	00000206 	br	40112e0 <__udivsi3+0x20>
 40112d8:	10000e26 	beq	r2,zero,4011314 <__udivsi3+0x54>
 40112dc:	28000516 	blt	r5,zero,40112f4 <__udivsi3+0x34>
 40112e0:	294b883a 	add	r5,r5,r5
 40112e4:	10bfffc4 	addi	r2,r2,-1
 40112e8:	18c7883a 	add	r3,r3,r3
 40112ec:	293ffa36 	bltu	r5,r4,40112d8 <_gp+0xffff37ac>
 40112f0:	18000826 	beq	r3,zero,4011314 <__udivsi3+0x54>
 40112f4:	0005883a 	mov	r2,zero
 40112f8:	31400236 	bltu	r6,r5,4011304 <__udivsi3+0x44>
 40112fc:	314dc83a 	sub	r6,r6,r5
 4011300:	10c4b03a 	or	r2,r2,r3
 4011304:	1806d07a 	srli	r3,r3,1
 4011308:	280ad07a 	srli	r5,r5,1
 401130c:	183ffa1e 	bne	r3,zero,40112f8 <_gp+0xffff37cc>
 4011310:	f800283a 	ret
 4011314:	0005883a 	mov	r2,zero
 4011318:	f800283a 	ret
 401131c:	00c00044 	movi	r3,1
 4011320:	003ff406 	br	40112f4 <_gp+0xffff37c8>

04011324 <__umodsi3>:
 4011324:	2005883a 	mov	r2,r4
 4011328:	2900122e 	bgeu	r5,r4,4011374 <__umodsi3+0x50>
 401132c:	28001116 	blt	r5,zero,4011374 <__umodsi3+0x50>
 4011330:	01800804 	movi	r6,32
 4011334:	00c00044 	movi	r3,1
 4011338:	00000206 	br	4011344 <__umodsi3+0x20>
 401133c:	30000c26 	beq	r6,zero,4011370 <__umodsi3+0x4c>
 4011340:	28000516 	blt	r5,zero,4011358 <__umodsi3+0x34>
 4011344:	294b883a 	add	r5,r5,r5
 4011348:	31bfffc4 	addi	r6,r6,-1
 401134c:	18c7883a 	add	r3,r3,r3
 4011350:	293ffa36 	bltu	r5,r4,401133c <_gp+0xffff3810>
 4011354:	18000626 	beq	r3,zero,4011370 <__umodsi3+0x4c>
 4011358:	1806d07a 	srli	r3,r3,1
 401135c:	11400136 	bltu	r2,r5,4011364 <__umodsi3+0x40>
 4011360:	1145c83a 	sub	r2,r2,r5
 4011364:	280ad07a 	srli	r5,r5,1
 4011368:	183ffb1e 	bne	r3,zero,4011358 <_gp+0xffff382c>
 401136c:	f800283a 	ret
 4011370:	f800283a 	ret
 4011374:	00c00044 	movi	r3,1
 4011378:	003ff706 	br	4011358 <_gp+0xffff382c>

0401137c <__mulsi3>:
 401137c:	0005883a 	mov	r2,zero
 4011380:	20000726 	beq	r4,zero,40113a0 <__mulsi3+0x24>
 4011384:	20c0004c 	andi	r3,r4,1
 4011388:	2008d07a 	srli	r4,r4,1
 401138c:	18000126 	beq	r3,zero,4011394 <__mulsi3+0x18>
 4011390:	1145883a 	add	r2,r2,r5
 4011394:	294b883a 	add	r5,r5,r5
 4011398:	203ffa1e 	bne	r4,zero,4011384 <_gp+0xffff3858>
 401139c:	f800283a 	ret
 40113a0:	f800283a 	ret

040113a4 <alt_getchar>:
 40113a4:	d0a00817 	ldw	r2,-32736(gp)
 40113a8:	11000117 	ldw	r4,4(r2)
 40113ac:	4011fbc1 	jmpi	4011fbc <getc>

040113b0 <alt_load>:
 40113b0:	deffff04 	addi	sp,sp,-4
 40113b4:	01010074 	movhi	r4,1025
 40113b8:	01410074 	movhi	r5,1025
 40113bc:	dfc00015 	stw	ra,0(sp)
 40113c0:	21144b04 	addi	r4,r4,20780
 40113c4:	2956d704 	addi	r5,r5,23388
 40113c8:	21400a26 	beq	r4,r5,40113f4 <alt_load+0x44>
 40113cc:	00810074 	movhi	r2,1025
 40113d0:	1096d704 	addi	r2,r2,23388
 40113d4:	20800726 	beq	r4,r2,40113f4 <alt_load+0x44>
 40113d8:	21800104 	addi	r6,r4,4
 40113dc:	118dc83a 	sub	r6,r2,r6
 40113e0:	300cd0ba 	srli	r6,r6,2
 40113e4:	31800044 	addi	r6,r6,1
 40113e8:	318d883a 	add	r6,r6,r6
 40113ec:	318d883a 	add	r6,r6,r6
 40113f0:	40120c00 	call	40120c0 <memcpy>
 40113f4:	01010074 	movhi	r4,1025
 40113f8:	01410074 	movhi	r5,1025
 40113fc:	21000804 	addi	r4,r4,32
 4011400:	29400804 	addi	r5,r5,32
 4011404:	21400a26 	beq	r4,r5,4011430 <alt_load+0x80>
 4011408:	00810074 	movhi	r2,1025
 401140c:	10800804 	addi	r2,r2,32
 4011410:	20800726 	beq	r4,r2,4011430 <alt_load+0x80>
 4011414:	21800104 	addi	r6,r4,4
 4011418:	118dc83a 	sub	r6,r2,r6
 401141c:	300cd0ba 	srli	r6,r6,2
 4011420:	31800044 	addi	r6,r6,1
 4011424:	318d883a 	add	r6,r6,r6
 4011428:	318d883a 	add	r6,r6,r6
 401142c:	40120c00 	call	40120c0 <memcpy>
 4011430:	01010074 	movhi	r4,1025
 4011434:	01410074 	movhi	r5,1025
 4011438:	21128504 	addi	r4,r4,18964
 401143c:	29528504 	addi	r5,r5,18964
 4011440:	21400a26 	beq	r4,r5,401146c <alt_load+0xbc>
 4011444:	00810074 	movhi	r2,1025
 4011448:	10944b04 	addi	r2,r2,20780
 401144c:	20800726 	beq	r4,r2,401146c <alt_load+0xbc>
 4011450:	21800104 	addi	r6,r4,4
 4011454:	118dc83a 	sub	r6,r2,r6
 4011458:	300cd0ba 	srli	r6,r6,2
 401145c:	31800044 	addi	r6,r6,1
 4011460:	318d883a 	add	r6,r6,r6
 4011464:	318d883a 	add	r6,r6,r6
 4011468:	40120c00 	call	40120c0 <memcpy>
 401146c:	40119c00 	call	40119c0 <alt_dcache_flush_all>
 4011470:	dfc00017 	ldw	ra,0(sp)
 4011474:	dec00104 	addi	sp,sp,4
 4011478:	4011a381 	jmpi	4011a38 <alt_icache_flush_all>

0401147c <alt_main>:
 401147c:	defffe04 	addi	sp,sp,-8
 4011480:	0009883a 	mov	r4,zero
 4011484:	dfc00115 	stw	ra,4(sp)
 4011488:	dc000015 	stw	r16,0(sp)
 401148c:	40117680 	call	4011768 <alt_irq_init>
 4011490:	40117880 	call	4011788 <alt_sys_init>
 4011494:	01810074 	movhi	r6,1025
 4011498:	31944304 	addi	r6,r6,20748
 401149c:	300b883a 	mov	r5,r6
 40114a0:	3009883a 	mov	r4,r6
 40114a4:	4011a3c0 	call	4011a3c <alt_io_redirect>
 40114a8:	d1a29817 	ldw	r6,-30112(gp)
 40114ac:	d1629917 	ldw	r5,-30108(gp)
 40114b0:	d1229a17 	ldw	r4,-30104(gp)
 40114b4:	4010a440 	call	4010a44 <main>
 40114b8:	01000044 	movi	r4,1
 40114bc:	1021883a 	mov	r16,r2
 40114c0:	40119000 	call	4011900 <close>
 40114c4:	8009883a 	mov	r4,r16
 40114c8:	4011f140 	call	4011f14 <exit>

040114cc <alt_printf>:
 40114cc:	defff304 	addi	sp,sp,-52
 40114d0:	dc000015 	stw	r16,0(sp)
 40114d4:	2021883a 	mov	r16,r4
 40114d8:	dfc00915 	stw	ra,36(sp)
 40114dc:	df000815 	stw	fp,32(sp)
 40114e0:	ddc00715 	stw	r23,28(sp)
 40114e4:	dd800615 	stw	r22,24(sp)
 40114e8:	dd400515 	stw	r21,20(sp)
 40114ec:	dd000415 	stw	r20,16(sp)
 40114f0:	dcc00315 	stw	r19,12(sp)
 40114f4:	dc800215 	stw	r18,8(sp)
 40114f8:	dc400115 	stw	r17,4(sp)
 40114fc:	d9400a15 	stw	r5,40(sp)
 4011500:	d9800b15 	stw	r6,44(sp)
 4011504:	d9c00c15 	stw	r7,48(sp)
 4011508:	04400944 	movi	r17,37
 401150c:	dcc00a04 	addi	r19,sp,40
 4011510:	054018c4 	movi	r21,99
 4011514:	05801e04 	movi	r22,120
 4011518:	048003c4 	movi	r18,15
 401151c:	05000244 	movi	r20,9
 4011520:	81000007 	ldb	r4,0(r16)
 4011524:	20000526 	beq	r4,zero,401153c <alt_printf+0x70>
 4011528:	24401026 	beq	r4,r17,401156c <alt_printf+0xa0>
 401152c:	84000044 	addi	r16,r16,1
 4011530:	40116480 	call	4011648 <alt_putchar>
 4011534:	81000007 	ldb	r4,0(r16)
 4011538:	203ffb1e 	bne	r4,zero,4011528 <_gp+0xffff39fc>
 401153c:	dfc00917 	ldw	ra,36(sp)
 4011540:	df000817 	ldw	fp,32(sp)
 4011544:	ddc00717 	ldw	r23,28(sp)
 4011548:	dd800617 	ldw	r22,24(sp)
 401154c:	dd400517 	ldw	r21,20(sp)
 4011550:	dd000417 	ldw	r20,16(sp)
 4011554:	dcc00317 	ldw	r19,12(sp)
 4011558:	dc800217 	ldw	r18,8(sp)
 401155c:	dc400117 	ldw	r17,4(sp)
 4011560:	dc000017 	ldw	r16,0(sp)
 4011564:	dec00d04 	addi	sp,sp,52
 4011568:	f800283a 	ret
 401156c:	80800047 	ldb	r2,1(r16)
 4011570:	84000084 	addi	r16,r16,2
 4011574:	103ff126 	beq	r2,zero,401153c <_gp+0xffff3a10>
 4011578:	14402926 	beq	r2,r17,4011620 <alt_printf+0x154>
 401157c:	15402b26 	beq	r2,r21,401162c <alt_printf+0x160>
 4011580:	15800b26 	beq	r2,r22,40115b0 <alt_printf+0xe4>
 4011584:	00c01cc4 	movi	r3,115
 4011588:	10ffe51e 	bne	r2,r3,4011520 <_gp+0xffff39f4>
 401158c:	9f000017 	ldw	fp,0(r19)
 4011590:	9cc00104 	addi	r19,r19,4
 4011594:	e1000007 	ldb	r4,0(fp)
 4011598:	203fe126 	beq	r4,zero,4011520 <_gp+0xffff39f4>
 401159c:	e7000044 	addi	fp,fp,1
 40115a0:	40116480 	call	4011648 <alt_putchar>
 40115a4:	e1000007 	ldb	r4,0(fp)
 40115a8:	203ffc1e 	bne	r4,zero,401159c <_gp+0xffff3a70>
 40115ac:	003fdc06 	br	4011520 <_gp+0xffff39f4>
 40115b0:	9dc00017 	ldw	r23,0(r19)
 40115b4:	9cc00104 	addi	r19,r19,4
 40115b8:	b8002026 	beq	r23,zero,401163c <alt_printf+0x170>
 40115bc:	b8bc002c 	andhi	r2,r23,61440
 40115c0:	07000704 	movi	fp,28
 40115c4:	1000101e 	bne	r2,zero,4011608 <alt_printf+0x13c>
 40115c8:	e73fff04 	addi	fp,fp,-4
 40115cc:	9704983a 	sll	r2,r18,fp
 40115d0:	15c4703a 	and	r2,r2,r23
 40115d4:	103ffc26 	beq	r2,zero,40115c8 <_gp+0xffff3a9c>
 40115d8:	e03fd116 	blt	fp,zero,4011520 <_gp+0xffff39f4>
 40115dc:	9708983a 	sll	r4,r18,fp
 40115e0:	25c8703a 	and	r4,r4,r23
 40115e4:	2708d83a 	srl	r4,r4,fp
 40115e8:	a1000b36 	bltu	r20,r4,4011618 <alt_printf+0x14c>
 40115ec:	21000c04 	addi	r4,r4,48
 40115f0:	21003fcc 	andi	r4,r4,255
 40115f4:	2100201c 	xori	r4,r4,128
 40115f8:	e73fff04 	addi	fp,fp,-4
 40115fc:	213fe004 	addi	r4,r4,-128
 4011600:	40116480 	call	4011648 <alt_putchar>
 4011604:	e03fc616 	blt	fp,zero,4011520 <_gp+0xffff39f4>
 4011608:	9708983a 	sll	r4,r18,fp
 401160c:	25c8703a 	and	r4,r4,r23
 4011610:	2708d83a 	srl	r4,r4,fp
 4011614:	a13ff52e 	bgeu	r20,r4,40115ec <_gp+0xffff3ac0>
 4011618:	210015c4 	addi	r4,r4,87
 401161c:	003ff406 	br	40115f0 <_gp+0xffff3ac4>
 4011620:	8809883a 	mov	r4,r17
 4011624:	40116480 	call	4011648 <alt_putchar>
 4011628:	003fbd06 	br	4011520 <_gp+0xffff39f4>
 401162c:	99000017 	ldw	r4,0(r19)
 4011630:	9cc00104 	addi	r19,r19,4
 4011634:	40116480 	call	4011648 <alt_putchar>
 4011638:	003fb906 	br	4011520 <_gp+0xffff39f4>
 401163c:	01000c04 	movi	r4,48
 4011640:	40116480 	call	4011648 <alt_putchar>
 4011644:	003fb606 	br	4011520 <_gp+0xffff39f4>

04011648 <alt_putchar>:
 4011648:	d0a00817 	ldw	r2,-32736(gp)
 401164c:	11400217 	ldw	r5,8(r2)
 4011650:	40122a81 	jmpi	40122a8 <putc>

04011654 <usleep>:
 4011654:	40118781 	jmpi	4011878 <alt_busy_sleep>

04011658 <write>:
 4011658:	defffa04 	addi	sp,sp,-24
 401165c:	dfc00515 	stw	ra,20(sp)
 4011660:	dd000415 	stw	r20,16(sp)
 4011664:	dcc00315 	stw	r19,12(sp)
 4011668:	dc800215 	stw	r18,8(sp)
 401166c:	dc400115 	stw	r17,4(sp)
 4011670:	dc000015 	stw	r16,0(sp)
 4011674:	20003116 	blt	r4,zero,401173c <write+0xe4>
 4011678:	2827883a 	mov	r19,r5
 401167c:	04010074 	movhi	r16,1025
 4011680:	01400304 	movi	r5,12
 4011684:	2025883a 	mov	r18,r4
 4011688:	3029883a 	mov	r20,r6
 401168c:	84145604 	addi	r16,r16,20824
 4011690:	401137c0 	call	401137c <__mulsi3>
 4011694:	80a3883a 	add	r17,r16,r2
 4011698:	88002826 	beq	r17,zero,401173c <write+0xe4>
 401169c:	88800217 	ldw	r2,8(r17)
 40116a0:	108000cc 	andi	r2,r2,3
 40116a4:	10001526 	beq	r2,zero,40116fc <write+0xa4>
 40116a8:	01400304 	movi	r5,12
 40116ac:	9009883a 	mov	r4,r18
 40116b0:	401137c0 	call	401137c <__mulsi3>
 40116b4:	8085883a 	add	r2,r16,r2
 40116b8:	10800017 	ldw	r2,0(r2)
 40116bc:	10800617 	ldw	r2,24(r2)
 40116c0:	10000e26 	beq	r2,zero,40116fc <write+0xa4>
 40116c4:	a00d883a 	mov	r6,r20
 40116c8:	980b883a 	mov	r5,r19
 40116cc:	8809883a 	mov	r4,r17
 40116d0:	103ee83a 	callr	r2
 40116d4:	1021883a 	mov	r16,r2
 40116d8:	10001116 	blt	r2,zero,4011720 <write+0xc8>
 40116dc:	dfc00517 	ldw	ra,20(sp)
 40116e0:	dd000417 	ldw	r20,16(sp)
 40116e4:	dcc00317 	ldw	r19,12(sp)
 40116e8:	dc800217 	ldw	r18,8(sp)
 40116ec:	dc400117 	ldw	r17,4(sp)
 40116f0:	dc000017 	ldw	r16,0(sp)
 40116f4:	dec00604 	addi	sp,sp,24
 40116f8:	f800283a 	ret
 40116fc:	d0a00617 	ldw	r2,-32744(gp)
 4011700:	10000526 	beq	r2,zero,4011718 <write+0xc0>
 4011704:	103ee83a 	callr	r2
 4011708:	00c00344 	movi	r3,13
 401170c:	10c00015 	stw	r3,0(r2)
 4011710:	00bfffc4 	movi	r2,-1
 4011714:	003ff106 	br	40116dc <_gp+0xffff3bb0>
 4011718:	d0a29b04 	addi	r2,gp,-30100
 401171c:	003ffa06 	br	4011708 <_gp+0xffff3bdc>
 4011720:	d0a00617 	ldw	r2,-32744(gp)
 4011724:	10000c26 	beq	r2,zero,4011758 <write+0x100>
 4011728:	103ee83a 	callr	r2
 401172c:	0421c83a 	sub	r16,zero,r16
 4011730:	14000015 	stw	r16,0(r2)
 4011734:	00bfffc4 	movi	r2,-1
 4011738:	003fe806 	br	40116dc <_gp+0xffff3bb0>
 401173c:	d0a00617 	ldw	r2,-32744(gp)
 4011740:	10000726 	beq	r2,zero,4011760 <write+0x108>
 4011744:	103ee83a 	callr	r2
 4011748:	00c01444 	movi	r3,81
 401174c:	10c00015 	stw	r3,0(r2)
 4011750:	00bfffc4 	movi	r2,-1
 4011754:	003fe106 	br	40116dc <_gp+0xffff3bb0>
 4011758:	d0a29b04 	addi	r2,gp,-30100
 401175c:	003ff306 	br	401172c <_gp+0xffff3c00>
 4011760:	d0a29b04 	addi	r2,gp,-30100
 4011764:	003ff806 	br	4011748 <_gp+0xffff3c1c>

04011768 <alt_irq_init>:
 4011768:	deffff04 	addi	sp,sp,-4
 401176c:	dfc00015 	stw	ra,0(sp)
 4011770:	4011d600 	call	4011d60 <altera_nios2_gen2_irq_init>
 4011774:	00800044 	movi	r2,1
 4011778:	1001703a 	wrctl	status,r2
 401177c:	dfc00017 	ldw	ra,0(sp)
 4011780:	dec00104 	addi	sp,sp,4
 4011784:	f800283a 	ret

04011788 <alt_sys_init>:
 4011788:	01010074 	movhi	r4,1025
 401178c:	21144b04 	addi	r4,r4,20780
 4011790:	d1600204 	addi	r5,gp,-32760
 4011794:	40119cc1 	jmpi	40119cc <alt_dev_llist_insert>

04011798 <altera_avalon_jtag_uart_read_fd>:
 4011798:	20800017 	ldw	r2,0(r4)
 401179c:	21c00217 	ldw	r7,8(r4)
 40117a0:	11000a04 	addi	r4,r2,40
 40117a4:	40117b81 	jmpi	40117b8 <altera_avalon_jtag_uart_read>

040117a8 <altera_avalon_jtag_uart_write_fd>:
 40117a8:	20800017 	ldw	r2,0(r4)
 40117ac:	21c00217 	ldw	r7,8(r4)
 40117b0:	11000a04 	addi	r4,r2,40
 40117b4:	40118441 	jmpi	4011844 <altera_avalon_jtag_uart_write>

040117b8 <altera_avalon_jtag_uart_read>:
 40117b8:	298d883a 	add	r6,r5,r6
 40117bc:	22000017 	ldw	r8,0(r4)
 40117c0:	39d0000c 	andi	r7,r7,16384
 40117c4:	29801d2e 	bgeu	r5,r6,401183c <altera_avalon_jtag_uart_read+0x84>
 40117c8:	2807883a 	mov	r3,r5
 40117cc:	38000c1e 	bne	r7,zero,4011800 <altera_avalon_jtag_uart_read+0x48>
 40117d0:	41000037 	ldwio	r4,0(r8)
 40117d4:	21e0000c 	andi	r7,r4,32768
 40117d8:	18800044 	addi	r2,r3,1
 40117dc:	3800041e 	bne	r7,zero,40117f0 <altera_avalon_jtag_uart_read+0x38>
 40117e0:	28fffb26 	beq	r5,r3,40117d0 <_gp+0xffff3ca4>
 40117e4:	1805883a 	mov	r2,r3
 40117e8:	1145c83a 	sub	r2,r2,r5
 40117ec:	f800283a 	ret
 40117f0:	19000005 	stb	r4,0(r3)
 40117f4:	11800b2e 	bgeu	r2,r6,4011824 <altera_avalon_jtag_uart_read+0x6c>
 40117f8:	1007883a 	mov	r3,r2
 40117fc:	003ff406 	br	40117d0 <_gp+0xffff3ca4>
 4011800:	41000037 	ldwio	r4,0(r8)
 4011804:	21e0000c 	andi	r7,r4,32768
 4011808:	18800044 	addi	r2,r3,1
 401180c:	38000826 	beq	r7,zero,4011830 <altera_avalon_jtag_uart_read+0x78>
 4011810:	19000005 	stb	r4,0(r3)
 4011814:	1007883a 	mov	r3,r2
 4011818:	11bff91e 	bne	r2,r6,4011800 <_gp+0xffff3cd4>
 401181c:	29bff21e 	bne	r5,r6,40117e8 <_gp+0xffff3cbc>
 4011820:	00000406 	br	4011834 <altera_avalon_jtag_uart_read+0x7c>
 4011824:	28bff01e 	bne	r5,r2,40117e8 <_gp+0xffff3cbc>
 4011828:	00bffec4 	movi	r2,-5
 401182c:	f800283a 	ret
 4011830:	28ffec1e 	bne	r5,r3,40117e4 <_gp+0xffff3cb8>
 4011834:	00bffd44 	movi	r2,-11
 4011838:	f800283a 	ret
 401183c:	383ffa26 	beq	r7,zero,4011828 <_gp+0xffff3cfc>
 4011840:	003ffc06 	br	4011834 <_gp+0xffff3d08>

04011844 <altera_avalon_jtag_uart_write>:
 4011844:	21c00017 	ldw	r7,0(r4)
 4011848:	3005883a 	mov	r2,r6
 401184c:	298d883a 	add	r6,r5,r6
 4011850:	39000104 	addi	r4,r7,4
 4011854:	2980072e 	bgeu	r5,r6,4011874 <altera_avalon_jtag_uart_write+0x30>
 4011858:	20c00037 	ldwio	r3,0(r4)
 401185c:	18ffffec 	andhi	r3,r3,65535
 4011860:	183ffd26 	beq	r3,zero,4011858 <_gp+0xffff3d2c>
 4011864:	28c00007 	ldb	r3,0(r5)
 4011868:	38c00035 	stwio	r3,0(r7)
 401186c:	29400044 	addi	r5,r5,1
 4011870:	003ff806 	br	4011854 <_gp+0xffff3d28>
 4011874:	f800283a 	ret

04011878 <alt_busy_sleep>:
 4011878:	0142e8f4 	movhi	r5,2979
 401187c:	defffe04 	addi	sp,sp,-8
 4011880:	297a2e84 	addi	r5,r5,-5958
 4011884:	dc000015 	stw	r16,0(sp)
 4011888:	dfc00115 	stw	ra,4(sp)
 401188c:	2021883a 	mov	r16,r4
 4011890:	40112c00 	call	40112c0 <__udivsi3>
 4011894:	10001426 	beq	r2,zero,40118e8 <alt_busy_sleep+0x70>
 4011898:	01600034 	movhi	r5,32768
 401189c:	013d1774 	movhi	r4,62557
 40118a0:	297fffc4 	addi	r5,r5,-1
 40118a4:	2105d184 	addi	r4,r4,5958
 40118a8:	0007883a 	mov	r3,zero
 40118ac:	297fffc4 	addi	r5,r5,-1
 40118b0:	283ffe1e 	bne	r5,zero,40118ac <_gp+0xffff3d80>
 40118b4:	18c00044 	addi	r3,r3,1
 40118b8:	8121883a 	add	r16,r16,r4
 40118bc:	18bffb16 	blt	r3,r2,40118ac <_gp+0xffff3d80>
 40118c0:	014002c4 	movi	r5,11
 40118c4:	8009883a 	mov	r4,r16
 40118c8:	401137c0 	call	401137c <__mulsi3>
 40118cc:	10bfffc4 	addi	r2,r2,-1
 40118d0:	103ffe1e 	bne	r2,zero,40118cc <_gp+0xffff3da0>
 40118d4:	0005883a 	mov	r2,zero
 40118d8:	dfc00117 	ldw	ra,4(sp)
 40118dc:	dc000017 	ldw	r16,0(sp)
 40118e0:	dec00204 	addi	sp,sp,8
 40118e4:	f800283a 	ret
 40118e8:	014002c4 	movi	r5,11
 40118ec:	8009883a 	mov	r4,r16
 40118f0:	401137c0 	call	401137c <__mulsi3>
 40118f4:	10bfffc4 	addi	r2,r2,-1
 40118f8:	00bffe16 	blt	zero,r2,40118f4 <_gp+0xffff3dc8>
 40118fc:	003ff506 	br	40118d4 <_gp+0xffff3da8>

04011900 <close>:
 4011900:	defffd04 	addi	sp,sp,-12
 4011904:	dfc00215 	stw	ra,8(sp)
 4011908:	dc400115 	stw	r17,4(sp)
 401190c:	dc000015 	stw	r16,0(sp)
 4011910:	20002016 	blt	r4,zero,4011994 <close+0x94>
 4011914:	01400304 	movi	r5,12
 4011918:	2021883a 	mov	r16,r4
 401191c:	401137c0 	call	401137c <__mulsi3>
 4011920:	01010074 	movhi	r4,1025
 4011924:	21145604 	addi	r4,r4,20824
 4011928:	2089883a 	add	r4,r4,r2
 401192c:	20001926 	beq	r4,zero,4011994 <close+0x94>
 4011930:	20800017 	ldw	r2,0(r4)
 4011934:	10800417 	ldw	r2,16(r2)
 4011938:	10000b26 	beq	r2,zero,4011968 <close+0x68>
 401193c:	103ee83a 	callr	r2
 4011940:	8009883a 	mov	r4,r16
 4011944:	1023883a 	mov	r17,r2
 4011948:	4011d040 	call	4011d04 <alt_release_fd>
 401194c:	0005883a 	mov	r2,zero
 4011950:	88000916 	blt	r17,zero,4011978 <close+0x78>
 4011954:	dfc00217 	ldw	ra,8(sp)
 4011958:	dc400117 	ldw	r17,4(sp)
 401195c:	dc000017 	ldw	r16,0(sp)
 4011960:	dec00304 	addi	sp,sp,12
 4011964:	f800283a 	ret
 4011968:	8009883a 	mov	r4,r16
 401196c:	4011d040 	call	4011d04 <alt_release_fd>
 4011970:	0005883a 	mov	r2,zero
 4011974:	003ff706 	br	4011954 <_gp+0xffff3e28>
 4011978:	d0a00617 	ldw	r2,-32744(gp)
 401197c:	10000c26 	beq	r2,zero,40119b0 <close+0xb0>
 4011980:	103ee83a 	callr	r2
 4011984:	0463c83a 	sub	r17,zero,r17
 4011988:	14400015 	stw	r17,0(r2)
 401198c:	00bfffc4 	movi	r2,-1
 4011990:	003ff006 	br	4011954 <_gp+0xffff3e28>
 4011994:	d0a00617 	ldw	r2,-32744(gp)
 4011998:	10000726 	beq	r2,zero,40119b8 <close+0xb8>
 401199c:	103ee83a 	callr	r2
 40119a0:	00c01444 	movi	r3,81
 40119a4:	10c00015 	stw	r3,0(r2)
 40119a8:	00bfffc4 	movi	r2,-1
 40119ac:	003fe906 	br	4011954 <_gp+0xffff3e28>
 40119b0:	d0a29b04 	addi	r2,gp,-30100
 40119b4:	003ff306 	br	4011984 <_gp+0xffff3e58>
 40119b8:	d0a29b04 	addi	r2,gp,-30100
 40119bc:	003ff806 	br	40119a0 <_gp+0xffff3e74>

040119c0 <alt_dcache_flush_all>:
 40119c0:	f800283a 	ret

040119c4 <alt_dev_null_write>:
 40119c4:	3005883a 	mov	r2,r6
 40119c8:	f800283a 	ret

040119cc <alt_dev_llist_insert>:
 40119cc:	20000a26 	beq	r4,zero,40119f8 <alt_dev_llist_insert+0x2c>
 40119d0:	20800217 	ldw	r2,8(r4)
 40119d4:	10000826 	beq	r2,zero,40119f8 <alt_dev_llist_insert+0x2c>
 40119d8:	28c00017 	ldw	r3,0(r5)
 40119dc:	21400115 	stw	r5,4(r4)
 40119e0:	0005883a 	mov	r2,zero
 40119e4:	20c00015 	stw	r3,0(r4)
 40119e8:	28c00017 	ldw	r3,0(r5)
 40119ec:	19000115 	stw	r4,4(r3)
 40119f0:	29000015 	stw	r4,0(r5)
 40119f4:	f800283a 	ret
 40119f8:	d0a00617 	ldw	r2,-32744(gp)
 40119fc:	10000926 	beq	r2,zero,4011a24 <alt_dev_llist_insert+0x58>
 4011a00:	deffff04 	addi	sp,sp,-4
 4011a04:	dfc00015 	stw	ra,0(sp)
 4011a08:	103ee83a 	callr	r2
 4011a0c:	00c00584 	movi	r3,22
 4011a10:	10c00015 	stw	r3,0(r2)
 4011a14:	00bffa84 	movi	r2,-22
 4011a18:	dfc00017 	ldw	ra,0(sp)
 4011a1c:	dec00104 	addi	sp,sp,4
 4011a20:	f800283a 	ret
 4011a24:	d0a29b04 	addi	r2,gp,-30100
 4011a28:	00c00584 	movi	r3,22
 4011a2c:	10c00015 	stw	r3,0(r2)
 4011a30:	00bffa84 	movi	r2,-22
 4011a34:	f800283a 	ret

04011a38 <alt_icache_flush_all>:
 4011a38:	f800283a 	ret

04011a3c <alt_io_redirect>:
 4011a3c:	defffb04 	addi	sp,sp,-20
 4011a40:	dcc00315 	stw	r19,12(sp)
 4011a44:	dc800215 	stw	r18,8(sp)
 4011a48:	2827883a 	mov	r19,r5
 4011a4c:	3025883a 	mov	r18,r6
 4011a50:	01400044 	movi	r5,1
 4011a54:	01807fc4 	movi	r6,511
 4011a58:	dfc00415 	stw	ra,16(sp)
 4011a5c:	dc400115 	stw	r17,4(sp)
 4011a60:	dc000015 	stw	r16,0(sp)
 4011a64:	4011b7c0 	call	4011b7c <open>
 4011a68:	10000f16 	blt	r2,zero,4011aa8 <alt_io_redirect+0x6c>
 4011a6c:	1009883a 	mov	r4,r2
 4011a70:	01400304 	movi	r5,12
 4011a74:	04410074 	movhi	r17,1025
 4011a78:	8c545604 	addi	r17,r17,20824
 4011a7c:	1021883a 	mov	r16,r2
 4011a80:	401137c0 	call	401137c <__mulsi3>
 4011a84:	8885883a 	add	r2,r17,r2
 4011a88:	11400017 	ldw	r5,0(r2)
 4011a8c:	10c00217 	ldw	r3,8(r2)
 4011a90:	8009883a 	mov	r4,r16
 4011a94:	89400315 	stw	r5,12(r17)
 4011a98:	10800117 	ldw	r2,4(r2)
 4011a9c:	88c00515 	stw	r3,20(r17)
 4011aa0:	88800415 	stw	r2,16(r17)
 4011aa4:	4011d040 	call	4011d04 <alt_release_fd>
 4011aa8:	01807fc4 	movi	r6,511
 4011aac:	000b883a 	mov	r5,zero
 4011ab0:	9809883a 	mov	r4,r19
 4011ab4:	4011b7c0 	call	4011b7c <open>
 4011ab8:	1021883a 	mov	r16,r2
 4011abc:	10000e16 	blt	r2,zero,4011af8 <alt_io_redirect+0xbc>
 4011ac0:	1009883a 	mov	r4,r2
 4011ac4:	01400304 	movi	r5,12
 4011ac8:	04410074 	movhi	r17,1025
 4011acc:	401137c0 	call	401137c <__mulsi3>
 4011ad0:	8c545604 	addi	r17,r17,20824
 4011ad4:	8885883a 	add	r2,r17,r2
 4011ad8:	11400017 	ldw	r5,0(r2)
 4011adc:	10c00217 	ldw	r3,8(r2)
 4011ae0:	8009883a 	mov	r4,r16
 4011ae4:	89400015 	stw	r5,0(r17)
 4011ae8:	10800117 	ldw	r2,4(r2)
 4011aec:	88c00215 	stw	r3,8(r17)
 4011af0:	88800115 	stw	r2,4(r17)
 4011af4:	4011d040 	call	4011d04 <alt_release_fd>
 4011af8:	01807fc4 	movi	r6,511
 4011afc:	01400044 	movi	r5,1
 4011b00:	9009883a 	mov	r4,r18
 4011b04:	4011b7c0 	call	4011b7c <open>
 4011b08:	1021883a 	mov	r16,r2
 4011b0c:	10001416 	blt	r2,zero,4011b60 <alt_io_redirect+0x124>
 4011b10:	1009883a 	mov	r4,r2
 4011b14:	01400304 	movi	r5,12
 4011b18:	04410074 	movhi	r17,1025
 4011b1c:	401137c0 	call	401137c <__mulsi3>
 4011b20:	8c545604 	addi	r17,r17,20824
 4011b24:	8885883a 	add	r2,r17,r2
 4011b28:	11400017 	ldw	r5,0(r2)
 4011b2c:	10c00217 	ldw	r3,8(r2)
 4011b30:	8009883a 	mov	r4,r16
 4011b34:	89400615 	stw	r5,24(r17)
 4011b38:	10800117 	ldw	r2,4(r2)
 4011b3c:	88c00815 	stw	r3,32(r17)
 4011b40:	88800715 	stw	r2,28(r17)
 4011b44:	dfc00417 	ldw	ra,16(sp)
 4011b48:	dcc00317 	ldw	r19,12(sp)
 4011b4c:	dc800217 	ldw	r18,8(sp)
 4011b50:	dc400117 	ldw	r17,4(sp)
 4011b54:	dc000017 	ldw	r16,0(sp)
 4011b58:	dec00504 	addi	sp,sp,20
 4011b5c:	4011d041 	jmpi	4011d04 <alt_release_fd>
 4011b60:	dfc00417 	ldw	ra,16(sp)
 4011b64:	dcc00317 	ldw	r19,12(sp)
 4011b68:	dc800217 	ldw	r18,8(sp)
 4011b6c:	dc400117 	ldw	r17,4(sp)
 4011b70:	dc000017 	ldw	r16,0(sp)
 4011b74:	dec00504 	addi	sp,sp,20
 4011b78:	f800283a 	ret

04011b7c <open>:
 4011b7c:	defffa04 	addi	sp,sp,-24
 4011b80:	dc000015 	stw	r16,0(sp)
 4011b84:	2821883a 	mov	r16,r5
 4011b88:	d1600204 	addi	r5,gp,-32760
 4011b8c:	dc800215 	stw	r18,8(sp)
 4011b90:	dc400115 	stw	r17,4(sp)
 4011b94:	dfc00515 	stw	ra,20(sp)
 4011b98:	dd000415 	stw	r20,16(sp)
 4011b9c:	dcc00315 	stw	r19,12(sp)
 4011ba0:	2023883a 	mov	r17,r4
 4011ba4:	3025883a 	mov	r18,r6
 4011ba8:	4011d680 	call	4011d68 <alt_find_dev>
 4011bac:	10004a26 	beq	r2,zero,4011cd8 <open+0x15c>
 4011bb0:	1009883a 	mov	r4,r2
 4011bb4:	1029883a 	mov	r20,r2
 4011bb8:	4011e8c0 	call	4011e8c <alt_get_fd>
 4011bbc:	1027883a 	mov	r19,r2
 4011bc0:	1000090e 	bge	r2,zero,4011be8 <open+0x6c>
 4011bc4:	04e1c83a 	sub	r16,zero,r19
 4011bc8:	9809883a 	mov	r4,r19
 4011bcc:	4011d040 	call	4011d04 <alt_release_fd>
 4011bd0:	d0a00617 	ldw	r2,-32744(gp)
 4011bd4:	10004726 	beq	r2,zero,4011cf4 <open+0x178>
 4011bd8:	103ee83a 	callr	r2
 4011bdc:	14000015 	stw	r16,0(r2)
 4011be0:	00bfffc4 	movi	r2,-1
 4011be4:	00003206 	br	4011cb0 <open+0x134>
 4011be8:	01400304 	movi	r5,12
 4011bec:	9809883a 	mov	r4,r19
 4011bf0:	401137c0 	call	401137c <__mulsi3>
 4011bf4:	01500034 	movhi	r5,16384
 4011bf8:	00c10074 	movhi	r3,1025
 4011bfc:	297fffc4 	addi	r5,r5,-1
 4011c00:	18d45604 	addi	r3,r3,20824
 4011c04:	814a703a 	and	r5,r16,r5
 4011c08:	1889883a 	add	r4,r3,r2
 4011c0c:	29500034 	orhi	r5,r5,16384
 4011c10:	d2600117 	ldw	r9,-32764(gp)
 4011c14:	22000017 	ldw	r8,0(r4)
 4011c18:	21400215 	stw	r5,8(r4)
 4011c1c:	19800204 	addi	r6,r3,8
 4011c20:	000b883a 	mov	r5,zero
 4011c24:	00000306 	br	4011c34 <open+0xb8>
 4011c28:	18c00304 	addi	r3,r3,12
 4011c2c:	31800304 	addi	r6,r6,12
 4011c30:	49401636 	bltu	r9,r5,4011c8c <open+0x110>
 4011c34:	19c00017 	ldw	r7,0(r3)
 4011c38:	29400044 	addi	r5,r5,1
 4011c3c:	3a3ffa1e 	bne	r7,r8,4011c28 <_gp+0xffff40fc>
 4011c40:	30800017 	ldw	r2,0(r6)
 4011c44:	103ff80e 	bge	r2,zero,4011c28 <_gp+0xffff40fc>
 4011c48:	20fff726 	beq	r4,r3,4011c28 <_gp+0xffff40fc>
 4011c4c:	04000344 	movi	r16,13
 4011c50:	003fdd06 	br	4011bc8 <_gp+0xffff409c>
 4011c54:	1009883a 	mov	r4,r2
 4011c58:	4011e8c0 	call	4011e8c <alt_get_fd>
 4011c5c:	1027883a 	mov	r19,r2
 4011c60:	103fd816 	blt	r2,zero,4011bc4 <_gp+0xffff4098>
 4011c64:	9809883a 	mov	r4,r19
 4011c68:	01400304 	movi	r5,12
 4011c6c:	401137c0 	call	401137c <__mulsi3>
 4011c70:	01010074 	movhi	r4,1025
 4011c74:	21145604 	addi	r4,r4,20824
 4011c78:	2089883a 	add	r4,r4,r2
 4011c7c:	00900034 	movhi	r2,16384
 4011c80:	10bfffc4 	addi	r2,r2,-1
 4011c84:	8084703a 	and	r2,r16,r2
 4011c88:	20800215 	stw	r2,8(r4)
 4011c8c:	a0800317 	ldw	r2,12(r20)
 4011c90:	10000f26 	beq	r2,zero,4011cd0 <open+0x154>
 4011c94:	900f883a 	mov	r7,r18
 4011c98:	800d883a 	mov	r6,r16
 4011c9c:	880b883a 	mov	r5,r17
 4011ca0:	103ee83a 	callr	r2
 4011ca4:	1007883a 	mov	r3,r2
 4011ca8:	9805883a 	mov	r2,r19
 4011cac:	18001316 	blt	r3,zero,4011cfc <open+0x180>
 4011cb0:	dfc00517 	ldw	ra,20(sp)
 4011cb4:	dd000417 	ldw	r20,16(sp)
 4011cb8:	dcc00317 	ldw	r19,12(sp)
 4011cbc:	dc800217 	ldw	r18,8(sp)
 4011cc0:	dc400117 	ldw	r17,4(sp)
 4011cc4:	dc000017 	ldw	r16,0(sp)
 4011cc8:	dec00604 	addi	sp,sp,24
 4011ccc:	f800283a 	ret
 4011cd0:	9805883a 	mov	r2,r19
 4011cd4:	003ff606 	br	4011cb0 <_gp+0xffff4184>
 4011cd8:	8809883a 	mov	r4,r17
 4011cdc:	4011de00 	call	4011de0 <alt_find_file>
 4011ce0:	1029883a 	mov	r20,r2
 4011ce4:	103fdb1e 	bne	r2,zero,4011c54 <_gp+0xffff4128>
 4011ce8:	040004c4 	movi	r16,19
 4011cec:	04ffffc4 	movi	r19,-1
 4011cf0:	003fb506 	br	4011bc8 <_gp+0xffff409c>
 4011cf4:	d0a29b04 	addi	r2,gp,-30100
 4011cf8:	003fb806 	br	4011bdc <_gp+0xffff40b0>
 4011cfc:	00e1c83a 	sub	r16,zero,r3
 4011d00:	003fb106 	br	4011bc8 <_gp+0xffff409c>

04011d04 <alt_release_fd>:
 4011d04:	00c00084 	movi	r3,2
 4011d08:	1900140e 	bge	r3,r4,4011d5c <alt_release_fd+0x58>
 4011d0c:	defffd04 	addi	sp,sp,-12
 4011d10:	dc400115 	stw	r17,4(sp)
 4011d14:	01400304 	movi	r5,12
 4011d18:	04410074 	movhi	r17,1025
 4011d1c:	dfc00215 	stw	ra,8(sp)
 4011d20:	dc000015 	stw	r16,0(sp)
 4011d24:	8c545604 	addi	r17,r17,20824
 4011d28:	2021883a 	mov	r16,r4
 4011d2c:	401137c0 	call	401137c <__mulsi3>
 4011d30:	8885883a 	add	r2,r17,r2
 4011d34:	01400304 	movi	r5,12
 4011d38:	8009883a 	mov	r4,r16
 4011d3c:	10000215 	stw	zero,8(r2)
 4011d40:	401137c0 	call	401137c <__mulsi3>
 4011d44:	8885883a 	add	r2,r17,r2
 4011d48:	10000015 	stw	zero,0(r2)
 4011d4c:	dfc00217 	ldw	ra,8(sp)
 4011d50:	dc400117 	ldw	r17,4(sp)
 4011d54:	dc000017 	ldw	r16,0(sp)
 4011d58:	dec00304 	addi	sp,sp,12
 4011d5c:	f800283a 	ret

04011d60 <altera_nios2_gen2_irq_init>:
 4011d60:	000170fa 	wrctl	ienable,zero
 4011d64:	f800283a 	ret

04011d68 <alt_find_dev>:
 4011d68:	defffb04 	addi	sp,sp,-20
 4011d6c:	dc000015 	stw	r16,0(sp)
 4011d70:	2c000017 	ldw	r16,0(r5)
 4011d74:	dc400115 	stw	r17,4(sp)
 4011d78:	2823883a 	mov	r17,r5
 4011d7c:	dcc00315 	stw	r19,12(sp)
 4011d80:	dfc00415 	stw	ra,16(sp)
 4011d84:	dc800215 	stw	r18,8(sp)
 4011d88:	2027883a 	mov	r19,r4
 4011d8c:	40123f80 	call	40123f8 <strlen>
 4011d90:	8c000b26 	beq	r17,r16,4011dc0 <alt_find_dev+0x58>
 4011d94:	14800044 	addi	r18,r2,1
 4011d98:	00000206 	br	4011da4 <alt_find_dev+0x3c>
 4011d9c:	84000017 	ldw	r16,0(r16)
 4011da0:	8c000726 	beq	r17,r16,4011dc0 <alt_find_dev+0x58>
 4011da4:	81000217 	ldw	r4,8(r16)
 4011da8:	900d883a 	mov	r6,r18
 4011dac:	980b883a 	mov	r5,r19
 4011db0:	40120440 	call	4012044 <memcmp>
 4011db4:	103ff91e 	bne	r2,zero,4011d9c <_gp+0xffff4270>
 4011db8:	8005883a 	mov	r2,r16
 4011dbc:	00000106 	br	4011dc4 <alt_find_dev+0x5c>
 4011dc0:	0005883a 	mov	r2,zero
 4011dc4:	dfc00417 	ldw	ra,16(sp)
 4011dc8:	dcc00317 	ldw	r19,12(sp)
 4011dcc:	dc800217 	ldw	r18,8(sp)
 4011dd0:	dc400117 	ldw	r17,4(sp)
 4011dd4:	dc000017 	ldw	r16,0(sp)
 4011dd8:	dec00504 	addi	sp,sp,20
 4011ddc:	f800283a 	ret

04011de0 <alt_find_file>:
 4011de0:	defffa04 	addi	sp,sp,-24
 4011de4:	dc000015 	stw	r16,0(sp)
 4011de8:	d4200417 	ldw	r16,-32752(gp)
 4011dec:	dd000415 	stw	r20,16(sp)
 4011df0:	dfc00515 	stw	ra,20(sp)
 4011df4:	dcc00315 	stw	r19,12(sp)
 4011df8:	dc800215 	stw	r18,8(sp)
 4011dfc:	dc400115 	stw	r17,4(sp)
 4011e00:	d5200404 	addi	r20,gp,-32752
 4011e04:	85001626 	beq	r16,r20,4011e60 <alt_find_file+0x80>
 4011e08:	2025883a 	mov	r18,r4
 4011e0c:	04c00bc4 	movi	r19,47
 4011e10:	00000806 	br	4011e34 <alt_find_file+0x54>
 4011e14:	9185883a 	add	r2,r18,r6
 4011e18:	10800007 	ldb	r2,0(r2)
 4011e1c:	14c00126 	beq	r2,r19,4011e24 <alt_find_file+0x44>
 4011e20:	1000021e 	bne	r2,zero,4011e2c <alt_find_file+0x4c>
 4011e24:	40120440 	call	4012044 <memcmp>
 4011e28:	10001626 	beq	r2,zero,4011e84 <alt_find_file+0xa4>
 4011e2c:	84000017 	ldw	r16,0(r16)
 4011e30:	85000b26 	beq	r16,r20,4011e60 <alt_find_file+0x80>
 4011e34:	84400217 	ldw	r17,8(r16)
 4011e38:	8809883a 	mov	r4,r17
 4011e3c:	40123f80 	call	40123f8 <strlen>
 4011e40:	100d883a 	mov	r6,r2
 4011e44:	8885883a 	add	r2,r17,r2
 4011e48:	10bfffc7 	ldb	r2,-1(r2)
 4011e4c:	900b883a 	mov	r5,r18
 4011e50:	8809883a 	mov	r4,r17
 4011e54:	14ffef1e 	bne	r2,r19,4011e14 <_gp+0xffff42e8>
 4011e58:	31bfffc4 	addi	r6,r6,-1
 4011e5c:	003fed06 	br	4011e14 <_gp+0xffff42e8>
 4011e60:	0005883a 	mov	r2,zero
 4011e64:	dfc00517 	ldw	ra,20(sp)
 4011e68:	dd000417 	ldw	r20,16(sp)
 4011e6c:	dcc00317 	ldw	r19,12(sp)
 4011e70:	dc800217 	ldw	r18,8(sp)
 4011e74:	dc400117 	ldw	r17,4(sp)
 4011e78:	dc000017 	ldw	r16,0(sp)
 4011e7c:	dec00604 	addi	sp,sp,24
 4011e80:	f800283a 	ret
 4011e84:	8005883a 	mov	r2,r16
 4011e88:	003ff606 	br	4011e64 <_gp+0xffff4338>

04011e8c <alt_get_fd>:
 4011e8c:	defffc04 	addi	sp,sp,-16
 4011e90:	dc400115 	stw	r17,4(sp)
 4011e94:	04410074 	movhi	r17,1025
 4011e98:	8c545604 	addi	r17,r17,20824
 4011e9c:	dc000015 	stw	r16,0(sp)
 4011ea0:	dfc00315 	stw	ra,12(sp)
 4011ea4:	dc800215 	stw	r18,8(sp)
 4011ea8:	0021883a 	mov	r16,zero
 4011eac:	8805883a 	mov	r2,r17
 4011eb0:	01400804 	movi	r5,32
 4011eb4:	00000206 	br	4011ec0 <alt_get_fd+0x34>
 4011eb8:	84000044 	addi	r16,r16,1
 4011ebc:	81401326 	beq	r16,r5,4011f0c <alt_get_fd+0x80>
 4011ec0:	10c00017 	ldw	r3,0(r2)
 4011ec4:	10800304 	addi	r2,r2,12
 4011ec8:	183ffb1e 	bne	r3,zero,4011eb8 <_gp+0xffff438c>
 4011ecc:	2025883a 	mov	r18,r4
 4011ed0:	01400304 	movi	r5,12
 4011ed4:	8009883a 	mov	r4,r16
 4011ed8:	401137c0 	call	401137c <__mulsi3>
 4011edc:	8885883a 	add	r2,r17,r2
 4011ee0:	14800015 	stw	r18,0(r2)
 4011ee4:	d0a00117 	ldw	r2,-32764(gp)
 4011ee8:	1400010e 	bge	r2,r16,4011ef0 <alt_get_fd+0x64>
 4011eec:	d4200115 	stw	r16,-32764(gp)
 4011ef0:	8005883a 	mov	r2,r16
 4011ef4:	dfc00317 	ldw	ra,12(sp)
 4011ef8:	dc800217 	ldw	r18,8(sp)
 4011efc:	dc400117 	ldw	r17,4(sp)
 4011f00:	dc000017 	ldw	r16,0(sp)
 4011f04:	dec00404 	addi	sp,sp,16
 4011f08:	f800283a 	ret
 4011f0c:	043ffa04 	movi	r16,-24
 4011f10:	003ff706 	br	4011ef0 <_gp+0xffff43c4>

04011f14 <exit>:
 4011f14:	defffe04 	addi	sp,sp,-8
 4011f18:	000b883a 	mov	r5,zero
 4011f1c:	dc000015 	stw	r16,0(sp)
 4011f20:	dfc00115 	stw	ra,4(sp)
 4011f24:	2021883a 	mov	r16,r4
 4011f28:	401273c0 	call	401273c <__call_exitprocs>
 4011f2c:	00810074 	movhi	r2,1025
 4011f30:	1096d204 	addi	r2,r2,23368
 4011f34:	11000017 	ldw	r4,0(r2)
 4011f38:	20800f17 	ldw	r2,60(r4)
 4011f3c:	10000126 	beq	r2,zero,4011f44 <exit+0x30>
 4011f40:	103ee83a 	callr	r2
 4011f44:	8009883a 	mov	r4,r16
 4011f48:	40146680 	call	4014668 <_exit>

04011f4c <_getc_r>:
 4011f4c:	defffd04 	addi	sp,sp,-12
 4011f50:	dc000115 	stw	r16,4(sp)
 4011f54:	dfc00215 	stw	ra,8(sp)
 4011f58:	2021883a 	mov	r16,r4
 4011f5c:	20000226 	beq	r4,zero,4011f68 <_getc_r+0x1c>
 4011f60:	20800e17 	ldw	r2,56(r4)
 4011f64:	10000c26 	beq	r2,zero,4011f98 <_getc_r+0x4c>
 4011f68:	28800117 	ldw	r2,4(r5)
 4011f6c:	10bfffc4 	addi	r2,r2,-1
 4011f70:	28800115 	stw	r2,4(r5)
 4011f74:	10000c16 	blt	r2,zero,4011fa8 <_getc_r+0x5c>
 4011f78:	28800017 	ldw	r2,0(r5)
 4011f7c:	10c00044 	addi	r3,r2,1
 4011f80:	28c00015 	stw	r3,0(r5)
 4011f84:	10800003 	ldbu	r2,0(r2)
 4011f88:	dfc00217 	ldw	ra,8(sp)
 4011f8c:	dc000117 	ldw	r16,4(sp)
 4011f90:	dec00304 	addi	sp,sp,12
 4011f94:	f800283a 	ret
 4011f98:	d9400015 	stw	r5,0(sp)
 4011f9c:	4012ec40 	call	4012ec4 <__sinit>
 4011fa0:	d9400017 	ldw	r5,0(sp)
 4011fa4:	003ff006 	br	4011f68 <_gp+0xffff443c>
 4011fa8:	8009883a 	mov	r4,r16
 4011fac:	dfc00217 	ldw	ra,8(sp)
 4011fb0:	dc000117 	ldw	r16,4(sp)
 4011fb4:	dec00304 	addi	sp,sp,12
 4011fb8:	40123701 	jmpi	4012370 <__srget_r>

04011fbc <getc>:
 4011fbc:	00810074 	movhi	r2,1025
 4011fc0:	defffd04 	addi	sp,sp,-12
 4011fc4:	1096d304 	addi	r2,r2,23372
 4011fc8:	dc400115 	stw	r17,4(sp)
 4011fcc:	14400017 	ldw	r17,0(r2)
 4011fd0:	dc000015 	stw	r16,0(sp)
 4011fd4:	dfc00215 	stw	ra,8(sp)
 4011fd8:	2021883a 	mov	r16,r4
 4011fdc:	88000226 	beq	r17,zero,4011fe8 <getc+0x2c>
 4011fe0:	88800e17 	ldw	r2,56(r17)
 4011fe4:	10000d26 	beq	r2,zero,401201c <getc+0x60>
 4011fe8:	80800117 	ldw	r2,4(r16)
 4011fec:	10bfffc4 	addi	r2,r2,-1
 4011ff0:	80800115 	stw	r2,4(r16)
 4011ff4:	10000c16 	blt	r2,zero,4012028 <getc+0x6c>
 4011ff8:	80800017 	ldw	r2,0(r16)
 4011ffc:	10c00044 	addi	r3,r2,1
 4012000:	80c00015 	stw	r3,0(r16)
 4012004:	10800003 	ldbu	r2,0(r2)
 4012008:	dfc00217 	ldw	ra,8(sp)
 401200c:	dc400117 	ldw	r17,4(sp)
 4012010:	dc000017 	ldw	r16,0(sp)
 4012014:	dec00304 	addi	sp,sp,12
 4012018:	f800283a 	ret
 401201c:	8809883a 	mov	r4,r17
 4012020:	4012ec40 	call	4012ec4 <__sinit>
 4012024:	003ff006 	br	4011fe8 <_gp+0xffff44bc>
 4012028:	800b883a 	mov	r5,r16
 401202c:	8809883a 	mov	r4,r17
 4012030:	dfc00217 	ldw	ra,8(sp)
 4012034:	dc400117 	ldw	r17,4(sp)
 4012038:	dc000017 	ldw	r16,0(sp)
 401203c:	dec00304 	addi	sp,sp,12
 4012040:	40123701 	jmpi	4012370 <__srget_r>

04012044 <memcmp>:
 4012044:	01c000c4 	movi	r7,3
 4012048:	3980192e 	bgeu	r7,r6,40120b0 <memcmp+0x6c>
 401204c:	2144b03a 	or	r2,r4,r5
 4012050:	11c4703a 	and	r2,r2,r7
 4012054:	10000f26 	beq	r2,zero,4012094 <memcmp+0x50>
 4012058:	20800003 	ldbu	r2,0(r4)
 401205c:	28c00003 	ldbu	r3,0(r5)
 4012060:	10c0151e 	bne	r2,r3,40120b8 <memcmp+0x74>
 4012064:	31bfff84 	addi	r6,r6,-2
 4012068:	01ffffc4 	movi	r7,-1
 401206c:	00000406 	br	4012080 <memcmp+0x3c>
 4012070:	20800003 	ldbu	r2,0(r4)
 4012074:	28c00003 	ldbu	r3,0(r5)
 4012078:	31bfffc4 	addi	r6,r6,-1
 401207c:	10c00e1e 	bne	r2,r3,40120b8 <memcmp+0x74>
 4012080:	21000044 	addi	r4,r4,1
 4012084:	29400044 	addi	r5,r5,1
 4012088:	31fff91e 	bne	r6,r7,4012070 <_gp+0xffff4544>
 401208c:	0005883a 	mov	r2,zero
 4012090:	f800283a 	ret
 4012094:	20c00017 	ldw	r3,0(r4)
 4012098:	28800017 	ldw	r2,0(r5)
 401209c:	18bfee1e 	bne	r3,r2,4012058 <_gp+0xffff452c>
 40120a0:	31bfff04 	addi	r6,r6,-4
 40120a4:	21000104 	addi	r4,r4,4
 40120a8:	29400104 	addi	r5,r5,4
 40120ac:	39bff936 	bltu	r7,r6,4012094 <_gp+0xffff4568>
 40120b0:	303fe91e 	bne	r6,zero,4012058 <_gp+0xffff452c>
 40120b4:	003ff506 	br	401208c <_gp+0xffff4560>
 40120b8:	10c5c83a 	sub	r2,r2,r3
 40120bc:	f800283a 	ret

040120c0 <memcpy>:
 40120c0:	defffd04 	addi	sp,sp,-12
 40120c4:	dfc00215 	stw	ra,8(sp)
 40120c8:	dc400115 	stw	r17,4(sp)
 40120cc:	dc000015 	stw	r16,0(sp)
 40120d0:	00c003c4 	movi	r3,15
 40120d4:	2005883a 	mov	r2,r4
 40120d8:	1980452e 	bgeu	r3,r6,40121f0 <memcpy+0x130>
 40120dc:	2906b03a 	or	r3,r5,r4
 40120e0:	18c000cc 	andi	r3,r3,3
 40120e4:	1800441e 	bne	r3,zero,40121f8 <memcpy+0x138>
 40120e8:	347ffc04 	addi	r17,r6,-16
 40120ec:	8822d13a 	srli	r17,r17,4
 40120f0:	28c00104 	addi	r3,r5,4
 40120f4:	23400104 	addi	r13,r4,4
 40120f8:	8820913a 	slli	r16,r17,4
 40120fc:	2b000204 	addi	r12,r5,8
 4012100:	22c00204 	addi	r11,r4,8
 4012104:	84000504 	addi	r16,r16,20
 4012108:	2a800304 	addi	r10,r5,12
 401210c:	22400304 	addi	r9,r4,12
 4012110:	2c21883a 	add	r16,r5,r16
 4012114:	2811883a 	mov	r8,r5
 4012118:	200f883a 	mov	r7,r4
 401211c:	41000017 	ldw	r4,0(r8)
 4012120:	1fc00017 	ldw	ra,0(r3)
 4012124:	63c00017 	ldw	r15,0(r12)
 4012128:	39000015 	stw	r4,0(r7)
 401212c:	53800017 	ldw	r14,0(r10)
 4012130:	6fc00015 	stw	ra,0(r13)
 4012134:	5bc00015 	stw	r15,0(r11)
 4012138:	4b800015 	stw	r14,0(r9)
 401213c:	18c00404 	addi	r3,r3,16
 4012140:	39c00404 	addi	r7,r7,16
 4012144:	42000404 	addi	r8,r8,16
 4012148:	6b400404 	addi	r13,r13,16
 401214c:	63000404 	addi	r12,r12,16
 4012150:	5ac00404 	addi	r11,r11,16
 4012154:	52800404 	addi	r10,r10,16
 4012158:	4a400404 	addi	r9,r9,16
 401215c:	1c3fef1e 	bne	r3,r16,401211c <_gp+0xffff45f0>
 4012160:	89c00044 	addi	r7,r17,1
 4012164:	380e913a 	slli	r7,r7,4
 4012168:	310003cc 	andi	r4,r6,15
 401216c:	02c000c4 	movi	r11,3
 4012170:	11c7883a 	add	r3,r2,r7
 4012174:	29cb883a 	add	r5,r5,r7
 4012178:	5900212e 	bgeu	r11,r4,4012200 <memcpy+0x140>
 401217c:	1813883a 	mov	r9,r3
 4012180:	2811883a 	mov	r8,r5
 4012184:	200f883a 	mov	r7,r4
 4012188:	42800017 	ldw	r10,0(r8)
 401218c:	4a400104 	addi	r9,r9,4
 4012190:	39ffff04 	addi	r7,r7,-4
 4012194:	4abfff15 	stw	r10,-4(r9)
 4012198:	42000104 	addi	r8,r8,4
 401219c:	59fffa36 	bltu	r11,r7,4012188 <_gp+0xffff465c>
 40121a0:	213fff04 	addi	r4,r4,-4
 40121a4:	2008d0ba 	srli	r4,r4,2
 40121a8:	318000cc 	andi	r6,r6,3
 40121ac:	21000044 	addi	r4,r4,1
 40121b0:	2109883a 	add	r4,r4,r4
 40121b4:	2109883a 	add	r4,r4,r4
 40121b8:	1907883a 	add	r3,r3,r4
 40121bc:	290b883a 	add	r5,r5,r4
 40121c0:	30000626 	beq	r6,zero,40121dc <memcpy+0x11c>
 40121c4:	198d883a 	add	r6,r3,r6
 40121c8:	29c00003 	ldbu	r7,0(r5)
 40121cc:	18c00044 	addi	r3,r3,1
 40121d0:	29400044 	addi	r5,r5,1
 40121d4:	19ffffc5 	stb	r7,-1(r3)
 40121d8:	19bffb1e 	bne	r3,r6,40121c8 <_gp+0xffff469c>
 40121dc:	dfc00217 	ldw	ra,8(sp)
 40121e0:	dc400117 	ldw	r17,4(sp)
 40121e4:	dc000017 	ldw	r16,0(sp)
 40121e8:	dec00304 	addi	sp,sp,12
 40121ec:	f800283a 	ret
 40121f0:	2007883a 	mov	r3,r4
 40121f4:	003ff206 	br	40121c0 <_gp+0xffff4694>
 40121f8:	2007883a 	mov	r3,r4
 40121fc:	003ff106 	br	40121c4 <_gp+0xffff4698>
 4012200:	200d883a 	mov	r6,r4
 4012204:	003fee06 	br	40121c0 <_gp+0xffff4694>

04012208 <_putc_r>:
 4012208:	defffc04 	addi	sp,sp,-16
 401220c:	dc000215 	stw	r16,8(sp)
 4012210:	dfc00315 	stw	ra,12(sp)
 4012214:	2021883a 	mov	r16,r4
 4012218:	20000226 	beq	r4,zero,4012224 <_putc_r+0x1c>
 401221c:	20800e17 	ldw	r2,56(r4)
 4012220:	10001b26 	beq	r2,zero,4012290 <_putc_r+0x88>
 4012224:	30800217 	ldw	r2,8(r6)
 4012228:	10bfffc4 	addi	r2,r2,-1
 401222c:	30800215 	stw	r2,8(r6)
 4012230:	10000a16 	blt	r2,zero,401225c <_putc_r+0x54>
 4012234:	30800017 	ldw	r2,0(r6)
 4012238:	11400005 	stb	r5,0(r2)
 401223c:	30800017 	ldw	r2,0(r6)
 4012240:	10c00044 	addi	r3,r2,1
 4012244:	30c00015 	stw	r3,0(r6)
 4012248:	10800003 	ldbu	r2,0(r2)
 401224c:	dfc00317 	ldw	ra,12(sp)
 4012250:	dc000217 	ldw	r16,8(sp)
 4012254:	dec00404 	addi	sp,sp,16
 4012258:	f800283a 	ret
 401225c:	30c00617 	ldw	r3,24(r6)
 4012260:	10c00616 	blt	r2,r3,401227c <_putc_r+0x74>
 4012264:	30800017 	ldw	r2,0(r6)
 4012268:	00c00284 	movi	r3,10
 401226c:	11400005 	stb	r5,0(r2)
 4012270:	30800017 	ldw	r2,0(r6)
 4012274:	11400003 	ldbu	r5,0(r2)
 4012278:	28fff11e 	bne	r5,r3,4012240 <_gp+0xffff4714>
 401227c:	8009883a 	mov	r4,r16
 4012280:	dfc00317 	ldw	ra,12(sp)
 4012284:	dc000217 	ldw	r16,8(sp)
 4012288:	dec00404 	addi	sp,sp,16
 401228c:	40124901 	jmpi	4012490 <__swbuf_r>
 4012290:	d9400015 	stw	r5,0(sp)
 4012294:	d9800115 	stw	r6,4(sp)
 4012298:	4012ec40 	call	4012ec4 <__sinit>
 401229c:	d9800117 	ldw	r6,4(sp)
 40122a0:	d9400017 	ldw	r5,0(sp)
 40122a4:	003fdf06 	br	4012224 <_gp+0xffff46f8>

040122a8 <putc>:
 40122a8:	00810074 	movhi	r2,1025
 40122ac:	defffc04 	addi	sp,sp,-16
 40122b0:	1096d304 	addi	r2,r2,23372
 40122b4:	dc000115 	stw	r16,4(sp)
 40122b8:	14000017 	ldw	r16,0(r2)
 40122bc:	dc400215 	stw	r17,8(sp)
 40122c0:	dfc00315 	stw	ra,12(sp)
 40122c4:	2023883a 	mov	r17,r4
 40122c8:	80000226 	beq	r16,zero,40122d4 <putc+0x2c>
 40122cc:	80800e17 	ldw	r2,56(r16)
 40122d0:	10001a26 	beq	r2,zero,401233c <putc+0x94>
 40122d4:	28800217 	ldw	r2,8(r5)
 40122d8:	10bfffc4 	addi	r2,r2,-1
 40122dc:	28800215 	stw	r2,8(r5)
 40122e0:	10000b16 	blt	r2,zero,4012310 <putc+0x68>
 40122e4:	28800017 	ldw	r2,0(r5)
 40122e8:	14400005 	stb	r17,0(r2)
 40122ec:	28800017 	ldw	r2,0(r5)
 40122f0:	10c00044 	addi	r3,r2,1
 40122f4:	28c00015 	stw	r3,0(r5)
 40122f8:	10800003 	ldbu	r2,0(r2)
 40122fc:	dfc00317 	ldw	ra,12(sp)
 4012300:	dc400217 	ldw	r17,8(sp)
 4012304:	dc000117 	ldw	r16,4(sp)
 4012308:	dec00404 	addi	sp,sp,16
 401230c:	f800283a 	ret
 4012310:	28c00617 	ldw	r3,24(r5)
 4012314:	10c00e16 	blt	r2,r3,4012350 <putc+0xa8>
 4012318:	28800017 	ldw	r2,0(r5)
 401231c:	01000284 	movi	r4,10
 4012320:	14400005 	stb	r17,0(r2)
 4012324:	28800017 	ldw	r2,0(r5)
 4012328:	10c00003 	ldbu	r3,0(r2)
 401232c:	193ff01e 	bne	r3,r4,40122f0 <_gp+0xffff47c4>
 4012330:	280d883a 	mov	r6,r5
 4012334:	180b883a 	mov	r5,r3
 4012338:	00000706 	br	4012358 <putc+0xb0>
 401233c:	8009883a 	mov	r4,r16
 4012340:	d9400015 	stw	r5,0(sp)
 4012344:	4012ec40 	call	4012ec4 <__sinit>
 4012348:	d9400017 	ldw	r5,0(sp)
 401234c:	003fe106 	br	40122d4 <_gp+0xffff47a8>
 4012350:	280d883a 	mov	r6,r5
 4012354:	880b883a 	mov	r5,r17
 4012358:	8009883a 	mov	r4,r16
 401235c:	dfc00317 	ldw	ra,12(sp)
 4012360:	dc400217 	ldw	r17,8(sp)
 4012364:	dc000117 	ldw	r16,4(sp)
 4012368:	dec00404 	addi	sp,sp,16
 401236c:	40124901 	jmpi	4012490 <__swbuf_r>

04012370 <__srget_r>:
 4012370:	defffd04 	addi	sp,sp,-12
 4012374:	dc400115 	stw	r17,4(sp)
 4012378:	dc000015 	stw	r16,0(sp)
 401237c:	dfc00215 	stw	ra,8(sp)
 4012380:	2023883a 	mov	r17,r4
 4012384:	2821883a 	mov	r16,r5
 4012388:	20000226 	beq	r4,zero,4012394 <__srget_r+0x24>
 401238c:	20800e17 	ldw	r2,56(r4)
 4012390:	10001026 	beq	r2,zero,40123d4 <__srget_r+0x64>
 4012394:	800b883a 	mov	r5,r16
 4012398:	8809883a 	mov	r4,r17
 401239c:	4013fdc0 	call	4013fdc <__srefill_r>
 40123a0:	10000e1e 	bne	r2,zero,40123dc <__srget_r+0x6c>
 40123a4:	80c00017 	ldw	r3,0(r16)
 40123a8:	80800117 	ldw	r2,4(r16)
 40123ac:	19000044 	addi	r4,r3,1
 40123b0:	10bfffc4 	addi	r2,r2,-1
 40123b4:	80800115 	stw	r2,4(r16)
 40123b8:	81000015 	stw	r4,0(r16)
 40123bc:	18800003 	ldbu	r2,0(r3)
 40123c0:	dfc00217 	ldw	ra,8(sp)
 40123c4:	dc400117 	ldw	r17,4(sp)
 40123c8:	dc000017 	ldw	r16,0(sp)
 40123cc:	dec00304 	addi	sp,sp,12
 40123d0:	f800283a 	ret
 40123d4:	4012ec40 	call	4012ec4 <__sinit>
 40123d8:	003fee06 	br	4012394 <_gp+0xffff4868>
 40123dc:	00bfffc4 	movi	r2,-1
 40123e0:	003ff706 	br	40123c0 <_gp+0xffff4894>

040123e4 <__srget>:
 40123e4:	00810074 	movhi	r2,1025
 40123e8:	1096d304 	addi	r2,r2,23372
 40123ec:	200b883a 	mov	r5,r4
 40123f0:	11000017 	ldw	r4,0(r2)
 40123f4:	40123701 	jmpi	4012370 <__srget_r>

040123f8 <strlen>:
 40123f8:	208000cc 	andi	r2,r4,3
 40123fc:	10002026 	beq	r2,zero,4012480 <strlen+0x88>
 4012400:	20800007 	ldb	r2,0(r4)
 4012404:	10002026 	beq	r2,zero,4012488 <strlen+0x90>
 4012408:	2005883a 	mov	r2,r4
 401240c:	00000206 	br	4012418 <strlen+0x20>
 4012410:	10c00007 	ldb	r3,0(r2)
 4012414:	18001826 	beq	r3,zero,4012478 <strlen+0x80>
 4012418:	10800044 	addi	r2,r2,1
 401241c:	10c000cc 	andi	r3,r2,3
 4012420:	183ffb1e 	bne	r3,zero,4012410 <_gp+0xffff48e4>
 4012424:	10c00017 	ldw	r3,0(r2)
 4012428:	01ffbff4 	movhi	r7,65279
 401242c:	39ffbfc4 	addi	r7,r7,-257
 4012430:	00ca303a 	nor	r5,zero,r3
 4012434:	01a02074 	movhi	r6,32897
 4012438:	19c7883a 	add	r3,r3,r7
 401243c:	31a02004 	addi	r6,r6,-32640
 4012440:	1946703a 	and	r3,r3,r5
 4012444:	1986703a 	and	r3,r3,r6
 4012448:	1800091e 	bne	r3,zero,4012470 <strlen+0x78>
 401244c:	10800104 	addi	r2,r2,4
 4012450:	10c00017 	ldw	r3,0(r2)
 4012454:	19cb883a 	add	r5,r3,r7
 4012458:	00c6303a 	nor	r3,zero,r3
 401245c:	28c6703a 	and	r3,r5,r3
 4012460:	1986703a 	and	r3,r3,r6
 4012464:	183ff926 	beq	r3,zero,401244c <_gp+0xffff4920>
 4012468:	00000106 	br	4012470 <strlen+0x78>
 401246c:	10800044 	addi	r2,r2,1
 4012470:	10c00007 	ldb	r3,0(r2)
 4012474:	183ffd1e 	bne	r3,zero,401246c <_gp+0xffff4940>
 4012478:	1105c83a 	sub	r2,r2,r4
 401247c:	f800283a 	ret
 4012480:	2005883a 	mov	r2,r4
 4012484:	003fe706 	br	4012424 <_gp+0xffff48f8>
 4012488:	0005883a 	mov	r2,zero
 401248c:	f800283a 	ret

04012490 <__swbuf_r>:
 4012490:	defffb04 	addi	sp,sp,-20
 4012494:	dcc00315 	stw	r19,12(sp)
 4012498:	dc800215 	stw	r18,8(sp)
 401249c:	dc000015 	stw	r16,0(sp)
 40124a0:	dfc00415 	stw	ra,16(sp)
 40124a4:	dc400115 	stw	r17,4(sp)
 40124a8:	2025883a 	mov	r18,r4
 40124ac:	2827883a 	mov	r19,r5
 40124b0:	3021883a 	mov	r16,r6
 40124b4:	20000226 	beq	r4,zero,40124c0 <__swbuf_r+0x30>
 40124b8:	20800e17 	ldw	r2,56(r4)
 40124bc:	10004226 	beq	r2,zero,40125c8 <__swbuf_r+0x138>
 40124c0:	80800617 	ldw	r2,24(r16)
 40124c4:	8100030b 	ldhu	r4,12(r16)
 40124c8:	80800215 	stw	r2,8(r16)
 40124cc:	2080020c 	andi	r2,r4,8
 40124d0:	10003626 	beq	r2,zero,40125ac <__swbuf_r+0x11c>
 40124d4:	80c00417 	ldw	r3,16(r16)
 40124d8:	18003426 	beq	r3,zero,40125ac <__swbuf_r+0x11c>
 40124dc:	2088000c 	andi	r2,r4,8192
 40124e0:	9c403fcc 	andi	r17,r19,255
 40124e4:	10001a26 	beq	r2,zero,4012550 <__swbuf_r+0xc0>
 40124e8:	80800017 	ldw	r2,0(r16)
 40124ec:	81000517 	ldw	r4,20(r16)
 40124f0:	10c7c83a 	sub	r3,r2,r3
 40124f4:	1900200e 	bge	r3,r4,4012578 <__swbuf_r+0xe8>
 40124f8:	18c00044 	addi	r3,r3,1
 40124fc:	81000217 	ldw	r4,8(r16)
 4012500:	11400044 	addi	r5,r2,1
 4012504:	81400015 	stw	r5,0(r16)
 4012508:	213fffc4 	addi	r4,r4,-1
 401250c:	81000215 	stw	r4,8(r16)
 4012510:	14c00005 	stb	r19,0(r2)
 4012514:	80800517 	ldw	r2,20(r16)
 4012518:	10c01e26 	beq	r2,r3,4012594 <__swbuf_r+0x104>
 401251c:	8080030b 	ldhu	r2,12(r16)
 4012520:	1080004c 	andi	r2,r2,1
 4012524:	10000226 	beq	r2,zero,4012530 <__swbuf_r+0xa0>
 4012528:	00800284 	movi	r2,10
 401252c:	88801926 	beq	r17,r2,4012594 <__swbuf_r+0x104>
 4012530:	8805883a 	mov	r2,r17
 4012534:	dfc00417 	ldw	ra,16(sp)
 4012538:	dcc00317 	ldw	r19,12(sp)
 401253c:	dc800217 	ldw	r18,8(sp)
 4012540:	dc400117 	ldw	r17,4(sp)
 4012544:	dc000017 	ldw	r16,0(sp)
 4012548:	dec00504 	addi	sp,sp,20
 401254c:	f800283a 	ret
 4012550:	81401917 	ldw	r5,100(r16)
 4012554:	00b7ffc4 	movi	r2,-8193
 4012558:	21080014 	ori	r4,r4,8192
 401255c:	2884703a 	and	r2,r5,r2
 4012560:	80801915 	stw	r2,100(r16)
 4012564:	80800017 	ldw	r2,0(r16)
 4012568:	8100030d 	sth	r4,12(r16)
 401256c:	81000517 	ldw	r4,20(r16)
 4012570:	10c7c83a 	sub	r3,r2,r3
 4012574:	193fe016 	blt	r3,r4,40124f8 <_gp+0xffff49cc>
 4012578:	800b883a 	mov	r5,r16
 401257c:	9009883a 	mov	r4,r18
 4012580:	4012ad80 	call	4012ad8 <_fflush_r>
 4012584:	1000071e 	bne	r2,zero,40125a4 <__swbuf_r+0x114>
 4012588:	80800017 	ldw	r2,0(r16)
 401258c:	00c00044 	movi	r3,1
 4012590:	003fda06 	br	40124fc <_gp+0xffff49d0>
 4012594:	800b883a 	mov	r5,r16
 4012598:	9009883a 	mov	r4,r18
 401259c:	4012ad80 	call	4012ad8 <_fflush_r>
 40125a0:	103fe326 	beq	r2,zero,4012530 <_gp+0xffff4a04>
 40125a4:	00bfffc4 	movi	r2,-1
 40125a8:	003fe206 	br	4012534 <_gp+0xffff4a08>
 40125ac:	800b883a 	mov	r5,r16
 40125b0:	9009883a 	mov	r4,r18
 40125b4:	40125e80 	call	40125e8 <__swsetup_r>
 40125b8:	103ffa1e 	bne	r2,zero,40125a4 <_gp+0xffff4a78>
 40125bc:	8100030b 	ldhu	r4,12(r16)
 40125c0:	80c00417 	ldw	r3,16(r16)
 40125c4:	003fc506 	br	40124dc <_gp+0xffff49b0>
 40125c8:	4012ec40 	call	4012ec4 <__sinit>
 40125cc:	003fbc06 	br	40124c0 <_gp+0xffff4994>

040125d0 <__swbuf>:
 40125d0:	00810074 	movhi	r2,1025
 40125d4:	1096d304 	addi	r2,r2,23372
 40125d8:	280d883a 	mov	r6,r5
 40125dc:	200b883a 	mov	r5,r4
 40125e0:	11000017 	ldw	r4,0(r2)
 40125e4:	40124901 	jmpi	4012490 <__swbuf_r>

040125e8 <__swsetup_r>:
 40125e8:	00810074 	movhi	r2,1025
 40125ec:	defffd04 	addi	sp,sp,-12
 40125f0:	1096d304 	addi	r2,r2,23372
 40125f4:	dc400115 	stw	r17,4(sp)
 40125f8:	2023883a 	mov	r17,r4
 40125fc:	11000017 	ldw	r4,0(r2)
 4012600:	dc000015 	stw	r16,0(sp)
 4012604:	dfc00215 	stw	ra,8(sp)
 4012608:	2821883a 	mov	r16,r5
 401260c:	20000226 	beq	r4,zero,4012618 <__swsetup_r+0x30>
 4012610:	20800e17 	ldw	r2,56(r4)
 4012614:	10003126 	beq	r2,zero,40126dc <__swsetup_r+0xf4>
 4012618:	8080030b 	ldhu	r2,12(r16)
 401261c:	10c0020c 	andi	r3,r2,8
 4012620:	1009883a 	mov	r4,r2
 4012624:	18000f26 	beq	r3,zero,4012664 <__swsetup_r+0x7c>
 4012628:	80c00417 	ldw	r3,16(r16)
 401262c:	18001526 	beq	r3,zero,4012684 <__swsetup_r+0x9c>
 4012630:	1100004c 	andi	r4,r2,1
 4012634:	20001c1e 	bne	r4,zero,40126a8 <__swsetup_r+0xc0>
 4012638:	1080008c 	andi	r2,r2,2
 401263c:	1000291e 	bne	r2,zero,40126e4 <__swsetup_r+0xfc>
 4012640:	80800517 	ldw	r2,20(r16)
 4012644:	80800215 	stw	r2,8(r16)
 4012648:	18001c26 	beq	r3,zero,40126bc <__swsetup_r+0xd4>
 401264c:	0005883a 	mov	r2,zero
 4012650:	dfc00217 	ldw	ra,8(sp)
 4012654:	dc400117 	ldw	r17,4(sp)
 4012658:	dc000017 	ldw	r16,0(sp)
 401265c:	dec00304 	addi	sp,sp,12
 4012660:	f800283a 	ret
 4012664:	2080040c 	andi	r2,r4,16
 4012668:	10002e26 	beq	r2,zero,4012724 <__swsetup_r+0x13c>
 401266c:	2080010c 	andi	r2,r4,4
 4012670:	10001e1e 	bne	r2,zero,40126ec <__swsetup_r+0x104>
 4012674:	80c00417 	ldw	r3,16(r16)
 4012678:	20800214 	ori	r2,r4,8
 401267c:	8080030d 	sth	r2,12(r16)
 4012680:	183feb1e 	bne	r3,zero,4012630 <_gp+0xffff4b04>
 4012684:	1100a00c 	andi	r4,r2,640
 4012688:	01408004 	movi	r5,512
 401268c:	217fe826 	beq	r4,r5,4012630 <_gp+0xffff4b04>
 4012690:	800b883a 	mov	r5,r16
 4012694:	8809883a 	mov	r4,r17
 4012698:	40134d00 	call	40134d0 <__smakebuf_r>
 401269c:	8080030b 	ldhu	r2,12(r16)
 40126a0:	80c00417 	ldw	r3,16(r16)
 40126a4:	003fe206 	br	4012630 <_gp+0xffff4b04>
 40126a8:	80800517 	ldw	r2,20(r16)
 40126ac:	80000215 	stw	zero,8(r16)
 40126b0:	0085c83a 	sub	r2,zero,r2
 40126b4:	80800615 	stw	r2,24(r16)
 40126b8:	183fe41e 	bne	r3,zero,401264c <_gp+0xffff4b20>
 40126bc:	80c0030b 	ldhu	r3,12(r16)
 40126c0:	0005883a 	mov	r2,zero
 40126c4:	1900200c 	andi	r4,r3,128
 40126c8:	203fe126 	beq	r4,zero,4012650 <_gp+0xffff4b24>
 40126cc:	18c01014 	ori	r3,r3,64
 40126d0:	80c0030d 	sth	r3,12(r16)
 40126d4:	00bfffc4 	movi	r2,-1
 40126d8:	003fdd06 	br	4012650 <_gp+0xffff4b24>
 40126dc:	4012ec40 	call	4012ec4 <__sinit>
 40126e0:	003fcd06 	br	4012618 <_gp+0xffff4aec>
 40126e4:	0005883a 	mov	r2,zero
 40126e8:	003fd606 	br	4012644 <_gp+0xffff4b18>
 40126ec:	81400c17 	ldw	r5,48(r16)
 40126f0:	28000626 	beq	r5,zero,401270c <__swsetup_r+0x124>
 40126f4:	80801004 	addi	r2,r16,64
 40126f8:	28800326 	beq	r5,r2,4012708 <__swsetup_r+0x120>
 40126fc:	8809883a 	mov	r4,r17
 4012700:	40130380 	call	4013038 <_free_r>
 4012704:	8100030b 	ldhu	r4,12(r16)
 4012708:	80000c15 	stw	zero,48(r16)
 401270c:	80c00417 	ldw	r3,16(r16)
 4012710:	00bff6c4 	movi	r2,-37
 4012714:	1108703a 	and	r4,r2,r4
 4012718:	80000115 	stw	zero,4(r16)
 401271c:	80c00015 	stw	r3,0(r16)
 4012720:	003fd506 	br	4012678 <_gp+0xffff4b4c>
 4012724:	00800244 	movi	r2,9
 4012728:	88800015 	stw	r2,0(r17)
 401272c:	20801014 	ori	r2,r4,64
 4012730:	8080030d 	sth	r2,12(r16)
 4012734:	00bfffc4 	movi	r2,-1
 4012738:	003fc506 	br	4012650 <_gp+0xffff4b24>

0401273c <__call_exitprocs>:
 401273c:	defff504 	addi	sp,sp,-44
 4012740:	df000915 	stw	fp,36(sp)
 4012744:	dd400615 	stw	r21,24(sp)
 4012748:	dc800315 	stw	r18,12(sp)
 401274c:	dfc00a15 	stw	ra,40(sp)
 4012750:	ddc00815 	stw	r23,32(sp)
 4012754:	dd800715 	stw	r22,28(sp)
 4012758:	dd000515 	stw	r20,20(sp)
 401275c:	dcc00415 	stw	r19,16(sp)
 4012760:	dc400215 	stw	r17,8(sp)
 4012764:	dc000115 	stw	r16,4(sp)
 4012768:	d9000015 	stw	r4,0(sp)
 401276c:	2839883a 	mov	fp,r5
 4012770:	04800044 	movi	r18,1
 4012774:	057fffc4 	movi	r21,-1
 4012778:	00810074 	movhi	r2,1025
 401277c:	1096d204 	addi	r2,r2,23368
 4012780:	12000017 	ldw	r8,0(r2)
 4012784:	45005217 	ldw	r20,328(r8)
 4012788:	44c05204 	addi	r19,r8,328
 401278c:	a0001c26 	beq	r20,zero,4012800 <__call_exitprocs+0xc4>
 4012790:	a0800117 	ldw	r2,4(r20)
 4012794:	15ffffc4 	addi	r23,r2,-1
 4012798:	b8000d16 	blt	r23,zero,40127d0 <__call_exitprocs+0x94>
 401279c:	14000044 	addi	r16,r2,1
 40127a0:	8421883a 	add	r16,r16,r16
 40127a4:	8421883a 	add	r16,r16,r16
 40127a8:	84402004 	addi	r17,r16,128
 40127ac:	a463883a 	add	r17,r20,r17
 40127b0:	a421883a 	add	r16,r20,r16
 40127b4:	e0001e26 	beq	fp,zero,4012830 <__call_exitprocs+0xf4>
 40127b8:	80804017 	ldw	r2,256(r16)
 40127bc:	e0801c26 	beq	fp,r2,4012830 <__call_exitprocs+0xf4>
 40127c0:	bdffffc4 	addi	r23,r23,-1
 40127c4:	843fff04 	addi	r16,r16,-4
 40127c8:	8c7fff04 	addi	r17,r17,-4
 40127cc:	bd7ff91e 	bne	r23,r21,40127b4 <_gp+0xffff4c88>
 40127d0:	00800034 	movhi	r2,0
 40127d4:	10800004 	addi	r2,r2,0
 40127d8:	10000926 	beq	r2,zero,4012800 <__call_exitprocs+0xc4>
 40127dc:	a0800117 	ldw	r2,4(r20)
 40127e0:	1000301e 	bne	r2,zero,40128a4 <__call_exitprocs+0x168>
 40127e4:	a0800017 	ldw	r2,0(r20)
 40127e8:	10003226 	beq	r2,zero,40128b4 <__call_exitprocs+0x178>
 40127ec:	a009883a 	mov	r4,r20
 40127f0:	98800015 	stw	r2,0(r19)
 40127f4:	00000000 	call	0 <__alt_mem_sdram>
 40127f8:	9d000017 	ldw	r20,0(r19)
 40127fc:	a03fe41e 	bne	r20,zero,4012790 <_gp+0xffff4c64>
 4012800:	dfc00a17 	ldw	ra,40(sp)
 4012804:	df000917 	ldw	fp,36(sp)
 4012808:	ddc00817 	ldw	r23,32(sp)
 401280c:	dd800717 	ldw	r22,28(sp)
 4012810:	dd400617 	ldw	r21,24(sp)
 4012814:	dd000517 	ldw	r20,20(sp)
 4012818:	dcc00417 	ldw	r19,16(sp)
 401281c:	dc800317 	ldw	r18,12(sp)
 4012820:	dc400217 	ldw	r17,8(sp)
 4012824:	dc000117 	ldw	r16,4(sp)
 4012828:	dec00b04 	addi	sp,sp,44
 401282c:	f800283a 	ret
 4012830:	a0800117 	ldw	r2,4(r20)
 4012834:	80c00017 	ldw	r3,0(r16)
 4012838:	10bfffc4 	addi	r2,r2,-1
 401283c:	15c01426 	beq	r2,r23,4012890 <__call_exitprocs+0x154>
 4012840:	80000015 	stw	zero,0(r16)
 4012844:	183fde26 	beq	r3,zero,40127c0 <_gp+0xffff4c94>
 4012848:	95c8983a 	sll	r4,r18,r23
 401284c:	a0806217 	ldw	r2,392(r20)
 4012850:	a5800117 	ldw	r22,4(r20)
 4012854:	2084703a 	and	r2,r4,r2
 4012858:	10000b26 	beq	r2,zero,4012888 <__call_exitprocs+0x14c>
 401285c:	a0806317 	ldw	r2,396(r20)
 4012860:	2088703a 	and	r4,r4,r2
 4012864:	20000c1e 	bne	r4,zero,4012898 <__call_exitprocs+0x15c>
 4012868:	89400017 	ldw	r5,0(r17)
 401286c:	d9000017 	ldw	r4,0(sp)
 4012870:	183ee83a 	callr	r3
 4012874:	a0800117 	ldw	r2,4(r20)
 4012878:	15bfbf1e 	bne	r2,r22,4012778 <_gp+0xffff4c4c>
 401287c:	98800017 	ldw	r2,0(r19)
 4012880:	153fcf26 	beq	r2,r20,40127c0 <_gp+0xffff4c94>
 4012884:	003fbc06 	br	4012778 <_gp+0xffff4c4c>
 4012888:	183ee83a 	callr	r3
 401288c:	003ff906 	br	4012874 <_gp+0xffff4d48>
 4012890:	a5c00115 	stw	r23,4(r20)
 4012894:	003feb06 	br	4012844 <_gp+0xffff4d18>
 4012898:	89000017 	ldw	r4,0(r17)
 401289c:	183ee83a 	callr	r3
 40128a0:	003ff406 	br	4012874 <_gp+0xffff4d48>
 40128a4:	a0800017 	ldw	r2,0(r20)
 40128a8:	a027883a 	mov	r19,r20
 40128ac:	1029883a 	mov	r20,r2
 40128b0:	003fb606 	br	401278c <_gp+0xffff4c60>
 40128b4:	0005883a 	mov	r2,zero
 40128b8:	003ffb06 	br	40128a8 <_gp+0xffff4d7c>

040128bc <__sflush_r>:
 40128bc:	2880030b 	ldhu	r2,12(r5)
 40128c0:	defffb04 	addi	sp,sp,-20
 40128c4:	dcc00315 	stw	r19,12(sp)
 40128c8:	dc400115 	stw	r17,4(sp)
 40128cc:	dfc00415 	stw	ra,16(sp)
 40128d0:	dc800215 	stw	r18,8(sp)
 40128d4:	dc000015 	stw	r16,0(sp)
 40128d8:	10c0020c 	andi	r3,r2,8
 40128dc:	2823883a 	mov	r17,r5
 40128e0:	2027883a 	mov	r19,r4
 40128e4:	1800311e 	bne	r3,zero,40129ac <__sflush_r+0xf0>
 40128e8:	28c00117 	ldw	r3,4(r5)
 40128ec:	10820014 	ori	r2,r2,2048
 40128f0:	2880030d 	sth	r2,12(r5)
 40128f4:	00c04b0e 	bge	zero,r3,4012a24 <__sflush_r+0x168>
 40128f8:	8a000a17 	ldw	r8,40(r17)
 40128fc:	40002326 	beq	r8,zero,401298c <__sflush_r+0xd0>
 4012900:	9c000017 	ldw	r16,0(r19)
 4012904:	10c4000c 	andi	r3,r2,4096
 4012908:	98000015 	stw	zero,0(r19)
 401290c:	18004826 	beq	r3,zero,4012a30 <__sflush_r+0x174>
 4012910:	89801417 	ldw	r6,80(r17)
 4012914:	10c0010c 	andi	r3,r2,4
 4012918:	18000626 	beq	r3,zero,4012934 <__sflush_r+0x78>
 401291c:	88c00117 	ldw	r3,4(r17)
 4012920:	88800c17 	ldw	r2,48(r17)
 4012924:	30cdc83a 	sub	r6,r6,r3
 4012928:	10000226 	beq	r2,zero,4012934 <__sflush_r+0x78>
 401292c:	88800f17 	ldw	r2,60(r17)
 4012930:	308dc83a 	sub	r6,r6,r2
 4012934:	89400717 	ldw	r5,28(r17)
 4012938:	000f883a 	mov	r7,zero
 401293c:	9809883a 	mov	r4,r19
 4012940:	403ee83a 	callr	r8
 4012944:	00ffffc4 	movi	r3,-1
 4012948:	10c04426 	beq	r2,r3,4012a5c <__sflush_r+0x1a0>
 401294c:	88c0030b 	ldhu	r3,12(r17)
 4012950:	89000417 	ldw	r4,16(r17)
 4012954:	88000115 	stw	zero,4(r17)
 4012958:	197dffcc 	andi	r5,r3,63487
 401295c:	8940030d 	sth	r5,12(r17)
 4012960:	89000015 	stw	r4,0(r17)
 4012964:	18c4000c 	andi	r3,r3,4096
 4012968:	18002c1e 	bne	r3,zero,4012a1c <__sflush_r+0x160>
 401296c:	89400c17 	ldw	r5,48(r17)
 4012970:	9c000015 	stw	r16,0(r19)
 4012974:	28000526 	beq	r5,zero,401298c <__sflush_r+0xd0>
 4012978:	88801004 	addi	r2,r17,64
 401297c:	28800226 	beq	r5,r2,4012988 <__sflush_r+0xcc>
 4012980:	9809883a 	mov	r4,r19
 4012984:	40130380 	call	4013038 <_free_r>
 4012988:	88000c15 	stw	zero,48(r17)
 401298c:	0005883a 	mov	r2,zero
 4012990:	dfc00417 	ldw	ra,16(sp)
 4012994:	dcc00317 	ldw	r19,12(sp)
 4012998:	dc800217 	ldw	r18,8(sp)
 401299c:	dc400117 	ldw	r17,4(sp)
 40129a0:	dc000017 	ldw	r16,0(sp)
 40129a4:	dec00504 	addi	sp,sp,20
 40129a8:	f800283a 	ret
 40129ac:	2c800417 	ldw	r18,16(r5)
 40129b0:	903ff626 	beq	r18,zero,401298c <_gp+0xffff4e60>
 40129b4:	2c000017 	ldw	r16,0(r5)
 40129b8:	108000cc 	andi	r2,r2,3
 40129bc:	2c800015 	stw	r18,0(r5)
 40129c0:	84a1c83a 	sub	r16,r16,r18
 40129c4:	1000131e 	bne	r2,zero,4012a14 <__sflush_r+0x158>
 40129c8:	28800517 	ldw	r2,20(r5)
 40129cc:	88800215 	stw	r2,8(r17)
 40129d0:	04000316 	blt	zero,r16,40129e0 <__sflush_r+0x124>
 40129d4:	003fed06 	br	401298c <_gp+0xffff4e60>
 40129d8:	90a5883a 	add	r18,r18,r2
 40129dc:	043feb0e 	bge	zero,r16,401298c <_gp+0xffff4e60>
 40129e0:	88800917 	ldw	r2,36(r17)
 40129e4:	89400717 	ldw	r5,28(r17)
 40129e8:	800f883a 	mov	r7,r16
 40129ec:	900d883a 	mov	r6,r18
 40129f0:	9809883a 	mov	r4,r19
 40129f4:	103ee83a 	callr	r2
 40129f8:	80a1c83a 	sub	r16,r16,r2
 40129fc:	00bff616 	blt	zero,r2,40129d8 <_gp+0xffff4eac>
 4012a00:	88c0030b 	ldhu	r3,12(r17)
 4012a04:	00bfffc4 	movi	r2,-1
 4012a08:	18c01014 	ori	r3,r3,64
 4012a0c:	88c0030d 	sth	r3,12(r17)
 4012a10:	003fdf06 	br	4012990 <_gp+0xffff4e64>
 4012a14:	0005883a 	mov	r2,zero
 4012a18:	003fec06 	br	40129cc <_gp+0xffff4ea0>
 4012a1c:	88801415 	stw	r2,80(r17)
 4012a20:	003fd206 	br	401296c <_gp+0xffff4e40>
 4012a24:	28c00f17 	ldw	r3,60(r5)
 4012a28:	00ffb316 	blt	zero,r3,40128f8 <_gp+0xffff4dcc>
 4012a2c:	003fd706 	br	401298c <_gp+0xffff4e60>
 4012a30:	89400717 	ldw	r5,28(r17)
 4012a34:	000d883a 	mov	r6,zero
 4012a38:	01c00044 	movi	r7,1
 4012a3c:	9809883a 	mov	r4,r19
 4012a40:	403ee83a 	callr	r8
 4012a44:	100d883a 	mov	r6,r2
 4012a48:	00bfffc4 	movi	r2,-1
 4012a4c:	30801426 	beq	r6,r2,4012aa0 <__sflush_r+0x1e4>
 4012a50:	8880030b 	ldhu	r2,12(r17)
 4012a54:	8a000a17 	ldw	r8,40(r17)
 4012a58:	003fae06 	br	4012914 <_gp+0xffff4de8>
 4012a5c:	98c00017 	ldw	r3,0(r19)
 4012a60:	183fba26 	beq	r3,zero,401294c <_gp+0xffff4e20>
 4012a64:	01000744 	movi	r4,29
 4012a68:	19000626 	beq	r3,r4,4012a84 <__sflush_r+0x1c8>
 4012a6c:	01000584 	movi	r4,22
 4012a70:	19000426 	beq	r3,r4,4012a84 <__sflush_r+0x1c8>
 4012a74:	88c0030b 	ldhu	r3,12(r17)
 4012a78:	18c01014 	ori	r3,r3,64
 4012a7c:	88c0030d 	sth	r3,12(r17)
 4012a80:	003fc306 	br	4012990 <_gp+0xffff4e64>
 4012a84:	8880030b 	ldhu	r2,12(r17)
 4012a88:	88c00417 	ldw	r3,16(r17)
 4012a8c:	88000115 	stw	zero,4(r17)
 4012a90:	10bdffcc 	andi	r2,r2,63487
 4012a94:	8880030d 	sth	r2,12(r17)
 4012a98:	88c00015 	stw	r3,0(r17)
 4012a9c:	003fb306 	br	401296c <_gp+0xffff4e40>
 4012aa0:	98800017 	ldw	r2,0(r19)
 4012aa4:	103fea26 	beq	r2,zero,4012a50 <_gp+0xffff4f24>
 4012aa8:	00c00744 	movi	r3,29
 4012aac:	10c00226 	beq	r2,r3,4012ab8 <__sflush_r+0x1fc>
 4012ab0:	00c00584 	movi	r3,22
 4012ab4:	10c0031e 	bne	r2,r3,4012ac4 <__sflush_r+0x208>
 4012ab8:	9c000015 	stw	r16,0(r19)
 4012abc:	0005883a 	mov	r2,zero
 4012ac0:	003fb306 	br	4012990 <_gp+0xffff4e64>
 4012ac4:	88c0030b 	ldhu	r3,12(r17)
 4012ac8:	3005883a 	mov	r2,r6
 4012acc:	18c01014 	ori	r3,r3,64
 4012ad0:	88c0030d 	sth	r3,12(r17)
 4012ad4:	003fae06 	br	4012990 <_gp+0xffff4e64>

04012ad8 <_fflush_r>:
 4012ad8:	defffd04 	addi	sp,sp,-12
 4012adc:	dc000115 	stw	r16,4(sp)
 4012ae0:	dfc00215 	stw	ra,8(sp)
 4012ae4:	2021883a 	mov	r16,r4
 4012ae8:	20000226 	beq	r4,zero,4012af4 <_fflush_r+0x1c>
 4012aec:	20800e17 	ldw	r2,56(r4)
 4012af0:	10000c26 	beq	r2,zero,4012b24 <_fflush_r+0x4c>
 4012af4:	2880030f 	ldh	r2,12(r5)
 4012af8:	1000051e 	bne	r2,zero,4012b10 <_fflush_r+0x38>
 4012afc:	0005883a 	mov	r2,zero
 4012b00:	dfc00217 	ldw	ra,8(sp)
 4012b04:	dc000117 	ldw	r16,4(sp)
 4012b08:	dec00304 	addi	sp,sp,12
 4012b0c:	f800283a 	ret
 4012b10:	8009883a 	mov	r4,r16
 4012b14:	dfc00217 	ldw	ra,8(sp)
 4012b18:	dc000117 	ldw	r16,4(sp)
 4012b1c:	dec00304 	addi	sp,sp,12
 4012b20:	40128bc1 	jmpi	40128bc <__sflush_r>
 4012b24:	d9400015 	stw	r5,0(sp)
 4012b28:	4012ec40 	call	4012ec4 <__sinit>
 4012b2c:	d9400017 	ldw	r5,0(sp)
 4012b30:	003ff006 	br	4012af4 <_gp+0xffff4fc8>

04012b34 <fflush>:
 4012b34:	20000526 	beq	r4,zero,4012b4c <fflush+0x18>
 4012b38:	00810074 	movhi	r2,1025
 4012b3c:	1096d304 	addi	r2,r2,23372
 4012b40:	200b883a 	mov	r5,r4
 4012b44:	11000017 	ldw	r4,0(r2)
 4012b48:	4012ad81 	jmpi	4012ad8 <_fflush_r>
 4012b4c:	00810074 	movhi	r2,1025
 4012b50:	1096d204 	addi	r2,r2,23368
 4012b54:	11000017 	ldw	r4,0(r2)
 4012b58:	01410074 	movhi	r5,1025
 4012b5c:	294ab604 	addi	r5,r5,10968
 4012b60:	401340c1 	jmpi	401340c <_fwalk_reent>

04012b64 <__fp_unlock>:
 4012b64:	0005883a 	mov	r2,zero
 4012b68:	f800283a 	ret

04012b6c <_cleanup_r>:
 4012b6c:	01410074 	movhi	r5,1025
 4012b70:	2950fd04 	addi	r5,r5,17396
 4012b74:	401340c1 	jmpi	401340c <_fwalk_reent>

04012b78 <__sinit.part.1>:
 4012b78:	defff704 	addi	sp,sp,-36
 4012b7c:	00c10074 	movhi	r3,1025
 4012b80:	dfc00815 	stw	ra,32(sp)
 4012b84:	ddc00715 	stw	r23,28(sp)
 4012b88:	dd800615 	stw	r22,24(sp)
 4012b8c:	dd400515 	stw	r21,20(sp)
 4012b90:	dd000415 	stw	r20,16(sp)
 4012b94:	dcc00315 	stw	r19,12(sp)
 4012b98:	dc800215 	stw	r18,8(sp)
 4012b9c:	dc400115 	stw	r17,4(sp)
 4012ba0:	dc000015 	stw	r16,0(sp)
 4012ba4:	18cadb04 	addi	r3,r3,11116
 4012ba8:	24000117 	ldw	r16,4(r4)
 4012bac:	20c00f15 	stw	r3,60(r4)
 4012bb0:	2080bb04 	addi	r2,r4,748
 4012bb4:	00c000c4 	movi	r3,3
 4012bb8:	20c0b915 	stw	r3,740(r4)
 4012bbc:	2080ba15 	stw	r2,744(r4)
 4012bc0:	2000b815 	stw	zero,736(r4)
 4012bc4:	05c00204 	movi	r23,8
 4012bc8:	00800104 	movi	r2,4
 4012bcc:	2025883a 	mov	r18,r4
 4012bd0:	b80d883a 	mov	r6,r23
 4012bd4:	81001704 	addi	r4,r16,92
 4012bd8:	000b883a 	mov	r5,zero
 4012bdc:	80000015 	stw	zero,0(r16)
 4012be0:	80000115 	stw	zero,4(r16)
 4012be4:	80000215 	stw	zero,8(r16)
 4012be8:	8080030d 	sth	r2,12(r16)
 4012bec:	80001915 	stw	zero,100(r16)
 4012bf0:	8000038d 	sth	zero,14(r16)
 4012bf4:	80000415 	stw	zero,16(r16)
 4012bf8:	80000515 	stw	zero,20(r16)
 4012bfc:	80000615 	stw	zero,24(r16)
 4012c00:	4013e980 	call	4013e98 <memset>
 4012c04:	05810074 	movhi	r22,1025
 4012c08:	94400217 	ldw	r17,8(r18)
 4012c0c:	05410074 	movhi	r21,1025
 4012c10:	05010074 	movhi	r20,1025
 4012c14:	04c10074 	movhi	r19,1025
 4012c18:	b5908104 	addi	r22,r22,16900
 4012c1c:	ad509804 	addi	r21,r21,16992
 4012c20:	a510b704 	addi	r20,r20,17116
 4012c24:	9cd0ce04 	addi	r19,r19,17208
 4012c28:	85800815 	stw	r22,32(r16)
 4012c2c:	85400915 	stw	r21,36(r16)
 4012c30:	85000a15 	stw	r20,40(r16)
 4012c34:	84c00b15 	stw	r19,44(r16)
 4012c38:	84000715 	stw	r16,28(r16)
 4012c3c:	00800284 	movi	r2,10
 4012c40:	8880030d 	sth	r2,12(r17)
 4012c44:	00800044 	movi	r2,1
 4012c48:	b80d883a 	mov	r6,r23
 4012c4c:	89001704 	addi	r4,r17,92
 4012c50:	000b883a 	mov	r5,zero
 4012c54:	88000015 	stw	zero,0(r17)
 4012c58:	88000115 	stw	zero,4(r17)
 4012c5c:	88000215 	stw	zero,8(r17)
 4012c60:	88001915 	stw	zero,100(r17)
 4012c64:	8880038d 	sth	r2,14(r17)
 4012c68:	88000415 	stw	zero,16(r17)
 4012c6c:	88000515 	stw	zero,20(r17)
 4012c70:	88000615 	stw	zero,24(r17)
 4012c74:	4013e980 	call	4013e98 <memset>
 4012c78:	94000317 	ldw	r16,12(r18)
 4012c7c:	00800484 	movi	r2,18
 4012c80:	8c400715 	stw	r17,28(r17)
 4012c84:	8d800815 	stw	r22,32(r17)
 4012c88:	8d400915 	stw	r21,36(r17)
 4012c8c:	8d000a15 	stw	r20,40(r17)
 4012c90:	8cc00b15 	stw	r19,44(r17)
 4012c94:	8080030d 	sth	r2,12(r16)
 4012c98:	00800084 	movi	r2,2
 4012c9c:	80000015 	stw	zero,0(r16)
 4012ca0:	80000115 	stw	zero,4(r16)
 4012ca4:	80000215 	stw	zero,8(r16)
 4012ca8:	80001915 	stw	zero,100(r16)
 4012cac:	8080038d 	sth	r2,14(r16)
 4012cb0:	80000415 	stw	zero,16(r16)
 4012cb4:	80000515 	stw	zero,20(r16)
 4012cb8:	80000615 	stw	zero,24(r16)
 4012cbc:	b80d883a 	mov	r6,r23
 4012cc0:	000b883a 	mov	r5,zero
 4012cc4:	81001704 	addi	r4,r16,92
 4012cc8:	4013e980 	call	4013e98 <memset>
 4012ccc:	00800044 	movi	r2,1
 4012cd0:	84000715 	stw	r16,28(r16)
 4012cd4:	85800815 	stw	r22,32(r16)
 4012cd8:	85400915 	stw	r21,36(r16)
 4012cdc:	85000a15 	stw	r20,40(r16)
 4012ce0:	84c00b15 	stw	r19,44(r16)
 4012ce4:	90800e15 	stw	r2,56(r18)
 4012ce8:	dfc00817 	ldw	ra,32(sp)
 4012cec:	ddc00717 	ldw	r23,28(sp)
 4012cf0:	dd800617 	ldw	r22,24(sp)
 4012cf4:	dd400517 	ldw	r21,20(sp)
 4012cf8:	dd000417 	ldw	r20,16(sp)
 4012cfc:	dcc00317 	ldw	r19,12(sp)
 4012d00:	dc800217 	ldw	r18,8(sp)
 4012d04:	dc400117 	ldw	r17,4(sp)
 4012d08:	dc000017 	ldw	r16,0(sp)
 4012d0c:	dec00904 	addi	sp,sp,36
 4012d10:	f800283a 	ret

04012d14 <__fp_lock>:
 4012d14:	0005883a 	mov	r2,zero
 4012d18:	f800283a 	ret

04012d1c <__sfmoreglue>:
 4012d1c:	defffc04 	addi	sp,sp,-16
 4012d20:	dc800215 	stw	r18,8(sp)
 4012d24:	2825883a 	mov	r18,r5
 4012d28:	dc000015 	stw	r16,0(sp)
 4012d2c:	01401a04 	movi	r5,104
 4012d30:	2021883a 	mov	r16,r4
 4012d34:	913fffc4 	addi	r4,r18,-1
 4012d38:	dfc00315 	stw	ra,12(sp)
 4012d3c:	dc400115 	stw	r17,4(sp)
 4012d40:	401137c0 	call	401137c <__mulsi3>
 4012d44:	8009883a 	mov	r4,r16
 4012d48:	11401d04 	addi	r5,r2,116
 4012d4c:	1023883a 	mov	r17,r2
 4012d50:	401368c0 	call	401368c <_malloc_r>
 4012d54:	1021883a 	mov	r16,r2
 4012d58:	10000726 	beq	r2,zero,4012d78 <__sfmoreglue+0x5c>
 4012d5c:	11000304 	addi	r4,r2,12
 4012d60:	10000015 	stw	zero,0(r2)
 4012d64:	14800115 	stw	r18,4(r2)
 4012d68:	11000215 	stw	r4,8(r2)
 4012d6c:	89801a04 	addi	r6,r17,104
 4012d70:	000b883a 	mov	r5,zero
 4012d74:	4013e980 	call	4013e98 <memset>
 4012d78:	8005883a 	mov	r2,r16
 4012d7c:	dfc00317 	ldw	ra,12(sp)
 4012d80:	dc800217 	ldw	r18,8(sp)
 4012d84:	dc400117 	ldw	r17,4(sp)
 4012d88:	dc000017 	ldw	r16,0(sp)
 4012d8c:	dec00404 	addi	sp,sp,16
 4012d90:	f800283a 	ret

04012d94 <__sfp>:
 4012d94:	defffb04 	addi	sp,sp,-20
 4012d98:	dc000015 	stw	r16,0(sp)
 4012d9c:	04010074 	movhi	r16,1025
 4012da0:	8416d204 	addi	r16,r16,23368
 4012da4:	dcc00315 	stw	r19,12(sp)
 4012da8:	2027883a 	mov	r19,r4
 4012dac:	81000017 	ldw	r4,0(r16)
 4012db0:	dfc00415 	stw	ra,16(sp)
 4012db4:	dc800215 	stw	r18,8(sp)
 4012db8:	20800e17 	ldw	r2,56(r4)
 4012dbc:	dc400115 	stw	r17,4(sp)
 4012dc0:	1000021e 	bne	r2,zero,4012dcc <__sfp+0x38>
 4012dc4:	4012b780 	call	4012b78 <__sinit.part.1>
 4012dc8:	81000017 	ldw	r4,0(r16)
 4012dcc:	2480b804 	addi	r18,r4,736
 4012dd0:	047fffc4 	movi	r17,-1
 4012dd4:	91000117 	ldw	r4,4(r18)
 4012dd8:	94000217 	ldw	r16,8(r18)
 4012ddc:	213fffc4 	addi	r4,r4,-1
 4012de0:	20000a16 	blt	r4,zero,4012e0c <__sfp+0x78>
 4012de4:	8080030f 	ldh	r2,12(r16)
 4012de8:	10000c26 	beq	r2,zero,4012e1c <__sfp+0x88>
 4012dec:	80c01d04 	addi	r3,r16,116
 4012df0:	00000206 	br	4012dfc <__sfp+0x68>
 4012df4:	18bfe60f 	ldh	r2,-104(r3)
 4012df8:	10000826 	beq	r2,zero,4012e1c <__sfp+0x88>
 4012dfc:	213fffc4 	addi	r4,r4,-1
 4012e00:	1c3ffd04 	addi	r16,r3,-12
 4012e04:	18c01a04 	addi	r3,r3,104
 4012e08:	247ffa1e 	bne	r4,r17,4012df4 <_gp+0xffff52c8>
 4012e0c:	90800017 	ldw	r2,0(r18)
 4012e10:	10001d26 	beq	r2,zero,4012e88 <__sfp+0xf4>
 4012e14:	1025883a 	mov	r18,r2
 4012e18:	003fee06 	br	4012dd4 <_gp+0xffff52a8>
 4012e1c:	00bfffc4 	movi	r2,-1
 4012e20:	8080038d 	sth	r2,14(r16)
 4012e24:	00800044 	movi	r2,1
 4012e28:	8080030d 	sth	r2,12(r16)
 4012e2c:	80001915 	stw	zero,100(r16)
 4012e30:	80000015 	stw	zero,0(r16)
 4012e34:	80000215 	stw	zero,8(r16)
 4012e38:	80000115 	stw	zero,4(r16)
 4012e3c:	80000415 	stw	zero,16(r16)
 4012e40:	80000515 	stw	zero,20(r16)
 4012e44:	80000615 	stw	zero,24(r16)
 4012e48:	01800204 	movi	r6,8
 4012e4c:	000b883a 	mov	r5,zero
 4012e50:	81001704 	addi	r4,r16,92
 4012e54:	4013e980 	call	4013e98 <memset>
 4012e58:	8005883a 	mov	r2,r16
 4012e5c:	80000c15 	stw	zero,48(r16)
 4012e60:	80000d15 	stw	zero,52(r16)
 4012e64:	80001115 	stw	zero,68(r16)
 4012e68:	80001215 	stw	zero,72(r16)
 4012e6c:	dfc00417 	ldw	ra,16(sp)
 4012e70:	dcc00317 	ldw	r19,12(sp)
 4012e74:	dc800217 	ldw	r18,8(sp)
 4012e78:	dc400117 	ldw	r17,4(sp)
 4012e7c:	dc000017 	ldw	r16,0(sp)
 4012e80:	dec00504 	addi	sp,sp,20
 4012e84:	f800283a 	ret
 4012e88:	01400104 	movi	r5,4
 4012e8c:	9809883a 	mov	r4,r19
 4012e90:	4012d1c0 	call	4012d1c <__sfmoreglue>
 4012e94:	90800015 	stw	r2,0(r18)
 4012e98:	103fde1e 	bne	r2,zero,4012e14 <_gp+0xffff52e8>
 4012e9c:	00800304 	movi	r2,12
 4012ea0:	98800015 	stw	r2,0(r19)
 4012ea4:	0005883a 	mov	r2,zero
 4012ea8:	003ff006 	br	4012e6c <_gp+0xffff5340>

04012eac <_cleanup>:
 4012eac:	00810074 	movhi	r2,1025
 4012eb0:	1096d204 	addi	r2,r2,23368
 4012eb4:	11000017 	ldw	r4,0(r2)
 4012eb8:	01410074 	movhi	r5,1025
 4012ebc:	2950fd04 	addi	r5,r5,17396
 4012ec0:	401340c1 	jmpi	401340c <_fwalk_reent>

04012ec4 <__sinit>:
 4012ec4:	20800e17 	ldw	r2,56(r4)
 4012ec8:	10000126 	beq	r2,zero,4012ed0 <__sinit+0xc>
 4012ecc:	f800283a 	ret
 4012ed0:	4012b781 	jmpi	4012b78 <__sinit.part.1>

04012ed4 <__sfp_lock_acquire>:
 4012ed4:	f800283a 	ret

04012ed8 <__sfp_lock_release>:
 4012ed8:	f800283a 	ret

04012edc <__sinit_lock_acquire>:
 4012edc:	f800283a 	ret

04012ee0 <__sinit_lock_release>:
 4012ee0:	f800283a 	ret

04012ee4 <__fp_lock_all>:
 4012ee4:	00810074 	movhi	r2,1025
 4012ee8:	1096d304 	addi	r2,r2,23372
 4012eec:	11000017 	ldw	r4,0(r2)
 4012ef0:	01410074 	movhi	r5,1025
 4012ef4:	294b4504 	addi	r5,r5,11540
 4012ef8:	40133481 	jmpi	4013348 <_fwalk>

04012efc <__fp_unlock_all>:
 4012efc:	00810074 	movhi	r2,1025
 4012f00:	1096d304 	addi	r2,r2,23372
 4012f04:	11000017 	ldw	r4,0(r2)
 4012f08:	01410074 	movhi	r5,1025
 4012f0c:	294ad904 	addi	r5,r5,11108
 4012f10:	40133481 	jmpi	4013348 <_fwalk>

04012f14 <_malloc_trim_r>:
 4012f14:	defffb04 	addi	sp,sp,-20
 4012f18:	dcc00315 	stw	r19,12(sp)
 4012f1c:	04c10074 	movhi	r19,1025
 4012f20:	dc800215 	stw	r18,8(sp)
 4012f24:	dc400115 	stw	r17,4(sp)
 4012f28:	dc000015 	stw	r16,0(sp)
 4012f2c:	dfc00415 	stw	ra,16(sp)
 4012f30:	2821883a 	mov	r16,r5
 4012f34:	9cd5c904 	addi	r19,r19,22308
 4012f38:	2025883a 	mov	r18,r4
 4012f3c:	40148ac0 	call	40148ac <__malloc_lock>
 4012f40:	98800217 	ldw	r2,8(r19)
 4012f44:	14400117 	ldw	r17,4(r2)
 4012f48:	00bfff04 	movi	r2,-4
 4012f4c:	88a2703a 	and	r17,r17,r2
 4012f50:	8c21c83a 	sub	r16,r17,r16
 4012f54:	8403fbc4 	addi	r16,r16,4079
 4012f58:	8020d33a 	srli	r16,r16,12
 4012f5c:	0083ffc4 	movi	r2,4095
 4012f60:	843fffc4 	addi	r16,r16,-1
 4012f64:	8020933a 	slli	r16,r16,12
 4012f68:	1400060e 	bge	r2,r16,4012f84 <_malloc_trim_r+0x70>
 4012f6c:	000b883a 	mov	r5,zero
 4012f70:	9009883a 	mov	r4,r18
 4012f74:	40141b00 	call	40141b0 <_sbrk_r>
 4012f78:	98c00217 	ldw	r3,8(r19)
 4012f7c:	1c47883a 	add	r3,r3,r17
 4012f80:	10c00a26 	beq	r2,r3,4012fac <_malloc_trim_r+0x98>
 4012f84:	9009883a 	mov	r4,r18
 4012f88:	40148b00 	call	40148b0 <__malloc_unlock>
 4012f8c:	0005883a 	mov	r2,zero
 4012f90:	dfc00417 	ldw	ra,16(sp)
 4012f94:	dcc00317 	ldw	r19,12(sp)
 4012f98:	dc800217 	ldw	r18,8(sp)
 4012f9c:	dc400117 	ldw	r17,4(sp)
 4012fa0:	dc000017 	ldw	r16,0(sp)
 4012fa4:	dec00504 	addi	sp,sp,20
 4012fa8:	f800283a 	ret
 4012fac:	040bc83a 	sub	r5,zero,r16
 4012fb0:	9009883a 	mov	r4,r18
 4012fb4:	40141b00 	call	40141b0 <_sbrk_r>
 4012fb8:	00ffffc4 	movi	r3,-1
 4012fbc:	10c00d26 	beq	r2,r3,4012ff4 <_malloc_trim_r+0xe0>
 4012fc0:	00c10074 	movhi	r3,1025
 4012fc4:	18d96a04 	addi	r3,r3,26024
 4012fc8:	18800017 	ldw	r2,0(r3)
 4012fcc:	99000217 	ldw	r4,8(r19)
 4012fd0:	8c23c83a 	sub	r17,r17,r16
 4012fd4:	8c400054 	ori	r17,r17,1
 4012fd8:	1421c83a 	sub	r16,r2,r16
 4012fdc:	24400115 	stw	r17,4(r4)
 4012fe0:	9009883a 	mov	r4,r18
 4012fe4:	1c000015 	stw	r16,0(r3)
 4012fe8:	40148b00 	call	40148b0 <__malloc_unlock>
 4012fec:	00800044 	movi	r2,1
 4012ff0:	003fe706 	br	4012f90 <_gp+0xffff5464>
 4012ff4:	000b883a 	mov	r5,zero
 4012ff8:	9009883a 	mov	r4,r18
 4012ffc:	40141b00 	call	40141b0 <_sbrk_r>
 4013000:	99000217 	ldw	r4,8(r19)
 4013004:	014003c4 	movi	r5,15
 4013008:	1107c83a 	sub	r3,r2,r4
 401300c:	28ffdd0e 	bge	r5,r3,4012f84 <_gp+0xffff5458>
 4013010:	01410074 	movhi	r5,1025
 4013014:	2956d404 	addi	r5,r5,23376
 4013018:	29400017 	ldw	r5,0(r5)
 401301c:	18c00054 	ori	r3,r3,1
 4013020:	20c00115 	stw	r3,4(r4)
 4013024:	00c10074 	movhi	r3,1025
 4013028:	1145c83a 	sub	r2,r2,r5
 401302c:	18d96a04 	addi	r3,r3,26024
 4013030:	18800015 	stw	r2,0(r3)
 4013034:	003fd306 	br	4012f84 <_gp+0xffff5458>

04013038 <_free_r>:
 4013038:	28004126 	beq	r5,zero,4013140 <_free_r+0x108>
 401303c:	defffd04 	addi	sp,sp,-12
 4013040:	dc400115 	stw	r17,4(sp)
 4013044:	dc000015 	stw	r16,0(sp)
 4013048:	2023883a 	mov	r17,r4
 401304c:	2821883a 	mov	r16,r5
 4013050:	dfc00215 	stw	ra,8(sp)
 4013054:	40148ac0 	call	40148ac <__malloc_lock>
 4013058:	81ffff17 	ldw	r7,-4(r16)
 401305c:	00bfff84 	movi	r2,-2
 4013060:	01010074 	movhi	r4,1025
 4013064:	81bffe04 	addi	r6,r16,-8
 4013068:	3884703a 	and	r2,r7,r2
 401306c:	2115c904 	addi	r4,r4,22308
 4013070:	308b883a 	add	r5,r6,r2
 4013074:	2a400117 	ldw	r9,4(r5)
 4013078:	22000217 	ldw	r8,8(r4)
 401307c:	00ffff04 	movi	r3,-4
 4013080:	48c6703a 	and	r3,r9,r3
 4013084:	2a005726 	beq	r5,r8,40131e4 <_free_r+0x1ac>
 4013088:	28c00115 	stw	r3,4(r5)
 401308c:	39c0004c 	andi	r7,r7,1
 4013090:	3800091e 	bne	r7,zero,40130b8 <_free_r+0x80>
 4013094:	823ffe17 	ldw	r8,-8(r16)
 4013098:	22400204 	addi	r9,r4,8
 401309c:	320dc83a 	sub	r6,r6,r8
 40130a0:	31c00217 	ldw	r7,8(r6)
 40130a4:	1205883a 	add	r2,r2,r8
 40130a8:	3a406526 	beq	r7,r9,4013240 <_free_r+0x208>
 40130ac:	32000317 	ldw	r8,12(r6)
 40130b0:	3a000315 	stw	r8,12(r7)
 40130b4:	41c00215 	stw	r7,8(r8)
 40130b8:	28cf883a 	add	r7,r5,r3
 40130bc:	39c00117 	ldw	r7,4(r7)
 40130c0:	39c0004c 	andi	r7,r7,1
 40130c4:	38003a26 	beq	r7,zero,40131b0 <_free_r+0x178>
 40130c8:	10c00054 	ori	r3,r2,1
 40130cc:	30c00115 	stw	r3,4(r6)
 40130d0:	3087883a 	add	r3,r6,r2
 40130d4:	18800015 	stw	r2,0(r3)
 40130d8:	00c07fc4 	movi	r3,511
 40130dc:	18801936 	bltu	r3,r2,4013144 <_free_r+0x10c>
 40130e0:	1004d0fa 	srli	r2,r2,3
 40130e4:	01c00044 	movi	r7,1
 40130e8:	21400117 	ldw	r5,4(r4)
 40130ec:	10c00044 	addi	r3,r2,1
 40130f0:	18c7883a 	add	r3,r3,r3
 40130f4:	1005d0ba 	srai	r2,r2,2
 40130f8:	18c7883a 	add	r3,r3,r3
 40130fc:	18c7883a 	add	r3,r3,r3
 4013100:	1907883a 	add	r3,r3,r4
 4013104:	3884983a 	sll	r2,r7,r2
 4013108:	19c00017 	ldw	r7,0(r3)
 401310c:	1a3ffe04 	addi	r8,r3,-8
 4013110:	1144b03a 	or	r2,r2,r5
 4013114:	32000315 	stw	r8,12(r6)
 4013118:	31c00215 	stw	r7,8(r6)
 401311c:	20800115 	stw	r2,4(r4)
 4013120:	19800015 	stw	r6,0(r3)
 4013124:	39800315 	stw	r6,12(r7)
 4013128:	8809883a 	mov	r4,r17
 401312c:	dfc00217 	ldw	ra,8(sp)
 4013130:	dc400117 	ldw	r17,4(sp)
 4013134:	dc000017 	ldw	r16,0(sp)
 4013138:	dec00304 	addi	sp,sp,12
 401313c:	40148b01 	jmpi	40148b0 <__malloc_unlock>
 4013140:	f800283a 	ret
 4013144:	100ad27a 	srli	r5,r2,9
 4013148:	00c00104 	movi	r3,4
 401314c:	19404a36 	bltu	r3,r5,4013278 <_free_r+0x240>
 4013150:	100ad1ba 	srli	r5,r2,6
 4013154:	28c00e44 	addi	r3,r5,57
 4013158:	18c7883a 	add	r3,r3,r3
 401315c:	29400e04 	addi	r5,r5,56
 4013160:	18c7883a 	add	r3,r3,r3
 4013164:	18c7883a 	add	r3,r3,r3
 4013168:	1909883a 	add	r4,r3,r4
 401316c:	20c00017 	ldw	r3,0(r4)
 4013170:	01c10074 	movhi	r7,1025
 4013174:	213ffe04 	addi	r4,r4,-8
 4013178:	39d5c904 	addi	r7,r7,22308
 401317c:	20c04426 	beq	r4,r3,4013290 <_free_r+0x258>
 4013180:	01ffff04 	movi	r7,-4
 4013184:	19400117 	ldw	r5,4(r3)
 4013188:	29ca703a 	and	r5,r5,r7
 401318c:	1140022e 	bgeu	r2,r5,4013198 <_free_r+0x160>
 4013190:	18c00217 	ldw	r3,8(r3)
 4013194:	20fffb1e 	bne	r4,r3,4013184 <_gp+0xffff5658>
 4013198:	19000317 	ldw	r4,12(r3)
 401319c:	31000315 	stw	r4,12(r6)
 40131a0:	30c00215 	stw	r3,8(r6)
 40131a4:	21800215 	stw	r6,8(r4)
 40131a8:	19800315 	stw	r6,12(r3)
 40131ac:	003fde06 	br	4013128 <_gp+0xffff55fc>
 40131b0:	29c00217 	ldw	r7,8(r5)
 40131b4:	10c5883a 	add	r2,r2,r3
 40131b8:	00c10074 	movhi	r3,1025
 40131bc:	18d5cb04 	addi	r3,r3,22316
 40131c0:	38c03b26 	beq	r7,r3,40132b0 <_free_r+0x278>
 40131c4:	2a000317 	ldw	r8,12(r5)
 40131c8:	11400054 	ori	r5,r2,1
 40131cc:	3087883a 	add	r3,r6,r2
 40131d0:	3a000315 	stw	r8,12(r7)
 40131d4:	41c00215 	stw	r7,8(r8)
 40131d8:	31400115 	stw	r5,4(r6)
 40131dc:	18800015 	stw	r2,0(r3)
 40131e0:	003fbd06 	br	40130d8 <_gp+0xffff55ac>
 40131e4:	39c0004c 	andi	r7,r7,1
 40131e8:	10c5883a 	add	r2,r2,r3
 40131ec:	3800071e 	bne	r7,zero,401320c <_free_r+0x1d4>
 40131f0:	81fffe17 	ldw	r7,-8(r16)
 40131f4:	31cdc83a 	sub	r6,r6,r7
 40131f8:	30c00317 	ldw	r3,12(r6)
 40131fc:	31400217 	ldw	r5,8(r6)
 4013200:	11c5883a 	add	r2,r2,r7
 4013204:	28c00315 	stw	r3,12(r5)
 4013208:	19400215 	stw	r5,8(r3)
 401320c:	10c00054 	ori	r3,r2,1
 4013210:	30c00115 	stw	r3,4(r6)
 4013214:	00c10074 	movhi	r3,1025
 4013218:	18d6d504 	addi	r3,r3,23380
 401321c:	18c00017 	ldw	r3,0(r3)
 4013220:	21800215 	stw	r6,8(r4)
 4013224:	10ffc036 	bltu	r2,r3,4013128 <_gp+0xffff55fc>
 4013228:	00810074 	movhi	r2,1025
 401322c:	10996904 	addi	r2,r2,26020
 4013230:	11400017 	ldw	r5,0(r2)
 4013234:	8809883a 	mov	r4,r17
 4013238:	4012f140 	call	4012f14 <_malloc_trim_r>
 401323c:	003fba06 	br	4013128 <_gp+0xffff55fc>
 4013240:	28c9883a 	add	r4,r5,r3
 4013244:	21000117 	ldw	r4,4(r4)
 4013248:	2100004c 	andi	r4,r4,1
 401324c:	2000391e 	bne	r4,zero,4013334 <_free_r+0x2fc>
 4013250:	29c00217 	ldw	r7,8(r5)
 4013254:	29000317 	ldw	r4,12(r5)
 4013258:	1885883a 	add	r2,r3,r2
 401325c:	10c00054 	ori	r3,r2,1
 4013260:	39000315 	stw	r4,12(r7)
 4013264:	21c00215 	stw	r7,8(r4)
 4013268:	30c00115 	stw	r3,4(r6)
 401326c:	308d883a 	add	r6,r6,r2
 4013270:	30800015 	stw	r2,0(r6)
 4013274:	003fac06 	br	4013128 <_gp+0xffff55fc>
 4013278:	00c00504 	movi	r3,20
 401327c:	19401536 	bltu	r3,r5,40132d4 <_free_r+0x29c>
 4013280:	28c01704 	addi	r3,r5,92
 4013284:	18c7883a 	add	r3,r3,r3
 4013288:	294016c4 	addi	r5,r5,91
 401328c:	003fb406 	br	4013160 <_gp+0xffff5634>
 4013290:	280bd0ba 	srai	r5,r5,2
 4013294:	00c00044 	movi	r3,1
 4013298:	38800117 	ldw	r2,4(r7)
 401329c:	194a983a 	sll	r5,r3,r5
 40132a0:	2007883a 	mov	r3,r4
 40132a4:	2884b03a 	or	r2,r5,r2
 40132a8:	38800115 	stw	r2,4(r7)
 40132ac:	003fbb06 	br	401319c <_gp+0xffff5670>
 40132b0:	21800515 	stw	r6,20(r4)
 40132b4:	21800415 	stw	r6,16(r4)
 40132b8:	10c00054 	ori	r3,r2,1
 40132bc:	31c00315 	stw	r7,12(r6)
 40132c0:	31c00215 	stw	r7,8(r6)
 40132c4:	30c00115 	stw	r3,4(r6)
 40132c8:	308d883a 	add	r6,r6,r2
 40132cc:	30800015 	stw	r2,0(r6)
 40132d0:	003f9506 	br	4013128 <_gp+0xffff55fc>
 40132d4:	00c01504 	movi	r3,84
 40132d8:	19400536 	bltu	r3,r5,40132f0 <_free_r+0x2b8>
 40132dc:	100ad33a 	srli	r5,r2,12
 40132e0:	28c01bc4 	addi	r3,r5,111
 40132e4:	18c7883a 	add	r3,r3,r3
 40132e8:	29401b84 	addi	r5,r5,110
 40132ec:	003f9c06 	br	4013160 <_gp+0xffff5634>
 40132f0:	00c05504 	movi	r3,340
 40132f4:	19400536 	bltu	r3,r5,401330c <_free_r+0x2d4>
 40132f8:	100ad3fa 	srli	r5,r2,15
 40132fc:	28c01e04 	addi	r3,r5,120
 4013300:	18c7883a 	add	r3,r3,r3
 4013304:	29401dc4 	addi	r5,r5,119
 4013308:	003f9506 	br	4013160 <_gp+0xffff5634>
 401330c:	00c15504 	movi	r3,1364
 4013310:	19400536 	bltu	r3,r5,4013328 <_free_r+0x2f0>
 4013314:	100ad4ba 	srli	r5,r2,18
 4013318:	28c01f44 	addi	r3,r5,125
 401331c:	18c7883a 	add	r3,r3,r3
 4013320:	29401f04 	addi	r5,r5,124
 4013324:	003f8e06 	br	4013160 <_gp+0xffff5634>
 4013328:	00c03f84 	movi	r3,254
 401332c:	01401f84 	movi	r5,126
 4013330:	003f8b06 	br	4013160 <_gp+0xffff5634>
 4013334:	10c00054 	ori	r3,r2,1
 4013338:	30c00115 	stw	r3,4(r6)
 401333c:	308d883a 	add	r6,r6,r2
 4013340:	30800015 	stw	r2,0(r6)
 4013344:	003f7806 	br	4013128 <_gp+0xffff55fc>

04013348 <_fwalk>:
 4013348:	defff704 	addi	sp,sp,-36
 401334c:	dd000415 	stw	r20,16(sp)
 4013350:	dfc00815 	stw	ra,32(sp)
 4013354:	ddc00715 	stw	r23,28(sp)
 4013358:	dd800615 	stw	r22,24(sp)
 401335c:	dd400515 	stw	r21,20(sp)
 4013360:	dcc00315 	stw	r19,12(sp)
 4013364:	dc800215 	stw	r18,8(sp)
 4013368:	dc400115 	stw	r17,4(sp)
 401336c:	dc000015 	stw	r16,0(sp)
 4013370:	2500b804 	addi	r20,r4,736
 4013374:	a0002326 	beq	r20,zero,4013404 <_fwalk+0xbc>
 4013378:	282b883a 	mov	r21,r5
 401337c:	002f883a 	mov	r23,zero
 4013380:	05800044 	movi	r22,1
 4013384:	04ffffc4 	movi	r19,-1
 4013388:	a4400117 	ldw	r17,4(r20)
 401338c:	a4800217 	ldw	r18,8(r20)
 4013390:	8c7fffc4 	addi	r17,r17,-1
 4013394:	88000d16 	blt	r17,zero,40133cc <_fwalk+0x84>
 4013398:	94000304 	addi	r16,r18,12
 401339c:	94800384 	addi	r18,r18,14
 40133a0:	8080000b 	ldhu	r2,0(r16)
 40133a4:	8c7fffc4 	addi	r17,r17,-1
 40133a8:	813ffd04 	addi	r4,r16,-12
 40133ac:	b080042e 	bgeu	r22,r2,40133c0 <_fwalk+0x78>
 40133b0:	9080000f 	ldh	r2,0(r18)
 40133b4:	14c00226 	beq	r2,r19,40133c0 <_fwalk+0x78>
 40133b8:	a83ee83a 	callr	r21
 40133bc:	b8aeb03a 	or	r23,r23,r2
 40133c0:	84001a04 	addi	r16,r16,104
 40133c4:	94801a04 	addi	r18,r18,104
 40133c8:	8cfff51e 	bne	r17,r19,40133a0 <_gp+0xffff5874>
 40133cc:	a5000017 	ldw	r20,0(r20)
 40133d0:	a03fed1e 	bne	r20,zero,4013388 <_gp+0xffff585c>
 40133d4:	b805883a 	mov	r2,r23
 40133d8:	dfc00817 	ldw	ra,32(sp)
 40133dc:	ddc00717 	ldw	r23,28(sp)
 40133e0:	dd800617 	ldw	r22,24(sp)
 40133e4:	dd400517 	ldw	r21,20(sp)
 40133e8:	dd000417 	ldw	r20,16(sp)
 40133ec:	dcc00317 	ldw	r19,12(sp)
 40133f0:	dc800217 	ldw	r18,8(sp)
 40133f4:	dc400117 	ldw	r17,4(sp)
 40133f8:	dc000017 	ldw	r16,0(sp)
 40133fc:	dec00904 	addi	sp,sp,36
 4013400:	f800283a 	ret
 4013404:	002f883a 	mov	r23,zero
 4013408:	003ff206 	br	40133d4 <_gp+0xffff58a8>

0401340c <_fwalk_reent>:
 401340c:	defff704 	addi	sp,sp,-36
 4013410:	dd000415 	stw	r20,16(sp)
 4013414:	dfc00815 	stw	ra,32(sp)
 4013418:	ddc00715 	stw	r23,28(sp)
 401341c:	dd800615 	stw	r22,24(sp)
 4013420:	dd400515 	stw	r21,20(sp)
 4013424:	dcc00315 	stw	r19,12(sp)
 4013428:	dc800215 	stw	r18,8(sp)
 401342c:	dc400115 	stw	r17,4(sp)
 4013430:	dc000015 	stw	r16,0(sp)
 4013434:	2500b804 	addi	r20,r4,736
 4013438:	a0002326 	beq	r20,zero,40134c8 <_fwalk_reent+0xbc>
 401343c:	282b883a 	mov	r21,r5
 4013440:	2027883a 	mov	r19,r4
 4013444:	002f883a 	mov	r23,zero
 4013448:	05800044 	movi	r22,1
 401344c:	04bfffc4 	movi	r18,-1
 4013450:	a4400117 	ldw	r17,4(r20)
 4013454:	a4000217 	ldw	r16,8(r20)
 4013458:	8c7fffc4 	addi	r17,r17,-1
 401345c:	88000c16 	blt	r17,zero,4013490 <_fwalk_reent+0x84>
 4013460:	84000304 	addi	r16,r16,12
 4013464:	8080000b 	ldhu	r2,0(r16)
 4013468:	8c7fffc4 	addi	r17,r17,-1
 401346c:	817ffd04 	addi	r5,r16,-12
 4013470:	b080052e 	bgeu	r22,r2,4013488 <_fwalk_reent+0x7c>
 4013474:	8080008f 	ldh	r2,2(r16)
 4013478:	9809883a 	mov	r4,r19
 401347c:	14800226 	beq	r2,r18,4013488 <_fwalk_reent+0x7c>
 4013480:	a83ee83a 	callr	r21
 4013484:	b8aeb03a 	or	r23,r23,r2
 4013488:	84001a04 	addi	r16,r16,104
 401348c:	8cbff51e 	bne	r17,r18,4013464 <_gp+0xffff5938>
 4013490:	a5000017 	ldw	r20,0(r20)
 4013494:	a03fee1e 	bne	r20,zero,4013450 <_gp+0xffff5924>
 4013498:	b805883a 	mov	r2,r23
 401349c:	dfc00817 	ldw	ra,32(sp)
 40134a0:	ddc00717 	ldw	r23,28(sp)
 40134a4:	dd800617 	ldw	r22,24(sp)
 40134a8:	dd400517 	ldw	r21,20(sp)
 40134ac:	dd000417 	ldw	r20,16(sp)
 40134b0:	dcc00317 	ldw	r19,12(sp)
 40134b4:	dc800217 	ldw	r18,8(sp)
 40134b8:	dc400117 	ldw	r17,4(sp)
 40134bc:	dc000017 	ldw	r16,0(sp)
 40134c0:	dec00904 	addi	sp,sp,36
 40134c4:	f800283a 	ret
 40134c8:	002f883a 	mov	r23,zero
 40134cc:	003ff206 	br	4013498 <_gp+0xffff596c>

040134d0 <__smakebuf_r>:
 40134d0:	2880030b 	ldhu	r2,12(r5)
 40134d4:	10c0008c 	andi	r3,r2,2
 40134d8:	1800411e 	bne	r3,zero,40135e0 <__smakebuf_r+0x110>
 40134dc:	deffec04 	addi	sp,sp,-80
 40134e0:	dc000f15 	stw	r16,60(sp)
 40134e4:	2821883a 	mov	r16,r5
 40134e8:	2940038f 	ldh	r5,14(r5)
 40134ec:	dc401015 	stw	r17,64(sp)
 40134f0:	dfc01315 	stw	ra,76(sp)
 40134f4:	dcc01215 	stw	r19,72(sp)
 40134f8:	dc801115 	stw	r18,68(sp)
 40134fc:	2023883a 	mov	r17,r4
 4013500:	28001c16 	blt	r5,zero,4013574 <__smakebuf_r+0xa4>
 4013504:	d80d883a 	mov	r6,sp
 4013508:	40144f80 	call	40144f8 <_fstat_r>
 401350c:	10001816 	blt	r2,zero,4013570 <__smakebuf_r+0xa0>
 4013510:	d8800117 	ldw	r2,4(sp)
 4013514:	00e00014 	movui	r3,32768
 4013518:	10bc000c 	andi	r2,r2,61440
 401351c:	14c80020 	cmpeqi	r19,r2,8192
 4013520:	10c03726 	beq	r2,r3,4013600 <__smakebuf_r+0x130>
 4013524:	80c0030b 	ldhu	r3,12(r16)
 4013528:	18c20014 	ori	r3,r3,2048
 401352c:	80c0030d 	sth	r3,12(r16)
 4013530:	00c80004 	movi	r3,8192
 4013534:	10c0521e 	bne	r2,r3,4013680 <__smakebuf_r+0x1b0>
 4013538:	8140038f 	ldh	r5,14(r16)
 401353c:	8809883a 	mov	r4,r17
 4013540:	40145540 	call	4014554 <_isatty_r>
 4013544:	10004c26 	beq	r2,zero,4013678 <__smakebuf_r+0x1a8>
 4013548:	8080030b 	ldhu	r2,12(r16)
 401354c:	80c010c4 	addi	r3,r16,67
 4013550:	80c00015 	stw	r3,0(r16)
 4013554:	10800054 	ori	r2,r2,1
 4013558:	8080030d 	sth	r2,12(r16)
 401355c:	00800044 	movi	r2,1
 4013560:	80c00415 	stw	r3,16(r16)
 4013564:	80800515 	stw	r2,20(r16)
 4013568:	04810004 	movi	r18,1024
 401356c:	00000706 	br	401358c <__smakebuf_r+0xbc>
 4013570:	8080030b 	ldhu	r2,12(r16)
 4013574:	10c0200c 	andi	r3,r2,128
 4013578:	18001f1e 	bne	r3,zero,40135f8 <__smakebuf_r+0x128>
 401357c:	04810004 	movi	r18,1024
 4013580:	10820014 	ori	r2,r2,2048
 4013584:	8080030d 	sth	r2,12(r16)
 4013588:	0027883a 	mov	r19,zero
 401358c:	900b883a 	mov	r5,r18
 4013590:	8809883a 	mov	r4,r17
 4013594:	401368c0 	call	401368c <_malloc_r>
 4013598:	10002c26 	beq	r2,zero,401364c <__smakebuf_r+0x17c>
 401359c:	80c0030b 	ldhu	r3,12(r16)
 40135a0:	01010074 	movhi	r4,1025
 40135a4:	210adb04 	addi	r4,r4,11116
 40135a8:	89000f15 	stw	r4,60(r17)
 40135ac:	18c02014 	ori	r3,r3,128
 40135b0:	80c0030d 	sth	r3,12(r16)
 40135b4:	80800015 	stw	r2,0(r16)
 40135b8:	80800415 	stw	r2,16(r16)
 40135bc:	84800515 	stw	r18,20(r16)
 40135c0:	98001a1e 	bne	r19,zero,401362c <__smakebuf_r+0x15c>
 40135c4:	dfc01317 	ldw	ra,76(sp)
 40135c8:	dcc01217 	ldw	r19,72(sp)
 40135cc:	dc801117 	ldw	r18,68(sp)
 40135d0:	dc401017 	ldw	r17,64(sp)
 40135d4:	dc000f17 	ldw	r16,60(sp)
 40135d8:	dec01404 	addi	sp,sp,80
 40135dc:	f800283a 	ret
 40135e0:	288010c4 	addi	r2,r5,67
 40135e4:	28800015 	stw	r2,0(r5)
 40135e8:	28800415 	stw	r2,16(r5)
 40135ec:	00800044 	movi	r2,1
 40135f0:	28800515 	stw	r2,20(r5)
 40135f4:	f800283a 	ret
 40135f8:	04801004 	movi	r18,64
 40135fc:	003fe006 	br	4013580 <_gp+0xffff5a54>
 4013600:	81000a17 	ldw	r4,40(r16)
 4013604:	00c10074 	movhi	r3,1025
 4013608:	18d0b704 	addi	r3,r3,17116
 401360c:	20ffc51e 	bne	r4,r3,4013524 <_gp+0xffff59f8>
 4013610:	8080030b 	ldhu	r2,12(r16)
 4013614:	04810004 	movi	r18,1024
 4013618:	84801315 	stw	r18,76(r16)
 401361c:	1484b03a 	or	r2,r2,r18
 4013620:	8080030d 	sth	r2,12(r16)
 4013624:	0027883a 	mov	r19,zero
 4013628:	003fd806 	br	401358c <_gp+0xffff5a60>
 401362c:	8140038f 	ldh	r5,14(r16)
 4013630:	8809883a 	mov	r4,r17
 4013634:	40145540 	call	4014554 <_isatty_r>
 4013638:	103fe226 	beq	r2,zero,40135c4 <_gp+0xffff5a98>
 401363c:	8080030b 	ldhu	r2,12(r16)
 4013640:	10800054 	ori	r2,r2,1
 4013644:	8080030d 	sth	r2,12(r16)
 4013648:	003fde06 	br	40135c4 <_gp+0xffff5a98>
 401364c:	8080030b 	ldhu	r2,12(r16)
 4013650:	10c0800c 	andi	r3,r2,512
 4013654:	183fdb1e 	bne	r3,zero,40135c4 <_gp+0xffff5a98>
 4013658:	10800094 	ori	r2,r2,2
 401365c:	80c010c4 	addi	r3,r16,67
 4013660:	8080030d 	sth	r2,12(r16)
 4013664:	00800044 	movi	r2,1
 4013668:	80c00015 	stw	r3,0(r16)
 401366c:	80c00415 	stw	r3,16(r16)
 4013670:	80800515 	stw	r2,20(r16)
 4013674:	003fd306 	br	40135c4 <_gp+0xffff5a98>
 4013678:	04810004 	movi	r18,1024
 401367c:	003fc306 	br	401358c <_gp+0xffff5a60>
 4013680:	0027883a 	mov	r19,zero
 4013684:	04810004 	movi	r18,1024
 4013688:	003fc006 	br	401358c <_gp+0xffff5a60>

0401368c <_malloc_r>:
 401368c:	defff504 	addi	sp,sp,-44
 4013690:	dc800315 	stw	r18,12(sp)
 4013694:	dfc00a15 	stw	ra,40(sp)
 4013698:	df000915 	stw	fp,36(sp)
 401369c:	ddc00815 	stw	r23,32(sp)
 40136a0:	dd800715 	stw	r22,28(sp)
 40136a4:	dd400615 	stw	r21,24(sp)
 40136a8:	dd000515 	stw	r20,20(sp)
 40136ac:	dcc00415 	stw	r19,16(sp)
 40136b0:	dc400215 	stw	r17,8(sp)
 40136b4:	dc000115 	stw	r16,4(sp)
 40136b8:	288002c4 	addi	r2,r5,11
 40136bc:	00c00584 	movi	r3,22
 40136c0:	2025883a 	mov	r18,r4
 40136c4:	18807f2e 	bgeu	r3,r2,40138c4 <_malloc_r+0x238>
 40136c8:	047ffe04 	movi	r17,-8
 40136cc:	1462703a 	and	r17,r2,r17
 40136d0:	8800a316 	blt	r17,zero,4013960 <_malloc_r+0x2d4>
 40136d4:	8940a236 	bltu	r17,r5,4013960 <_malloc_r+0x2d4>
 40136d8:	40148ac0 	call	40148ac <__malloc_lock>
 40136dc:	00807dc4 	movi	r2,503
 40136e0:	1441e92e 	bgeu	r2,r17,4013e88 <_malloc_r+0x7fc>
 40136e4:	8804d27a 	srli	r2,r17,9
 40136e8:	1000a126 	beq	r2,zero,4013970 <_malloc_r+0x2e4>
 40136ec:	00c00104 	movi	r3,4
 40136f0:	18811e36 	bltu	r3,r2,4013b6c <_malloc_r+0x4e0>
 40136f4:	8804d1ba 	srli	r2,r17,6
 40136f8:	12000e44 	addi	r8,r2,57
 40136fc:	11c00e04 	addi	r7,r2,56
 4013700:	4209883a 	add	r4,r8,r8
 4013704:	04c10074 	movhi	r19,1025
 4013708:	2109883a 	add	r4,r4,r4
 401370c:	9cd5c904 	addi	r19,r19,22308
 4013710:	2109883a 	add	r4,r4,r4
 4013714:	9909883a 	add	r4,r19,r4
 4013718:	24000117 	ldw	r16,4(r4)
 401371c:	213ffe04 	addi	r4,r4,-8
 4013720:	24009726 	beq	r4,r16,4013980 <_malloc_r+0x2f4>
 4013724:	80800117 	ldw	r2,4(r16)
 4013728:	01bfff04 	movi	r6,-4
 401372c:	014003c4 	movi	r5,15
 4013730:	1184703a 	and	r2,r2,r6
 4013734:	1447c83a 	sub	r3,r2,r17
 4013738:	28c00716 	blt	r5,r3,4013758 <_malloc_r+0xcc>
 401373c:	1800920e 	bge	r3,zero,4013988 <_malloc_r+0x2fc>
 4013740:	84000317 	ldw	r16,12(r16)
 4013744:	24008e26 	beq	r4,r16,4013980 <_malloc_r+0x2f4>
 4013748:	80800117 	ldw	r2,4(r16)
 401374c:	1184703a 	and	r2,r2,r6
 4013750:	1447c83a 	sub	r3,r2,r17
 4013754:	28fff90e 	bge	r5,r3,401373c <_gp+0xffff5c10>
 4013758:	3809883a 	mov	r4,r7
 401375c:	01810074 	movhi	r6,1025
 4013760:	9c000417 	ldw	r16,16(r19)
 4013764:	3195c904 	addi	r6,r6,22308
 4013768:	32000204 	addi	r8,r6,8
 401376c:	82013426 	beq	r16,r8,4013c40 <_malloc_r+0x5b4>
 4013770:	80c00117 	ldw	r3,4(r16)
 4013774:	00bfff04 	movi	r2,-4
 4013778:	188e703a 	and	r7,r3,r2
 401377c:	3c45c83a 	sub	r2,r7,r17
 4013780:	00c003c4 	movi	r3,15
 4013784:	18811f16 	blt	r3,r2,4013c04 <_malloc_r+0x578>
 4013788:	32000515 	stw	r8,20(r6)
 401378c:	32000415 	stw	r8,16(r6)
 4013790:	10007f0e 	bge	r2,zero,4013990 <_malloc_r+0x304>
 4013794:	00807fc4 	movi	r2,511
 4013798:	11c0fd36 	bltu	r2,r7,4013b90 <_malloc_r+0x504>
 401379c:	3806d0fa 	srli	r3,r7,3
 40137a0:	01c00044 	movi	r7,1
 40137a4:	30800117 	ldw	r2,4(r6)
 40137a8:	19400044 	addi	r5,r3,1
 40137ac:	294b883a 	add	r5,r5,r5
 40137b0:	1807d0ba 	srai	r3,r3,2
 40137b4:	294b883a 	add	r5,r5,r5
 40137b8:	294b883a 	add	r5,r5,r5
 40137bc:	298b883a 	add	r5,r5,r6
 40137c0:	38c6983a 	sll	r3,r7,r3
 40137c4:	29c00017 	ldw	r7,0(r5)
 40137c8:	2a7ffe04 	addi	r9,r5,-8
 40137cc:	1886b03a 	or	r3,r3,r2
 40137d0:	82400315 	stw	r9,12(r16)
 40137d4:	81c00215 	stw	r7,8(r16)
 40137d8:	30c00115 	stw	r3,4(r6)
 40137dc:	2c000015 	stw	r16,0(r5)
 40137e0:	3c000315 	stw	r16,12(r7)
 40137e4:	2005d0ba 	srai	r2,r4,2
 40137e8:	01400044 	movi	r5,1
 40137ec:	288a983a 	sll	r5,r5,r2
 40137f0:	19406f36 	bltu	r3,r5,40139b0 <_malloc_r+0x324>
 40137f4:	28c4703a 	and	r2,r5,r3
 40137f8:	10000a1e 	bne	r2,zero,4013824 <_malloc_r+0x198>
 40137fc:	00bfff04 	movi	r2,-4
 4013800:	294b883a 	add	r5,r5,r5
 4013804:	2088703a 	and	r4,r4,r2
 4013808:	28c4703a 	and	r2,r5,r3
 401380c:	21000104 	addi	r4,r4,4
 4013810:	1000041e 	bne	r2,zero,4013824 <_malloc_r+0x198>
 4013814:	294b883a 	add	r5,r5,r5
 4013818:	28c4703a 	and	r2,r5,r3
 401381c:	21000104 	addi	r4,r4,4
 4013820:	103ffc26 	beq	r2,zero,4013814 <_gp+0xffff5ce8>
 4013824:	02bfff04 	movi	r10,-4
 4013828:	024003c4 	movi	r9,15
 401382c:	21800044 	addi	r6,r4,1
 4013830:	318d883a 	add	r6,r6,r6
 4013834:	318d883a 	add	r6,r6,r6
 4013838:	318d883a 	add	r6,r6,r6
 401383c:	998d883a 	add	r6,r19,r6
 4013840:	333ffe04 	addi	r12,r6,-8
 4013844:	2017883a 	mov	r11,r4
 4013848:	31800104 	addi	r6,r6,4
 401384c:	34000017 	ldw	r16,0(r6)
 4013850:	31fffd04 	addi	r7,r6,-12
 4013854:	81c0041e 	bne	r16,r7,4013868 <_malloc_r+0x1dc>
 4013858:	0000fb06 	br	4013c48 <_malloc_r+0x5bc>
 401385c:	1801030e 	bge	r3,zero,4013c6c <_malloc_r+0x5e0>
 4013860:	84000317 	ldw	r16,12(r16)
 4013864:	81c0f826 	beq	r16,r7,4013c48 <_malloc_r+0x5bc>
 4013868:	80800117 	ldw	r2,4(r16)
 401386c:	1284703a 	and	r2,r2,r10
 4013870:	1447c83a 	sub	r3,r2,r17
 4013874:	48fff90e 	bge	r9,r3,401385c <_gp+0xffff5d30>
 4013878:	80800317 	ldw	r2,12(r16)
 401387c:	81000217 	ldw	r4,8(r16)
 4013880:	89400054 	ori	r5,r17,1
 4013884:	81400115 	stw	r5,4(r16)
 4013888:	20800315 	stw	r2,12(r4)
 401388c:	11000215 	stw	r4,8(r2)
 4013890:	8463883a 	add	r17,r16,r17
 4013894:	9c400515 	stw	r17,20(r19)
 4013898:	9c400415 	stw	r17,16(r19)
 401389c:	18800054 	ori	r2,r3,1
 40138a0:	88800115 	stw	r2,4(r17)
 40138a4:	8a000315 	stw	r8,12(r17)
 40138a8:	8a000215 	stw	r8,8(r17)
 40138ac:	88e3883a 	add	r17,r17,r3
 40138b0:	88c00015 	stw	r3,0(r17)
 40138b4:	9009883a 	mov	r4,r18
 40138b8:	40148b00 	call	40148b0 <__malloc_unlock>
 40138bc:	80800204 	addi	r2,r16,8
 40138c0:	00001b06 	br	4013930 <_malloc_r+0x2a4>
 40138c4:	04400404 	movi	r17,16
 40138c8:	89402536 	bltu	r17,r5,4013960 <_malloc_r+0x2d4>
 40138cc:	40148ac0 	call	40148ac <__malloc_lock>
 40138d0:	00800184 	movi	r2,6
 40138d4:	01000084 	movi	r4,2
 40138d8:	04c10074 	movhi	r19,1025
 40138dc:	1085883a 	add	r2,r2,r2
 40138e0:	9cd5c904 	addi	r19,r19,22308
 40138e4:	1085883a 	add	r2,r2,r2
 40138e8:	9885883a 	add	r2,r19,r2
 40138ec:	14000117 	ldw	r16,4(r2)
 40138f0:	10fffe04 	addi	r3,r2,-8
 40138f4:	80c0d926 	beq	r16,r3,4013c5c <_malloc_r+0x5d0>
 40138f8:	80c00117 	ldw	r3,4(r16)
 40138fc:	81000317 	ldw	r4,12(r16)
 4013900:	00bfff04 	movi	r2,-4
 4013904:	1884703a 	and	r2,r3,r2
 4013908:	81400217 	ldw	r5,8(r16)
 401390c:	8085883a 	add	r2,r16,r2
 4013910:	10c00117 	ldw	r3,4(r2)
 4013914:	29000315 	stw	r4,12(r5)
 4013918:	21400215 	stw	r5,8(r4)
 401391c:	18c00054 	ori	r3,r3,1
 4013920:	10c00115 	stw	r3,4(r2)
 4013924:	9009883a 	mov	r4,r18
 4013928:	40148b00 	call	40148b0 <__malloc_unlock>
 401392c:	80800204 	addi	r2,r16,8
 4013930:	dfc00a17 	ldw	ra,40(sp)
 4013934:	df000917 	ldw	fp,36(sp)
 4013938:	ddc00817 	ldw	r23,32(sp)
 401393c:	dd800717 	ldw	r22,28(sp)
 4013940:	dd400617 	ldw	r21,24(sp)
 4013944:	dd000517 	ldw	r20,20(sp)
 4013948:	dcc00417 	ldw	r19,16(sp)
 401394c:	dc800317 	ldw	r18,12(sp)
 4013950:	dc400217 	ldw	r17,8(sp)
 4013954:	dc000117 	ldw	r16,4(sp)
 4013958:	dec00b04 	addi	sp,sp,44
 401395c:	f800283a 	ret
 4013960:	00800304 	movi	r2,12
 4013964:	90800015 	stw	r2,0(r18)
 4013968:	0005883a 	mov	r2,zero
 401396c:	003ff006 	br	4013930 <_gp+0xffff5e04>
 4013970:	01002004 	movi	r4,128
 4013974:	02001004 	movi	r8,64
 4013978:	01c00fc4 	movi	r7,63
 401397c:	003f6106 	br	4013704 <_gp+0xffff5bd8>
 4013980:	4009883a 	mov	r4,r8
 4013984:	003f7506 	br	401375c <_gp+0xffff5c30>
 4013988:	81000317 	ldw	r4,12(r16)
 401398c:	003fde06 	br	4013908 <_gp+0xffff5ddc>
 4013990:	81c5883a 	add	r2,r16,r7
 4013994:	11400117 	ldw	r5,4(r2)
 4013998:	9009883a 	mov	r4,r18
 401399c:	29400054 	ori	r5,r5,1
 40139a0:	11400115 	stw	r5,4(r2)
 40139a4:	40148b00 	call	40148b0 <__malloc_unlock>
 40139a8:	80800204 	addi	r2,r16,8
 40139ac:	003fe006 	br	4013930 <_gp+0xffff5e04>
 40139b0:	9c000217 	ldw	r16,8(r19)
 40139b4:	00bfff04 	movi	r2,-4
 40139b8:	85800117 	ldw	r22,4(r16)
 40139bc:	b0ac703a 	and	r22,r22,r2
 40139c0:	b4400336 	bltu	r22,r17,40139d0 <_malloc_r+0x344>
 40139c4:	b445c83a 	sub	r2,r22,r17
 40139c8:	00c003c4 	movi	r3,15
 40139cc:	18805d16 	blt	r3,r2,4013b44 <_malloc_r+0x4b8>
 40139d0:	05c10074 	movhi	r23,1025
 40139d4:	00810074 	movhi	r2,1025
 40139d8:	10996904 	addi	r2,r2,26020
 40139dc:	bdd6d404 	addi	r23,r23,23376
 40139e0:	15400017 	ldw	r21,0(r2)
 40139e4:	b8c00017 	ldw	r3,0(r23)
 40139e8:	00bfffc4 	movi	r2,-1
 40139ec:	858d883a 	add	r6,r16,r22
 40139f0:	8d6b883a 	add	r21,r17,r21
 40139f4:	1880ea26 	beq	r3,r2,4013da0 <_malloc_r+0x714>
 40139f8:	ad4403c4 	addi	r21,r21,4111
 40139fc:	00bc0004 	movi	r2,-4096
 4013a00:	a8aa703a 	and	r21,r21,r2
 4013a04:	a80b883a 	mov	r5,r21
 4013a08:	9009883a 	mov	r4,r18
 4013a0c:	d9800015 	stw	r6,0(sp)
 4013a10:	40141b00 	call	40141b0 <_sbrk_r>
 4013a14:	1029883a 	mov	r20,r2
 4013a18:	00bfffc4 	movi	r2,-1
 4013a1c:	d9800017 	ldw	r6,0(sp)
 4013a20:	a080e826 	beq	r20,r2,4013dc4 <_malloc_r+0x738>
 4013a24:	a180a636 	bltu	r20,r6,4013cc0 <_malloc_r+0x634>
 4013a28:	07010074 	movhi	fp,1025
 4013a2c:	e7196a04 	addi	fp,fp,26024
 4013a30:	e0800017 	ldw	r2,0(fp)
 4013a34:	a887883a 	add	r3,r21,r2
 4013a38:	e0c00015 	stw	r3,0(fp)
 4013a3c:	3500e626 	beq	r6,r20,4013dd8 <_malloc_r+0x74c>
 4013a40:	b9000017 	ldw	r4,0(r23)
 4013a44:	00bfffc4 	movi	r2,-1
 4013a48:	2080ee26 	beq	r4,r2,4013e04 <_malloc_r+0x778>
 4013a4c:	a185c83a 	sub	r2,r20,r6
 4013a50:	10c5883a 	add	r2,r2,r3
 4013a54:	e0800015 	stw	r2,0(fp)
 4013a58:	a0c001cc 	andi	r3,r20,7
 4013a5c:	1800bc26 	beq	r3,zero,4013d50 <_malloc_r+0x6c4>
 4013a60:	a0e9c83a 	sub	r20,r20,r3
 4013a64:	00840204 	movi	r2,4104
 4013a68:	a5000204 	addi	r20,r20,8
 4013a6c:	10c7c83a 	sub	r3,r2,r3
 4013a70:	a545883a 	add	r2,r20,r21
 4013a74:	1083ffcc 	andi	r2,r2,4095
 4013a78:	18abc83a 	sub	r21,r3,r2
 4013a7c:	a80b883a 	mov	r5,r21
 4013a80:	9009883a 	mov	r4,r18
 4013a84:	40141b00 	call	40141b0 <_sbrk_r>
 4013a88:	00ffffc4 	movi	r3,-1
 4013a8c:	10c0e126 	beq	r2,r3,4013e14 <_malloc_r+0x788>
 4013a90:	1505c83a 	sub	r2,r2,r20
 4013a94:	1545883a 	add	r2,r2,r21
 4013a98:	10800054 	ori	r2,r2,1
 4013a9c:	e0c00017 	ldw	r3,0(fp)
 4013aa0:	9d000215 	stw	r20,8(r19)
 4013aa4:	a0800115 	stw	r2,4(r20)
 4013aa8:	a8c7883a 	add	r3,r21,r3
 4013aac:	e0c00015 	stw	r3,0(fp)
 4013ab0:	84c00e26 	beq	r16,r19,4013aec <_malloc_r+0x460>
 4013ab4:	018003c4 	movi	r6,15
 4013ab8:	3580a72e 	bgeu	r6,r22,4013d58 <_malloc_r+0x6cc>
 4013abc:	81400117 	ldw	r5,4(r16)
 4013ac0:	013ffe04 	movi	r4,-8
 4013ac4:	b0bffd04 	addi	r2,r22,-12
 4013ac8:	1104703a 	and	r2,r2,r4
 4013acc:	2900004c 	andi	r4,r5,1
 4013ad0:	2088b03a 	or	r4,r4,r2
 4013ad4:	81000115 	stw	r4,4(r16)
 4013ad8:	01400144 	movi	r5,5
 4013adc:	8089883a 	add	r4,r16,r2
 4013ae0:	21400115 	stw	r5,4(r4)
 4013ae4:	21400215 	stw	r5,8(r4)
 4013ae8:	3080cd36 	bltu	r6,r2,4013e20 <_malloc_r+0x794>
 4013aec:	00810074 	movhi	r2,1025
 4013af0:	10996804 	addi	r2,r2,26016
 4013af4:	11000017 	ldw	r4,0(r2)
 4013af8:	20c0012e 	bgeu	r4,r3,4013b00 <_malloc_r+0x474>
 4013afc:	10c00015 	stw	r3,0(r2)
 4013b00:	00810074 	movhi	r2,1025
 4013b04:	10996704 	addi	r2,r2,26012
 4013b08:	11000017 	ldw	r4,0(r2)
 4013b0c:	9c000217 	ldw	r16,8(r19)
 4013b10:	20c0012e 	bgeu	r4,r3,4013b18 <_malloc_r+0x48c>
 4013b14:	10c00015 	stw	r3,0(r2)
 4013b18:	80c00117 	ldw	r3,4(r16)
 4013b1c:	00bfff04 	movi	r2,-4
 4013b20:	1886703a 	and	r3,r3,r2
 4013b24:	1c45c83a 	sub	r2,r3,r17
 4013b28:	1c400236 	bltu	r3,r17,4013b34 <_malloc_r+0x4a8>
 4013b2c:	00c003c4 	movi	r3,15
 4013b30:	18800416 	blt	r3,r2,4013b44 <_malloc_r+0x4b8>
 4013b34:	9009883a 	mov	r4,r18
 4013b38:	40148b00 	call	40148b0 <__malloc_unlock>
 4013b3c:	0005883a 	mov	r2,zero
 4013b40:	003f7b06 	br	4013930 <_gp+0xffff5e04>
 4013b44:	88c00054 	ori	r3,r17,1
 4013b48:	80c00115 	stw	r3,4(r16)
 4013b4c:	8463883a 	add	r17,r16,r17
 4013b50:	10800054 	ori	r2,r2,1
 4013b54:	9c400215 	stw	r17,8(r19)
 4013b58:	88800115 	stw	r2,4(r17)
 4013b5c:	9009883a 	mov	r4,r18
 4013b60:	40148b00 	call	40148b0 <__malloc_unlock>
 4013b64:	80800204 	addi	r2,r16,8
 4013b68:	003f7106 	br	4013930 <_gp+0xffff5e04>
 4013b6c:	00c00504 	movi	r3,20
 4013b70:	18804a2e 	bgeu	r3,r2,4013c9c <_malloc_r+0x610>
 4013b74:	00c01504 	movi	r3,84
 4013b78:	18806e36 	bltu	r3,r2,4013d34 <_malloc_r+0x6a8>
 4013b7c:	8804d33a 	srli	r2,r17,12
 4013b80:	12001bc4 	addi	r8,r2,111
 4013b84:	11c01b84 	addi	r7,r2,110
 4013b88:	4209883a 	add	r4,r8,r8
 4013b8c:	003edd06 	br	4013704 <_gp+0xffff5bd8>
 4013b90:	3804d27a 	srli	r2,r7,9
 4013b94:	00c00104 	movi	r3,4
 4013b98:	1880442e 	bgeu	r3,r2,4013cac <_malloc_r+0x620>
 4013b9c:	00c00504 	movi	r3,20
 4013ba0:	18808136 	bltu	r3,r2,4013da8 <_malloc_r+0x71c>
 4013ba4:	11401704 	addi	r5,r2,92
 4013ba8:	10c016c4 	addi	r3,r2,91
 4013bac:	294b883a 	add	r5,r5,r5
 4013bb0:	294b883a 	add	r5,r5,r5
 4013bb4:	294b883a 	add	r5,r5,r5
 4013bb8:	994b883a 	add	r5,r19,r5
 4013bbc:	28800017 	ldw	r2,0(r5)
 4013bc0:	01810074 	movhi	r6,1025
 4013bc4:	297ffe04 	addi	r5,r5,-8
 4013bc8:	3195c904 	addi	r6,r6,22308
 4013bcc:	28806526 	beq	r5,r2,4013d64 <_malloc_r+0x6d8>
 4013bd0:	01bfff04 	movi	r6,-4
 4013bd4:	10c00117 	ldw	r3,4(r2)
 4013bd8:	1986703a 	and	r3,r3,r6
 4013bdc:	38c0022e 	bgeu	r7,r3,4013be8 <_malloc_r+0x55c>
 4013be0:	10800217 	ldw	r2,8(r2)
 4013be4:	28bffb1e 	bne	r5,r2,4013bd4 <_gp+0xffff60a8>
 4013be8:	11400317 	ldw	r5,12(r2)
 4013bec:	98c00117 	ldw	r3,4(r19)
 4013bf0:	81400315 	stw	r5,12(r16)
 4013bf4:	80800215 	stw	r2,8(r16)
 4013bf8:	2c000215 	stw	r16,8(r5)
 4013bfc:	14000315 	stw	r16,12(r2)
 4013c00:	003ef806 	br	40137e4 <_gp+0xffff5cb8>
 4013c04:	88c00054 	ori	r3,r17,1
 4013c08:	80c00115 	stw	r3,4(r16)
 4013c0c:	8463883a 	add	r17,r16,r17
 4013c10:	34400515 	stw	r17,20(r6)
 4013c14:	34400415 	stw	r17,16(r6)
 4013c18:	10c00054 	ori	r3,r2,1
 4013c1c:	8a000315 	stw	r8,12(r17)
 4013c20:	8a000215 	stw	r8,8(r17)
 4013c24:	88c00115 	stw	r3,4(r17)
 4013c28:	88a3883a 	add	r17,r17,r2
 4013c2c:	88800015 	stw	r2,0(r17)
 4013c30:	9009883a 	mov	r4,r18
 4013c34:	40148b00 	call	40148b0 <__malloc_unlock>
 4013c38:	80800204 	addi	r2,r16,8
 4013c3c:	003f3c06 	br	4013930 <_gp+0xffff5e04>
 4013c40:	30c00117 	ldw	r3,4(r6)
 4013c44:	003ee706 	br	40137e4 <_gp+0xffff5cb8>
 4013c48:	5ac00044 	addi	r11,r11,1
 4013c4c:	588000cc 	andi	r2,r11,3
 4013c50:	31800204 	addi	r6,r6,8
 4013c54:	103efd1e 	bne	r2,zero,401384c <_gp+0xffff5d20>
 4013c58:	00002406 	br	4013cec <_malloc_r+0x660>
 4013c5c:	14000317 	ldw	r16,12(r2)
 4013c60:	143f251e 	bne	r2,r16,40138f8 <_gp+0xffff5dcc>
 4013c64:	21000084 	addi	r4,r4,2
 4013c68:	003ebc06 	br	401375c <_gp+0xffff5c30>
 4013c6c:	8085883a 	add	r2,r16,r2
 4013c70:	10c00117 	ldw	r3,4(r2)
 4013c74:	81000317 	ldw	r4,12(r16)
 4013c78:	81400217 	ldw	r5,8(r16)
 4013c7c:	18c00054 	ori	r3,r3,1
 4013c80:	10c00115 	stw	r3,4(r2)
 4013c84:	29000315 	stw	r4,12(r5)
 4013c88:	21400215 	stw	r5,8(r4)
 4013c8c:	9009883a 	mov	r4,r18
 4013c90:	40148b00 	call	40148b0 <__malloc_unlock>
 4013c94:	80800204 	addi	r2,r16,8
 4013c98:	003f2506 	br	4013930 <_gp+0xffff5e04>
 4013c9c:	12001704 	addi	r8,r2,92
 4013ca0:	11c016c4 	addi	r7,r2,91
 4013ca4:	4209883a 	add	r4,r8,r8
 4013ca8:	003e9606 	br	4013704 <_gp+0xffff5bd8>
 4013cac:	3804d1ba 	srli	r2,r7,6
 4013cb0:	11400e44 	addi	r5,r2,57
 4013cb4:	10c00e04 	addi	r3,r2,56
 4013cb8:	294b883a 	add	r5,r5,r5
 4013cbc:	003fbc06 	br	4013bb0 <_gp+0xffff6084>
 4013cc0:	84ff5926 	beq	r16,r19,4013a28 <_gp+0xffff5efc>
 4013cc4:	00810074 	movhi	r2,1025
 4013cc8:	1095c904 	addi	r2,r2,22308
 4013ccc:	14000217 	ldw	r16,8(r2)
 4013cd0:	00bfff04 	movi	r2,-4
 4013cd4:	80c00117 	ldw	r3,4(r16)
 4013cd8:	1886703a 	and	r3,r3,r2
 4013cdc:	003f9106 	br	4013b24 <_gp+0xffff5ff8>
 4013ce0:	60800217 	ldw	r2,8(r12)
 4013ce4:	213fffc4 	addi	r4,r4,-1
 4013ce8:	1300651e 	bne	r2,r12,4013e80 <_malloc_r+0x7f4>
 4013cec:	208000cc 	andi	r2,r4,3
 4013cf0:	633ffe04 	addi	r12,r12,-8
 4013cf4:	103ffa1e 	bne	r2,zero,4013ce0 <_gp+0xffff61b4>
 4013cf8:	98800117 	ldw	r2,4(r19)
 4013cfc:	0146303a 	nor	r3,zero,r5
 4013d00:	1884703a 	and	r2,r3,r2
 4013d04:	98800115 	stw	r2,4(r19)
 4013d08:	294b883a 	add	r5,r5,r5
 4013d0c:	117f2836 	bltu	r2,r5,40139b0 <_gp+0xffff5e84>
 4013d10:	283f2726 	beq	r5,zero,40139b0 <_gp+0xffff5e84>
 4013d14:	2886703a 	and	r3,r5,r2
 4013d18:	5809883a 	mov	r4,r11
 4013d1c:	183ec31e 	bne	r3,zero,401382c <_gp+0xffff5d00>
 4013d20:	294b883a 	add	r5,r5,r5
 4013d24:	2886703a 	and	r3,r5,r2
 4013d28:	21000104 	addi	r4,r4,4
 4013d2c:	183ffc26 	beq	r3,zero,4013d20 <_gp+0xffff61f4>
 4013d30:	003ebe06 	br	401382c <_gp+0xffff5d00>
 4013d34:	00c05504 	movi	r3,340
 4013d38:	18801236 	bltu	r3,r2,4013d84 <_malloc_r+0x6f8>
 4013d3c:	8804d3fa 	srli	r2,r17,15
 4013d40:	12001e04 	addi	r8,r2,120
 4013d44:	11c01dc4 	addi	r7,r2,119
 4013d48:	4209883a 	add	r4,r8,r8
 4013d4c:	003e6d06 	br	4013704 <_gp+0xffff5bd8>
 4013d50:	00c40004 	movi	r3,4096
 4013d54:	003f4606 	br	4013a70 <_gp+0xffff5f44>
 4013d58:	00800044 	movi	r2,1
 4013d5c:	a0800115 	stw	r2,4(r20)
 4013d60:	003f7406 	br	4013b34 <_gp+0xffff6008>
 4013d64:	1805d0ba 	srai	r2,r3,2
 4013d68:	01c00044 	movi	r7,1
 4013d6c:	30c00117 	ldw	r3,4(r6)
 4013d70:	388e983a 	sll	r7,r7,r2
 4013d74:	2805883a 	mov	r2,r5
 4013d78:	38c6b03a 	or	r3,r7,r3
 4013d7c:	30c00115 	stw	r3,4(r6)
 4013d80:	003f9b06 	br	4013bf0 <_gp+0xffff60c4>
 4013d84:	00c15504 	movi	r3,1364
 4013d88:	18801a36 	bltu	r3,r2,4013df4 <_malloc_r+0x768>
 4013d8c:	8804d4ba 	srli	r2,r17,18
 4013d90:	12001f44 	addi	r8,r2,125
 4013d94:	11c01f04 	addi	r7,r2,124
 4013d98:	4209883a 	add	r4,r8,r8
 4013d9c:	003e5906 	br	4013704 <_gp+0xffff5bd8>
 4013da0:	ad400404 	addi	r21,r21,16
 4013da4:	003f1706 	br	4013a04 <_gp+0xffff5ed8>
 4013da8:	00c01504 	movi	r3,84
 4013dac:	18802336 	bltu	r3,r2,4013e3c <_malloc_r+0x7b0>
 4013db0:	3804d33a 	srli	r2,r7,12
 4013db4:	11401bc4 	addi	r5,r2,111
 4013db8:	10c01b84 	addi	r3,r2,110
 4013dbc:	294b883a 	add	r5,r5,r5
 4013dc0:	003f7b06 	br	4013bb0 <_gp+0xffff6084>
 4013dc4:	9c000217 	ldw	r16,8(r19)
 4013dc8:	00bfff04 	movi	r2,-4
 4013dcc:	80c00117 	ldw	r3,4(r16)
 4013dd0:	1886703a 	and	r3,r3,r2
 4013dd4:	003f5306 	br	4013b24 <_gp+0xffff5ff8>
 4013dd8:	3083ffcc 	andi	r2,r6,4095
 4013ddc:	103f181e 	bne	r2,zero,4013a40 <_gp+0xffff5f14>
 4013de0:	99000217 	ldw	r4,8(r19)
 4013de4:	b545883a 	add	r2,r22,r21
 4013de8:	10800054 	ori	r2,r2,1
 4013dec:	20800115 	stw	r2,4(r4)
 4013df0:	003f3e06 	br	4013aec <_gp+0xffff5fc0>
 4013df4:	01003f84 	movi	r4,254
 4013df8:	02001fc4 	movi	r8,127
 4013dfc:	01c01f84 	movi	r7,126
 4013e00:	003e4006 	br	4013704 <_gp+0xffff5bd8>
 4013e04:	00810074 	movhi	r2,1025
 4013e08:	1096d404 	addi	r2,r2,23376
 4013e0c:	15000015 	stw	r20,0(r2)
 4013e10:	003f1106 	br	4013a58 <_gp+0xffff5f2c>
 4013e14:	00800044 	movi	r2,1
 4013e18:	002b883a 	mov	r21,zero
 4013e1c:	003f1f06 	br	4013a9c <_gp+0xffff5f70>
 4013e20:	81400204 	addi	r5,r16,8
 4013e24:	9009883a 	mov	r4,r18
 4013e28:	40130380 	call	4013038 <_free_r>
 4013e2c:	00810074 	movhi	r2,1025
 4013e30:	10996a04 	addi	r2,r2,26024
 4013e34:	10c00017 	ldw	r3,0(r2)
 4013e38:	003f2c06 	br	4013aec <_gp+0xffff5fc0>
 4013e3c:	00c05504 	movi	r3,340
 4013e40:	18800536 	bltu	r3,r2,4013e58 <_malloc_r+0x7cc>
 4013e44:	3804d3fa 	srli	r2,r7,15
 4013e48:	11401e04 	addi	r5,r2,120
 4013e4c:	10c01dc4 	addi	r3,r2,119
 4013e50:	294b883a 	add	r5,r5,r5
 4013e54:	003f5606 	br	4013bb0 <_gp+0xffff6084>
 4013e58:	00c15504 	movi	r3,1364
 4013e5c:	18800536 	bltu	r3,r2,4013e74 <_malloc_r+0x7e8>
 4013e60:	3804d4ba 	srli	r2,r7,18
 4013e64:	11401f44 	addi	r5,r2,125
 4013e68:	10c01f04 	addi	r3,r2,124
 4013e6c:	294b883a 	add	r5,r5,r5
 4013e70:	003f4f06 	br	4013bb0 <_gp+0xffff6084>
 4013e74:	01403f84 	movi	r5,254
 4013e78:	00c01f84 	movi	r3,126
 4013e7c:	003f4c06 	br	4013bb0 <_gp+0xffff6084>
 4013e80:	98800117 	ldw	r2,4(r19)
 4013e84:	003fa006 	br	4013d08 <_gp+0xffff61dc>
 4013e88:	8808d0fa 	srli	r4,r17,3
 4013e8c:	20800044 	addi	r2,r4,1
 4013e90:	1085883a 	add	r2,r2,r2
 4013e94:	003e9006 	br	40138d8 <_gp+0xffff5dac>

04013e98 <memset>:
 4013e98:	20c000cc 	andi	r3,r4,3
 4013e9c:	2005883a 	mov	r2,r4
 4013ea0:	18004426 	beq	r3,zero,4013fb4 <memset+0x11c>
 4013ea4:	31ffffc4 	addi	r7,r6,-1
 4013ea8:	30004026 	beq	r6,zero,4013fac <memset+0x114>
 4013eac:	2813883a 	mov	r9,r5
 4013eb0:	200d883a 	mov	r6,r4
 4013eb4:	2007883a 	mov	r3,r4
 4013eb8:	00000406 	br	4013ecc <memset+0x34>
 4013ebc:	3a3fffc4 	addi	r8,r7,-1
 4013ec0:	31800044 	addi	r6,r6,1
 4013ec4:	38003926 	beq	r7,zero,4013fac <memset+0x114>
 4013ec8:	400f883a 	mov	r7,r8
 4013ecc:	18c00044 	addi	r3,r3,1
 4013ed0:	32400005 	stb	r9,0(r6)
 4013ed4:	1a0000cc 	andi	r8,r3,3
 4013ed8:	403ff81e 	bne	r8,zero,4013ebc <_gp+0xffff6390>
 4013edc:	010000c4 	movi	r4,3
 4013ee0:	21c02d2e 	bgeu	r4,r7,4013f98 <memset+0x100>
 4013ee4:	29003fcc 	andi	r4,r5,255
 4013ee8:	200c923a 	slli	r6,r4,8
 4013eec:	3108b03a 	or	r4,r6,r4
 4013ef0:	200c943a 	slli	r6,r4,16
 4013ef4:	218cb03a 	or	r6,r4,r6
 4013ef8:	010003c4 	movi	r4,15
 4013efc:	21c0182e 	bgeu	r4,r7,4013f60 <memset+0xc8>
 4013f00:	3b3ffc04 	addi	r12,r7,-16
 4013f04:	6018d13a 	srli	r12,r12,4
 4013f08:	1a000104 	addi	r8,r3,4
 4013f0c:	1ac00204 	addi	r11,r3,8
 4013f10:	6008913a 	slli	r4,r12,4
 4013f14:	1a800304 	addi	r10,r3,12
 4013f18:	1813883a 	mov	r9,r3
 4013f1c:	21000504 	addi	r4,r4,20
 4013f20:	1909883a 	add	r4,r3,r4
 4013f24:	49800015 	stw	r6,0(r9)
 4013f28:	41800015 	stw	r6,0(r8)
 4013f2c:	59800015 	stw	r6,0(r11)
 4013f30:	51800015 	stw	r6,0(r10)
 4013f34:	42000404 	addi	r8,r8,16
 4013f38:	4a400404 	addi	r9,r9,16
 4013f3c:	5ac00404 	addi	r11,r11,16
 4013f40:	52800404 	addi	r10,r10,16
 4013f44:	413ff71e 	bne	r8,r4,4013f24 <_gp+0xffff63f8>
 4013f48:	63000044 	addi	r12,r12,1
 4013f4c:	6018913a 	slli	r12,r12,4
 4013f50:	39c003cc 	andi	r7,r7,15
 4013f54:	010000c4 	movi	r4,3
 4013f58:	1b07883a 	add	r3,r3,r12
 4013f5c:	21c00e2e 	bgeu	r4,r7,4013f98 <memset+0x100>
 4013f60:	1813883a 	mov	r9,r3
 4013f64:	3811883a 	mov	r8,r7
 4013f68:	010000c4 	movi	r4,3
 4013f6c:	49800015 	stw	r6,0(r9)
 4013f70:	423fff04 	addi	r8,r8,-4
 4013f74:	4a400104 	addi	r9,r9,4
 4013f78:	223ffc36 	bltu	r4,r8,4013f6c <_gp+0xffff6440>
 4013f7c:	393fff04 	addi	r4,r7,-4
 4013f80:	2008d0ba 	srli	r4,r4,2
 4013f84:	39c000cc 	andi	r7,r7,3
 4013f88:	21000044 	addi	r4,r4,1
 4013f8c:	2109883a 	add	r4,r4,r4
 4013f90:	2109883a 	add	r4,r4,r4
 4013f94:	1907883a 	add	r3,r3,r4
 4013f98:	38000526 	beq	r7,zero,4013fb0 <memset+0x118>
 4013f9c:	19cf883a 	add	r7,r3,r7
 4013fa0:	19400005 	stb	r5,0(r3)
 4013fa4:	18c00044 	addi	r3,r3,1
 4013fa8:	38fffd1e 	bne	r7,r3,4013fa0 <_gp+0xffff6474>
 4013fac:	f800283a 	ret
 4013fb0:	f800283a 	ret
 4013fb4:	2007883a 	mov	r3,r4
 4013fb8:	300f883a 	mov	r7,r6
 4013fbc:	003fc706 	br	4013edc <_gp+0xffff63b0>

04013fc0 <lflush>:
 4013fc0:	2080030b 	ldhu	r2,12(r4)
 4013fc4:	00c00244 	movi	r3,9
 4013fc8:	1080024c 	andi	r2,r2,9
 4013fcc:	10c00226 	beq	r2,r3,4013fd8 <lflush+0x18>
 4013fd0:	0005883a 	mov	r2,zero
 4013fd4:	f800283a 	ret
 4013fd8:	4012b341 	jmpi	4012b34 <fflush>

04013fdc <__srefill_r>:
 4013fdc:	defffc04 	addi	sp,sp,-16
 4013fe0:	dc400115 	stw	r17,4(sp)
 4013fe4:	dc000015 	stw	r16,0(sp)
 4013fe8:	dfc00315 	stw	ra,12(sp)
 4013fec:	dc800215 	stw	r18,8(sp)
 4013ff0:	2023883a 	mov	r17,r4
 4013ff4:	2821883a 	mov	r16,r5
 4013ff8:	20000226 	beq	r4,zero,4014004 <__srefill_r+0x28>
 4013ffc:	20800e17 	ldw	r2,56(r4)
 4014000:	10003c26 	beq	r2,zero,40140f4 <__srefill_r+0x118>
 4014004:	80c0030b 	ldhu	r3,12(r16)
 4014008:	1908000c 	andi	r4,r3,8192
 401400c:	1805883a 	mov	r2,r3
 4014010:	2000071e 	bne	r4,zero,4014030 <__srefill_r+0x54>
 4014014:	81001917 	ldw	r4,100(r16)
 4014018:	18880014 	ori	r2,r3,8192
 401401c:	00f7ffc4 	movi	r3,-8193
 4014020:	20c8703a 	and	r4,r4,r3
 4014024:	8080030d 	sth	r2,12(r16)
 4014028:	1007883a 	mov	r3,r2
 401402c:	81001915 	stw	r4,100(r16)
 4014030:	80000115 	stw	zero,4(r16)
 4014034:	1100080c 	andi	r4,r2,32
 4014038:	2000571e 	bne	r4,zero,4014198 <__srefill_r+0x1bc>
 401403c:	1100010c 	andi	r4,r2,4
 4014040:	20001f26 	beq	r4,zero,40140c0 <__srefill_r+0xe4>
 4014044:	81400c17 	ldw	r5,48(r16)
 4014048:	28000826 	beq	r5,zero,401406c <__srefill_r+0x90>
 401404c:	80801004 	addi	r2,r16,64
 4014050:	28800226 	beq	r5,r2,401405c <__srefill_r+0x80>
 4014054:	8809883a 	mov	r4,r17
 4014058:	40130380 	call	4013038 <_free_r>
 401405c:	80800f17 	ldw	r2,60(r16)
 4014060:	80000c15 	stw	zero,48(r16)
 4014064:	80800115 	stw	r2,4(r16)
 4014068:	1000391e 	bne	r2,zero,4014150 <__srefill_r+0x174>
 401406c:	80800417 	ldw	r2,16(r16)
 4014070:	10004b26 	beq	r2,zero,40141a0 <__srefill_r+0x1c4>
 4014074:	8480030b 	ldhu	r18,12(r16)
 4014078:	908000cc 	andi	r2,r18,3
 401407c:	10001f1e 	bne	r2,zero,40140fc <__srefill_r+0x120>
 4014080:	81800417 	ldw	r6,16(r16)
 4014084:	80800817 	ldw	r2,32(r16)
 4014088:	81c00517 	ldw	r7,20(r16)
 401408c:	81400717 	ldw	r5,28(r16)
 4014090:	81800015 	stw	r6,0(r16)
 4014094:	8809883a 	mov	r4,r17
 4014098:	103ee83a 	callr	r2
 401409c:	80800115 	stw	r2,4(r16)
 40140a0:	00800e0e 	bge	zero,r2,40140dc <__srefill_r+0x100>
 40140a4:	0005883a 	mov	r2,zero
 40140a8:	dfc00317 	ldw	ra,12(sp)
 40140ac:	dc800217 	ldw	r18,8(sp)
 40140b0:	dc400117 	ldw	r17,4(sp)
 40140b4:	dc000017 	ldw	r16,0(sp)
 40140b8:	dec00404 	addi	sp,sp,16
 40140bc:	f800283a 	ret
 40140c0:	1100040c 	andi	r4,r2,16
 40140c4:	20003026 	beq	r4,zero,4014188 <__srefill_r+0x1ac>
 40140c8:	1080020c 	andi	r2,r2,8
 40140cc:	1000241e 	bne	r2,zero,4014160 <__srefill_r+0x184>
 40140d0:	18c00114 	ori	r3,r3,4
 40140d4:	80c0030d 	sth	r3,12(r16)
 40140d8:	003fe406 	br	401406c <_gp+0xffff6540>
 40140dc:	80c0030b 	ldhu	r3,12(r16)
 40140e0:	1000161e 	bne	r2,zero,401413c <__srefill_r+0x160>
 40140e4:	18c00814 	ori	r3,r3,32
 40140e8:	00bfffc4 	movi	r2,-1
 40140ec:	80c0030d 	sth	r3,12(r16)
 40140f0:	003fed06 	br	40140a8 <_gp+0xffff657c>
 40140f4:	4012ec40 	call	4012ec4 <__sinit>
 40140f8:	003fc206 	br	4014004 <_gp+0xffff64d8>
 40140fc:	00810074 	movhi	r2,1025
 4014100:	1096d204 	addi	r2,r2,23368
 4014104:	11000017 	ldw	r4,0(r2)
 4014108:	01410074 	movhi	r5,1025
 401410c:	00800044 	movi	r2,1
 4014110:	294ff004 	addi	r5,r5,16320
 4014114:	8080030d 	sth	r2,12(r16)
 4014118:	40133480 	call	4013348 <_fwalk>
 401411c:	00800244 	movi	r2,9
 4014120:	8480030d 	sth	r18,12(r16)
 4014124:	9480024c 	andi	r18,r18,9
 4014128:	90bfd51e 	bne	r18,r2,4014080 <_gp+0xffff6554>
 401412c:	800b883a 	mov	r5,r16
 4014130:	8809883a 	mov	r4,r17
 4014134:	40128bc0 	call	40128bc <__sflush_r>
 4014138:	003fd106 	br	4014080 <_gp+0xffff6554>
 401413c:	18c01014 	ori	r3,r3,64
 4014140:	80000115 	stw	zero,4(r16)
 4014144:	00bfffc4 	movi	r2,-1
 4014148:	80c0030d 	sth	r3,12(r16)
 401414c:	003fd606 	br	40140a8 <_gp+0xffff657c>
 4014150:	80c00e17 	ldw	r3,56(r16)
 4014154:	0005883a 	mov	r2,zero
 4014158:	80c00015 	stw	r3,0(r16)
 401415c:	003fd206 	br	40140a8 <_gp+0xffff657c>
 4014160:	800b883a 	mov	r5,r16
 4014164:	8809883a 	mov	r4,r17
 4014168:	4012ad80 	call	4012ad8 <_fflush_r>
 401416c:	10000a1e 	bne	r2,zero,4014198 <__srefill_r+0x1bc>
 4014170:	8080030b 	ldhu	r2,12(r16)
 4014174:	00fffdc4 	movi	r3,-9
 4014178:	80000215 	stw	zero,8(r16)
 401417c:	1886703a 	and	r3,r3,r2
 4014180:	80000615 	stw	zero,24(r16)
 4014184:	003fd206 	br	40140d0 <_gp+0xffff65a4>
 4014188:	00800244 	movi	r2,9
 401418c:	88800015 	stw	r2,0(r17)
 4014190:	18c01014 	ori	r3,r3,64
 4014194:	80c0030d 	sth	r3,12(r16)
 4014198:	00bfffc4 	movi	r2,-1
 401419c:	003fc206 	br	40140a8 <_gp+0xffff657c>
 40141a0:	800b883a 	mov	r5,r16
 40141a4:	8809883a 	mov	r4,r17
 40141a8:	40134d00 	call	40134d0 <__smakebuf_r>
 40141ac:	003fb106 	br	4014074 <_gp+0xffff6548>

040141b0 <_sbrk_r>:
 40141b0:	defffd04 	addi	sp,sp,-12
 40141b4:	dc000015 	stw	r16,0(sp)
 40141b8:	04010074 	movhi	r16,1025
 40141bc:	dc400115 	stw	r17,4(sp)
 40141c0:	84196604 	addi	r16,r16,26008
 40141c4:	2023883a 	mov	r17,r4
 40141c8:	2809883a 	mov	r4,r5
 40141cc:	dfc00215 	stw	ra,8(sp)
 40141d0:	80000015 	stw	zero,0(r16)
 40141d4:	40149c80 	call	40149c8 <sbrk>
 40141d8:	00ffffc4 	movi	r3,-1
 40141dc:	10c00526 	beq	r2,r3,40141f4 <_sbrk_r+0x44>
 40141e0:	dfc00217 	ldw	ra,8(sp)
 40141e4:	dc400117 	ldw	r17,4(sp)
 40141e8:	dc000017 	ldw	r16,0(sp)
 40141ec:	dec00304 	addi	sp,sp,12
 40141f0:	f800283a 	ret
 40141f4:	80c00017 	ldw	r3,0(r16)
 40141f8:	183ff926 	beq	r3,zero,40141e0 <_gp+0xffff66b4>
 40141fc:	88c00015 	stw	r3,0(r17)
 4014200:	003ff706 	br	40141e0 <_gp+0xffff66b4>

04014204 <__sread>:
 4014204:	defffe04 	addi	sp,sp,-8
 4014208:	dc000015 	stw	r16,0(sp)
 401420c:	2821883a 	mov	r16,r5
 4014210:	2940038f 	ldh	r5,14(r5)
 4014214:	dfc00115 	stw	ra,4(sp)
 4014218:	40146080 	call	4014608 <_read_r>
 401421c:	10000716 	blt	r2,zero,401423c <__sread+0x38>
 4014220:	80c01417 	ldw	r3,80(r16)
 4014224:	1887883a 	add	r3,r3,r2
 4014228:	80c01415 	stw	r3,80(r16)
 401422c:	dfc00117 	ldw	ra,4(sp)
 4014230:	dc000017 	ldw	r16,0(sp)
 4014234:	dec00204 	addi	sp,sp,8
 4014238:	f800283a 	ret
 401423c:	80c0030b 	ldhu	r3,12(r16)
 4014240:	18fbffcc 	andi	r3,r3,61439
 4014244:	80c0030d 	sth	r3,12(r16)
 4014248:	dfc00117 	ldw	ra,4(sp)
 401424c:	dc000017 	ldw	r16,0(sp)
 4014250:	dec00204 	addi	sp,sp,8
 4014254:	f800283a 	ret

04014258 <__seofread>:
 4014258:	0005883a 	mov	r2,zero
 401425c:	f800283a 	ret

04014260 <__swrite>:
 4014260:	2880030b 	ldhu	r2,12(r5)
 4014264:	defffb04 	addi	sp,sp,-20
 4014268:	dcc00315 	stw	r19,12(sp)
 401426c:	dc800215 	stw	r18,8(sp)
 4014270:	dc400115 	stw	r17,4(sp)
 4014274:	dc000015 	stw	r16,0(sp)
 4014278:	dfc00415 	stw	ra,16(sp)
 401427c:	10c0400c 	andi	r3,r2,256
 4014280:	2821883a 	mov	r16,r5
 4014284:	2023883a 	mov	r17,r4
 4014288:	3025883a 	mov	r18,r6
 401428c:	3827883a 	mov	r19,r7
 4014290:	18000526 	beq	r3,zero,40142a8 <__swrite+0x48>
 4014294:	2940038f 	ldh	r5,14(r5)
 4014298:	01c00084 	movi	r7,2
 401429c:	000d883a 	mov	r6,zero
 40142a0:	40145a80 	call	40145a8 <_lseek_r>
 40142a4:	8080030b 	ldhu	r2,12(r16)
 40142a8:	8140038f 	ldh	r5,14(r16)
 40142ac:	10bbffcc 	andi	r2,r2,61439
 40142b0:	980f883a 	mov	r7,r19
 40142b4:	900d883a 	mov	r6,r18
 40142b8:	8809883a 	mov	r4,r17
 40142bc:	8080030d 	sth	r2,12(r16)
 40142c0:	dfc00417 	ldw	ra,16(sp)
 40142c4:	dcc00317 	ldw	r19,12(sp)
 40142c8:	dc800217 	ldw	r18,8(sp)
 40142cc:	dc400117 	ldw	r17,4(sp)
 40142d0:	dc000017 	ldw	r16,0(sp)
 40142d4:	dec00504 	addi	sp,sp,20
 40142d8:	40143401 	jmpi	4014340 <_write_r>

040142dc <__sseek>:
 40142dc:	defffe04 	addi	sp,sp,-8
 40142e0:	dc000015 	stw	r16,0(sp)
 40142e4:	2821883a 	mov	r16,r5
 40142e8:	2940038f 	ldh	r5,14(r5)
 40142ec:	dfc00115 	stw	ra,4(sp)
 40142f0:	40145a80 	call	40145a8 <_lseek_r>
 40142f4:	00ffffc4 	movi	r3,-1
 40142f8:	10c00826 	beq	r2,r3,401431c <__sseek+0x40>
 40142fc:	80c0030b 	ldhu	r3,12(r16)
 4014300:	80801415 	stw	r2,80(r16)
 4014304:	18c40014 	ori	r3,r3,4096
 4014308:	80c0030d 	sth	r3,12(r16)
 401430c:	dfc00117 	ldw	ra,4(sp)
 4014310:	dc000017 	ldw	r16,0(sp)
 4014314:	dec00204 	addi	sp,sp,8
 4014318:	f800283a 	ret
 401431c:	80c0030b 	ldhu	r3,12(r16)
 4014320:	18fbffcc 	andi	r3,r3,61439
 4014324:	80c0030d 	sth	r3,12(r16)
 4014328:	dfc00117 	ldw	ra,4(sp)
 401432c:	dc000017 	ldw	r16,0(sp)
 4014330:	dec00204 	addi	sp,sp,8
 4014334:	f800283a 	ret

04014338 <__sclose>:
 4014338:	2940038f 	ldh	r5,14(r5)
 401433c:	40143a01 	jmpi	40143a0 <_close_r>

04014340 <_write_r>:
 4014340:	defffd04 	addi	sp,sp,-12
 4014344:	2805883a 	mov	r2,r5
 4014348:	dc000015 	stw	r16,0(sp)
 401434c:	04010074 	movhi	r16,1025
 4014350:	dc400115 	stw	r17,4(sp)
 4014354:	300b883a 	mov	r5,r6
 4014358:	84196604 	addi	r16,r16,26008
 401435c:	2023883a 	mov	r17,r4
 4014360:	380d883a 	mov	r6,r7
 4014364:	1009883a 	mov	r4,r2
 4014368:	dfc00215 	stw	ra,8(sp)
 401436c:	80000015 	stw	zero,0(r16)
 4014370:	40116580 	call	4011658 <write>
 4014374:	00ffffc4 	movi	r3,-1
 4014378:	10c00526 	beq	r2,r3,4014390 <_write_r+0x50>
 401437c:	dfc00217 	ldw	ra,8(sp)
 4014380:	dc400117 	ldw	r17,4(sp)
 4014384:	dc000017 	ldw	r16,0(sp)
 4014388:	dec00304 	addi	sp,sp,12
 401438c:	f800283a 	ret
 4014390:	80c00017 	ldw	r3,0(r16)
 4014394:	183ff926 	beq	r3,zero,401437c <_gp+0xffff6850>
 4014398:	88c00015 	stw	r3,0(r17)
 401439c:	003ff706 	br	401437c <_gp+0xffff6850>

040143a0 <_close_r>:
 40143a0:	defffd04 	addi	sp,sp,-12
 40143a4:	dc000015 	stw	r16,0(sp)
 40143a8:	04010074 	movhi	r16,1025
 40143ac:	dc400115 	stw	r17,4(sp)
 40143b0:	84196604 	addi	r16,r16,26008
 40143b4:	2023883a 	mov	r17,r4
 40143b8:	2809883a 	mov	r4,r5
 40143bc:	dfc00215 	stw	ra,8(sp)
 40143c0:	80000015 	stw	zero,0(r16)
 40143c4:	40119000 	call	4011900 <close>
 40143c8:	00ffffc4 	movi	r3,-1
 40143cc:	10c00526 	beq	r2,r3,40143e4 <_close_r+0x44>
 40143d0:	dfc00217 	ldw	ra,8(sp)
 40143d4:	dc400117 	ldw	r17,4(sp)
 40143d8:	dc000017 	ldw	r16,0(sp)
 40143dc:	dec00304 	addi	sp,sp,12
 40143e0:	f800283a 	ret
 40143e4:	80c00017 	ldw	r3,0(r16)
 40143e8:	183ff926 	beq	r3,zero,40143d0 <_gp+0xffff68a4>
 40143ec:	88c00015 	stw	r3,0(r17)
 40143f0:	003ff706 	br	40143d0 <_gp+0xffff68a4>

040143f4 <_fclose_r>:
 40143f4:	28003926 	beq	r5,zero,40144dc <_fclose_r+0xe8>
 40143f8:	defffc04 	addi	sp,sp,-16
 40143fc:	dc400115 	stw	r17,4(sp)
 4014400:	dc000015 	stw	r16,0(sp)
 4014404:	dfc00315 	stw	ra,12(sp)
 4014408:	dc800215 	stw	r18,8(sp)
 401440c:	2023883a 	mov	r17,r4
 4014410:	2821883a 	mov	r16,r5
 4014414:	20000226 	beq	r4,zero,4014420 <_fclose_r+0x2c>
 4014418:	20800e17 	ldw	r2,56(r4)
 401441c:	10002726 	beq	r2,zero,40144bc <_fclose_r+0xc8>
 4014420:	8080030f 	ldh	r2,12(r16)
 4014424:	1000071e 	bne	r2,zero,4014444 <_fclose_r+0x50>
 4014428:	0005883a 	mov	r2,zero
 401442c:	dfc00317 	ldw	ra,12(sp)
 4014430:	dc800217 	ldw	r18,8(sp)
 4014434:	dc400117 	ldw	r17,4(sp)
 4014438:	dc000017 	ldw	r16,0(sp)
 401443c:	dec00404 	addi	sp,sp,16
 4014440:	f800283a 	ret
 4014444:	800b883a 	mov	r5,r16
 4014448:	8809883a 	mov	r4,r17
 401444c:	40128bc0 	call	40128bc <__sflush_r>
 4014450:	1025883a 	mov	r18,r2
 4014454:	80800b17 	ldw	r2,44(r16)
 4014458:	10000426 	beq	r2,zero,401446c <_fclose_r+0x78>
 401445c:	81400717 	ldw	r5,28(r16)
 4014460:	8809883a 	mov	r4,r17
 4014464:	103ee83a 	callr	r2
 4014468:	10001616 	blt	r2,zero,40144c4 <_fclose_r+0xd0>
 401446c:	8080030b 	ldhu	r2,12(r16)
 4014470:	1080200c 	andi	r2,r2,128
 4014474:	1000151e 	bne	r2,zero,40144cc <_fclose_r+0xd8>
 4014478:	81400c17 	ldw	r5,48(r16)
 401447c:	28000526 	beq	r5,zero,4014494 <_fclose_r+0xa0>
 4014480:	80801004 	addi	r2,r16,64
 4014484:	28800226 	beq	r5,r2,4014490 <_fclose_r+0x9c>
 4014488:	8809883a 	mov	r4,r17
 401448c:	40130380 	call	4013038 <_free_r>
 4014490:	80000c15 	stw	zero,48(r16)
 4014494:	81401117 	ldw	r5,68(r16)
 4014498:	28000326 	beq	r5,zero,40144a8 <_fclose_r+0xb4>
 401449c:	8809883a 	mov	r4,r17
 40144a0:	40130380 	call	4013038 <_free_r>
 40144a4:	80001115 	stw	zero,68(r16)
 40144a8:	4012ed40 	call	4012ed4 <__sfp_lock_acquire>
 40144ac:	8000030d 	sth	zero,12(r16)
 40144b0:	4012ed80 	call	4012ed8 <__sfp_lock_release>
 40144b4:	9005883a 	mov	r2,r18
 40144b8:	003fdc06 	br	401442c <_gp+0xffff6900>
 40144bc:	4012ec40 	call	4012ec4 <__sinit>
 40144c0:	003fd706 	br	4014420 <_gp+0xffff68f4>
 40144c4:	04bfffc4 	movi	r18,-1
 40144c8:	003fe806 	br	401446c <_gp+0xffff6940>
 40144cc:	81400417 	ldw	r5,16(r16)
 40144d0:	8809883a 	mov	r4,r17
 40144d4:	40130380 	call	4013038 <_free_r>
 40144d8:	003fe706 	br	4014478 <_gp+0xffff694c>
 40144dc:	0005883a 	mov	r2,zero
 40144e0:	f800283a 	ret

040144e4 <fclose>:
 40144e4:	00810074 	movhi	r2,1025
 40144e8:	1096d304 	addi	r2,r2,23372
 40144ec:	200b883a 	mov	r5,r4
 40144f0:	11000017 	ldw	r4,0(r2)
 40144f4:	40143f41 	jmpi	40143f4 <_fclose_r>

040144f8 <_fstat_r>:
 40144f8:	defffd04 	addi	sp,sp,-12
 40144fc:	2805883a 	mov	r2,r5
 4014500:	dc000015 	stw	r16,0(sp)
 4014504:	04010074 	movhi	r16,1025
 4014508:	dc400115 	stw	r17,4(sp)
 401450c:	84196604 	addi	r16,r16,26008
 4014510:	2023883a 	mov	r17,r4
 4014514:	300b883a 	mov	r5,r6
 4014518:	1009883a 	mov	r4,r2
 401451c:	dfc00215 	stw	ra,8(sp)
 4014520:	80000015 	stw	zero,0(r16)
 4014524:	401467c0 	call	401467c <fstat>
 4014528:	00ffffc4 	movi	r3,-1
 401452c:	10c00526 	beq	r2,r3,4014544 <_fstat_r+0x4c>
 4014530:	dfc00217 	ldw	ra,8(sp)
 4014534:	dc400117 	ldw	r17,4(sp)
 4014538:	dc000017 	ldw	r16,0(sp)
 401453c:	dec00304 	addi	sp,sp,12
 4014540:	f800283a 	ret
 4014544:	80c00017 	ldw	r3,0(r16)
 4014548:	183ff926 	beq	r3,zero,4014530 <_gp+0xffff6a04>
 401454c:	88c00015 	stw	r3,0(r17)
 4014550:	003ff706 	br	4014530 <_gp+0xffff6a04>

04014554 <_isatty_r>:
 4014554:	defffd04 	addi	sp,sp,-12
 4014558:	dc000015 	stw	r16,0(sp)
 401455c:	04010074 	movhi	r16,1025
 4014560:	dc400115 	stw	r17,4(sp)
 4014564:	84196604 	addi	r16,r16,26008
 4014568:	2023883a 	mov	r17,r4
 401456c:	2809883a 	mov	r4,r5
 4014570:	dfc00215 	stw	ra,8(sp)
 4014574:	80000015 	stw	zero,0(r16)
 4014578:	40147440 	call	4014744 <isatty>
 401457c:	00ffffc4 	movi	r3,-1
 4014580:	10c00526 	beq	r2,r3,4014598 <_isatty_r+0x44>
 4014584:	dfc00217 	ldw	ra,8(sp)
 4014588:	dc400117 	ldw	r17,4(sp)
 401458c:	dc000017 	ldw	r16,0(sp)
 4014590:	dec00304 	addi	sp,sp,12
 4014594:	f800283a 	ret
 4014598:	80c00017 	ldw	r3,0(r16)
 401459c:	183ff926 	beq	r3,zero,4014584 <_gp+0xffff6a58>
 40145a0:	88c00015 	stw	r3,0(r17)
 40145a4:	003ff706 	br	4014584 <_gp+0xffff6a58>

040145a8 <_lseek_r>:
 40145a8:	defffd04 	addi	sp,sp,-12
 40145ac:	2805883a 	mov	r2,r5
 40145b0:	dc000015 	stw	r16,0(sp)
 40145b4:	04010074 	movhi	r16,1025
 40145b8:	dc400115 	stw	r17,4(sp)
 40145bc:	300b883a 	mov	r5,r6
 40145c0:	84196604 	addi	r16,r16,26008
 40145c4:	2023883a 	mov	r17,r4
 40145c8:	380d883a 	mov	r6,r7
 40145cc:	1009883a 	mov	r4,r2
 40145d0:	dfc00215 	stw	ra,8(sp)
 40145d4:	80000015 	stw	zero,0(r16)
 40145d8:	40147e40 	call	40147e4 <lseek>
 40145dc:	00ffffc4 	movi	r3,-1
 40145e0:	10c00526 	beq	r2,r3,40145f8 <_lseek_r+0x50>
 40145e4:	dfc00217 	ldw	ra,8(sp)
 40145e8:	dc400117 	ldw	r17,4(sp)
 40145ec:	dc000017 	ldw	r16,0(sp)
 40145f0:	dec00304 	addi	sp,sp,12
 40145f4:	f800283a 	ret
 40145f8:	80c00017 	ldw	r3,0(r16)
 40145fc:	183ff926 	beq	r3,zero,40145e4 <_gp+0xffff6ab8>
 4014600:	88c00015 	stw	r3,0(r17)
 4014604:	003ff706 	br	40145e4 <_gp+0xffff6ab8>

04014608 <_read_r>:
 4014608:	defffd04 	addi	sp,sp,-12
 401460c:	2805883a 	mov	r2,r5
 4014610:	dc000015 	stw	r16,0(sp)
 4014614:	04010074 	movhi	r16,1025
 4014618:	dc400115 	stw	r17,4(sp)
 401461c:	300b883a 	mov	r5,r6
 4014620:	84196604 	addi	r16,r16,26008
 4014624:	2023883a 	mov	r17,r4
 4014628:	380d883a 	mov	r6,r7
 401462c:	1009883a 	mov	r4,r2
 4014630:	dfc00215 	stw	ra,8(sp)
 4014634:	80000015 	stw	zero,0(r16)
 4014638:	40148b40 	call	40148b4 <read>
 401463c:	00ffffc4 	movi	r3,-1
 4014640:	10c00526 	beq	r2,r3,4014658 <_read_r+0x50>
 4014644:	dfc00217 	ldw	ra,8(sp)
 4014648:	dc400117 	ldw	r17,4(sp)
 401464c:	dc000017 	ldw	r16,0(sp)
 4014650:	dec00304 	addi	sp,sp,12
 4014654:	f800283a 	ret
 4014658:	80c00017 	ldw	r3,0(r16)
 401465c:	183ff926 	beq	r3,zero,4014644 <_gp+0xffff6b18>
 4014660:	88c00015 	stw	r3,0(r17)
 4014664:	003ff706 	br	4014644 <_gp+0xffff6b18>

04014668 <_exit>:
 4014668:	20000226 	beq	r4,zero,4014674 <_exit+0xc>
 401466c:	002af070 	cmpltui	zero,zero,43969
 4014670:	003fff06 	br	4014670 <_gp+0xffff6b44>
 4014674:	002af0b0 	cmpltui	zero,zero,43970
 4014678:	003ffd06 	br	4014670 <_gp+0xffff6b44>

0401467c <fstat>:
 401467c:	defffb04 	addi	sp,sp,-20
 4014680:	dfc00415 	stw	ra,16(sp)
 4014684:	dcc00315 	stw	r19,12(sp)
 4014688:	dc800215 	stw	r18,8(sp)
 401468c:	dc400115 	stw	r17,4(sp)
 4014690:	dc000015 	stw	r16,0(sp)
 4014694:	20002216 	blt	r4,zero,4014720 <fstat+0xa4>
 4014698:	2827883a 	mov	r19,r5
 401469c:	04010074 	movhi	r16,1025
 40146a0:	01400304 	movi	r5,12
 40146a4:	2023883a 	mov	r17,r4
 40146a8:	84145604 	addi	r16,r16,20824
 40146ac:	401137c0 	call	401137c <__mulsi3>
 40146b0:	80a5883a 	add	r18,r16,r2
 40146b4:	90001a26 	beq	r18,zero,4014720 <fstat+0xa4>
 40146b8:	01400304 	movi	r5,12
 40146bc:	8809883a 	mov	r4,r17
 40146c0:	401137c0 	call	401137c <__mulsi3>
 40146c4:	8085883a 	add	r2,r16,r2
 40146c8:	10800017 	ldw	r2,0(r2)
 40146cc:	10800817 	ldw	r2,32(r2)
 40146d0:	10000926 	beq	r2,zero,40146f8 <fstat+0x7c>
 40146d4:	980b883a 	mov	r5,r19
 40146d8:	9009883a 	mov	r4,r18
 40146dc:	dfc00417 	ldw	ra,16(sp)
 40146e0:	dcc00317 	ldw	r19,12(sp)
 40146e4:	dc800217 	ldw	r18,8(sp)
 40146e8:	dc400117 	ldw	r17,4(sp)
 40146ec:	dc000017 	ldw	r16,0(sp)
 40146f0:	dec00504 	addi	sp,sp,20
 40146f4:	1000683a 	jmp	r2
 40146f8:	00880004 	movi	r2,8192
 40146fc:	98800115 	stw	r2,4(r19)
 4014700:	0005883a 	mov	r2,zero
 4014704:	dfc00417 	ldw	ra,16(sp)
 4014708:	dcc00317 	ldw	r19,12(sp)
 401470c:	dc800217 	ldw	r18,8(sp)
 4014710:	dc400117 	ldw	r17,4(sp)
 4014714:	dc000017 	ldw	r16,0(sp)
 4014718:	dec00504 	addi	sp,sp,20
 401471c:	f800283a 	ret
 4014720:	d0a00617 	ldw	r2,-32744(gp)
 4014724:	10000526 	beq	r2,zero,401473c <fstat+0xc0>
 4014728:	103ee83a 	callr	r2
 401472c:	00c01444 	movi	r3,81
 4014730:	10c00015 	stw	r3,0(r2)
 4014734:	00bfffc4 	movi	r2,-1
 4014738:	003ff206 	br	4014704 <_gp+0xffff6bd8>
 401473c:	d0a29b04 	addi	r2,gp,-30100
 4014740:	003ffa06 	br	401472c <_gp+0xffff6c00>

04014744 <isatty>:
 4014744:	deffef04 	addi	sp,sp,-68
 4014748:	dfc01015 	stw	ra,64(sp)
 401474c:	dc000f15 	stw	r16,60(sp)
 4014750:	20001816 	blt	r4,zero,40147b4 <isatty+0x70>
 4014754:	01400304 	movi	r5,12
 4014758:	2021883a 	mov	r16,r4
 401475c:	401137c0 	call	401137c <__mulsi3>
 4014760:	00c10074 	movhi	r3,1025
 4014764:	18d45604 	addi	r3,r3,20824
 4014768:	1885883a 	add	r2,r3,r2
 401476c:	10001126 	beq	r2,zero,40147b4 <isatty+0x70>
 4014770:	10800017 	ldw	r2,0(r2)
 4014774:	10800817 	ldw	r2,32(r2)
 4014778:	10000926 	beq	r2,zero,40147a0 <isatty+0x5c>
 401477c:	d80b883a 	mov	r5,sp
 4014780:	8009883a 	mov	r4,r16
 4014784:	401467c0 	call	401467c <fstat>
 4014788:	d8800117 	ldw	r2,4(sp)
 401478c:	10880020 	cmpeqi	r2,r2,8192
 4014790:	dfc01017 	ldw	ra,64(sp)
 4014794:	dc000f17 	ldw	r16,60(sp)
 4014798:	dec01104 	addi	sp,sp,68
 401479c:	f800283a 	ret
 40147a0:	00800044 	movi	r2,1
 40147a4:	dfc01017 	ldw	ra,64(sp)
 40147a8:	dc000f17 	ldw	r16,60(sp)
 40147ac:	dec01104 	addi	sp,sp,68
 40147b0:	f800283a 	ret
 40147b4:	d0a00617 	ldw	r2,-32744(gp)
 40147b8:	10000826 	beq	r2,zero,40147dc <isatty+0x98>
 40147bc:	103ee83a 	callr	r2
 40147c0:	00c01444 	movi	r3,81
 40147c4:	10c00015 	stw	r3,0(r2)
 40147c8:	0005883a 	mov	r2,zero
 40147cc:	dfc01017 	ldw	ra,64(sp)
 40147d0:	dc000f17 	ldw	r16,60(sp)
 40147d4:	dec01104 	addi	sp,sp,68
 40147d8:	f800283a 	ret
 40147dc:	d0a29b04 	addi	r2,gp,-30100
 40147e0:	003ff706 	br	40147c0 <_gp+0xffff6c94>

040147e4 <lseek>:
 40147e4:	defffa04 	addi	sp,sp,-24
 40147e8:	dfc00515 	stw	ra,20(sp)
 40147ec:	dd000415 	stw	r20,16(sp)
 40147f0:	dcc00315 	stw	r19,12(sp)
 40147f4:	dc800215 	stw	r18,8(sp)
 40147f8:	dc400115 	stw	r17,4(sp)
 40147fc:	dc000015 	stw	r16,0(sp)
 4014800:	20001d16 	blt	r4,zero,4014878 <lseek+0x94>
 4014804:	2827883a 	mov	r19,r5
 4014808:	04010074 	movhi	r16,1025
 401480c:	01400304 	movi	r5,12
 4014810:	2023883a 	mov	r17,r4
 4014814:	3029883a 	mov	r20,r6
 4014818:	84145604 	addi	r16,r16,20824
 401481c:	401137c0 	call	401137c <__mulsi3>
 4014820:	80a5883a 	add	r18,r16,r2
 4014824:	90001426 	beq	r18,zero,4014878 <lseek+0x94>
 4014828:	01400304 	movi	r5,12
 401482c:	8809883a 	mov	r4,r17
 4014830:	401137c0 	call	401137c <__mulsi3>
 4014834:	8085883a 	add	r2,r16,r2
 4014838:	10800017 	ldw	r2,0(r2)
 401483c:	10800717 	ldw	r2,28(r2)
 4014840:	10001426 	beq	r2,zero,4014894 <lseek+0xb0>
 4014844:	a00d883a 	mov	r6,r20
 4014848:	980b883a 	mov	r5,r19
 401484c:	9009883a 	mov	r4,r18
 4014850:	103ee83a 	callr	r2
 4014854:	10001316 	blt	r2,zero,40148a4 <lseek+0xc0>
 4014858:	dfc00517 	ldw	ra,20(sp)
 401485c:	dd000417 	ldw	r20,16(sp)
 4014860:	dcc00317 	ldw	r19,12(sp)
 4014864:	dc800217 	ldw	r18,8(sp)
 4014868:	dc400117 	ldw	r17,4(sp)
 401486c:	dc000017 	ldw	r16,0(sp)
 4014870:	dec00604 	addi	sp,sp,24
 4014874:	f800283a 	ret
 4014878:	04001444 	movi	r16,81
 401487c:	d0a00617 	ldw	r2,-32744(gp)
 4014880:	10000626 	beq	r2,zero,401489c <lseek+0xb8>
 4014884:	103ee83a 	callr	r2
 4014888:	14000015 	stw	r16,0(r2)
 401488c:	00bfffc4 	movi	r2,-1
 4014890:	003ff106 	br	4014858 <_gp+0xffff6d2c>
 4014894:	04002184 	movi	r16,134
 4014898:	003ff806 	br	401487c <_gp+0xffff6d50>
 401489c:	d0a29b04 	addi	r2,gp,-30100
 40148a0:	003ff906 	br	4014888 <_gp+0xffff6d5c>
 40148a4:	00a1c83a 	sub	r16,zero,r2
 40148a8:	003ff406 	br	401487c <_gp+0xffff6d50>

040148ac <__malloc_lock>:
 40148ac:	f800283a 	ret

040148b0 <__malloc_unlock>:
 40148b0:	f800283a 	ret

040148b4 <read>:
 40148b4:	defffa04 	addi	sp,sp,-24
 40148b8:	dfc00515 	stw	ra,20(sp)
 40148bc:	dd000415 	stw	r20,16(sp)
 40148c0:	dcc00315 	stw	r19,12(sp)
 40148c4:	dc800215 	stw	r18,8(sp)
 40148c8:	dc400115 	stw	r17,4(sp)
 40148cc:	dc000015 	stw	r16,0(sp)
 40148d0:	20003016 	blt	r4,zero,4014994 <read+0xe0>
 40148d4:	2827883a 	mov	r19,r5
 40148d8:	04010074 	movhi	r16,1025
 40148dc:	01400304 	movi	r5,12
 40148e0:	2025883a 	mov	r18,r4
 40148e4:	3029883a 	mov	r20,r6
 40148e8:	84145604 	addi	r16,r16,20824
 40148ec:	401137c0 	call	401137c <__mulsi3>
 40148f0:	80a3883a 	add	r17,r16,r2
 40148f4:	88002726 	beq	r17,zero,4014994 <read+0xe0>
 40148f8:	88800217 	ldw	r2,8(r17)
 40148fc:	00c00044 	movi	r3,1
 4014900:	108000cc 	andi	r2,r2,3
 4014904:	10c01526 	beq	r2,r3,401495c <read+0xa8>
 4014908:	01400304 	movi	r5,12
 401490c:	9009883a 	mov	r4,r18
 4014910:	401137c0 	call	401137c <__mulsi3>
 4014914:	8085883a 	add	r2,r16,r2
 4014918:	10800017 	ldw	r2,0(r2)
 401491c:	10800517 	ldw	r2,20(r2)
 4014920:	10000e26 	beq	r2,zero,401495c <read+0xa8>
 4014924:	a00d883a 	mov	r6,r20
 4014928:	980b883a 	mov	r5,r19
 401492c:	8809883a 	mov	r4,r17
 4014930:	103ee83a 	callr	r2
 4014934:	1021883a 	mov	r16,r2
 4014938:	10000f16 	blt	r2,zero,4014978 <read+0xc4>
 401493c:	dfc00517 	ldw	ra,20(sp)
 4014940:	dd000417 	ldw	r20,16(sp)
 4014944:	dcc00317 	ldw	r19,12(sp)
 4014948:	dc800217 	ldw	r18,8(sp)
 401494c:	dc400117 	ldw	r17,4(sp)
 4014950:	dc000017 	ldw	r16,0(sp)
 4014954:	dec00604 	addi	sp,sp,24
 4014958:	f800283a 	ret
 401495c:	d0a00617 	ldw	r2,-32744(gp)
 4014960:	10001326 	beq	r2,zero,40149b0 <read+0xfc>
 4014964:	103ee83a 	callr	r2
 4014968:	00c00344 	movi	r3,13
 401496c:	10c00015 	stw	r3,0(r2)
 4014970:	00bfffc4 	movi	r2,-1
 4014974:	003ff106 	br	401493c <_gp+0xffff6e10>
 4014978:	d0a00617 	ldw	r2,-32744(gp)
 401497c:	10000e26 	beq	r2,zero,40149b8 <read+0x104>
 4014980:	103ee83a 	callr	r2
 4014984:	0421c83a 	sub	r16,zero,r16
 4014988:	14000015 	stw	r16,0(r2)
 401498c:	00bfffc4 	movi	r2,-1
 4014990:	003fea06 	br	401493c <_gp+0xffff6e10>
 4014994:	d0a00617 	ldw	r2,-32744(gp)
 4014998:	10000926 	beq	r2,zero,40149c0 <read+0x10c>
 401499c:	103ee83a 	callr	r2
 40149a0:	00c01444 	movi	r3,81
 40149a4:	10c00015 	stw	r3,0(r2)
 40149a8:	00bfffc4 	movi	r2,-1
 40149ac:	003fe306 	br	401493c <_gp+0xffff6e10>
 40149b0:	d0a29b04 	addi	r2,gp,-30100
 40149b4:	003fec06 	br	4014968 <_gp+0xffff6e3c>
 40149b8:	d0a29b04 	addi	r2,gp,-30100
 40149bc:	003ff106 	br	4014984 <_gp+0xffff6e58>
 40149c0:	d0a29b04 	addi	r2,gp,-30100
 40149c4:	003ff606 	br	40149a0 <_gp+0xffff6e74>

040149c8 <sbrk>:
 40149c8:	000b303a 	rdctl	r5,status
 40149cc:	00bfff84 	movi	r2,-2
 40149d0:	2884703a 	and	r2,r5,r2
 40149d4:	1001703a 	wrctl	status,r2
 40149d8:	d0a00b17 	ldw	r2,-32724(gp)
 40149dc:	00ffff04 	movi	r3,-4
 40149e0:	108000c4 	addi	r2,r2,3
 40149e4:	10c4703a 	and	r2,r2,r3
 40149e8:	00c100b4 	movhi	r3,1026
 40149ec:	d0a00b15 	stw	r2,-32724(gp)
 40149f0:	1109883a 	add	r4,r2,r4
 40149f4:	18e80004 	addi	r3,r3,-24576
 40149f8:	19000336 	bltu	r3,r4,4014a08 <sbrk+0x40>
 40149fc:	d1200b15 	stw	r4,-32724(gp)
 4014a00:	2801703a 	wrctl	status,r5
 4014a04:	f800283a 	ret
 4014a08:	2801703a 	wrctl	status,r5
 4014a0c:	00bfffc4 	movi	r2,-1
 4014a10:	f800283a 	ret
